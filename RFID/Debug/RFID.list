
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006f50  08006f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070bc  080070bc  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  080070bc  080070bc  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070bc  080070bc  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c0  080070c0  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080070c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000060  08007124  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08007124  0000920c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa73  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279d  00000000  00000000  00018afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000caf  00000000  00000000  0001c328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ad1  00000000  00000000  0001cfd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145fb  00000000  00000000  00035aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cb73  00000000  00000000  0004a0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d6c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045dc  00000000  00000000  000d6c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000db238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08006f38 	.word	0x08006f38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08006f38 	.word	0x08006f38

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	@ 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__aeabi_d2uiz>:
 8000a50:	004a      	lsls	r2, r1, #1
 8000a52:	d211      	bcs.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a54:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a58:	d211      	bcs.n	8000a7e <__aeabi_d2uiz+0x2e>
 8000a5a:	d50d      	bpl.n	8000a78 <__aeabi_d2uiz+0x28>
 8000a5c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a64:	d40e      	bmi.n	8000a84 <__aeabi_d2uiz+0x34>
 8000a66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a82:	d102      	bne.n	8000a8a <__aeabi_d2uiz+0x3a>
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	4770      	bx	lr
 8000a8a:	f04f 0000 	mov.w	r0, #0
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_frsub>:
 8000a90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a94:	e002      	b.n	8000a9c <__addsf3>
 8000a96:	bf00      	nop

08000a98 <__aeabi_fsub>:
 8000a98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a9c <__addsf3>:
 8000a9c:	0042      	lsls	r2, r0, #1
 8000a9e:	bf1f      	itttt	ne
 8000aa0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa4:	ea92 0f03 	teqne	r2, r3
 8000aa8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab0:	d06a      	beq.n	8000b88 <__addsf3+0xec>
 8000ab2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ab6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aba:	bfc1      	itttt	gt
 8000abc:	18d2      	addgt	r2, r2, r3
 8000abe:	4041      	eorgt	r1, r0
 8000ac0:	4048      	eorgt	r0, r1
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	bfb8      	it	lt
 8000ac6:	425b      	neglt	r3, r3
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	bf88      	it	hi
 8000acc:	4770      	bxhi	lr
 8000ace:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ae2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ae6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000aea:	bf18      	it	ne
 8000aec:	4249      	negne	r1, r1
 8000aee:	ea92 0f03 	teq	r2, r3
 8000af2:	d03f      	beq.n	8000b74 <__addsf3+0xd8>
 8000af4:	f1a2 0201 	sub.w	r2, r2, #1
 8000af8:	fa41 fc03 	asr.w	ip, r1, r3
 8000afc:	eb10 000c 	adds.w	r0, r0, ip
 8000b00:	f1c3 0320 	rsb	r3, r3, #32
 8000b04:	fa01 f103 	lsl.w	r1, r1, r3
 8000b08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b0c:	d502      	bpl.n	8000b14 <__addsf3+0x78>
 8000b0e:	4249      	negs	r1, r1
 8000b10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b18:	d313      	bcc.n	8000b42 <__addsf3+0xa6>
 8000b1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b1e:	d306      	bcc.n	8000b2e <__addsf3+0x92>
 8000b20:	0840      	lsrs	r0, r0, #1
 8000b22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b26:	f102 0201 	add.w	r2, r2, #1
 8000b2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000b2c:	d251      	bcs.n	8000bd2 <__addsf3+0x136>
 8000b2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b36:	bf08      	it	eq
 8000b38:	f020 0001 	biceq.w	r0, r0, #1
 8000b3c:	ea40 0003 	orr.w	r0, r0, r3
 8000b40:	4770      	bx	lr
 8000b42:	0049      	lsls	r1, r1, #1
 8000b44:	eb40 0000 	adc.w	r0, r0, r0
 8000b48:	3a01      	subs	r2, #1
 8000b4a:	bf28      	it	cs
 8000b4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b50:	d2ed      	bcs.n	8000b2e <__addsf3+0x92>
 8000b52:	fab0 fc80 	clz	ip, r0
 8000b56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000b5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b62:	bfaa      	itet	ge
 8000b64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b68:	4252      	neglt	r2, r2
 8000b6a:	4318      	orrge	r0, r3
 8000b6c:	bfbc      	itt	lt
 8000b6e:	40d0      	lsrlt	r0, r2
 8000b70:	4318      	orrlt	r0, r3
 8000b72:	4770      	bx	lr
 8000b74:	f092 0f00 	teq	r2, #0
 8000b78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b7c:	bf06      	itte	eq
 8000b7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b82:	3201      	addeq	r2, #1
 8000b84:	3b01      	subne	r3, #1
 8000b86:	e7b5      	b.n	8000af4 <__addsf3+0x58>
 8000b88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b96:	d021      	beq.n	8000bdc <__addsf3+0x140>
 8000b98:	ea92 0f03 	teq	r2, r3
 8000b9c:	d004      	beq.n	8000ba8 <__addsf3+0x10c>
 8000b9e:	f092 0f00 	teq	r2, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	4608      	moveq	r0, r1
 8000ba6:	4770      	bx	lr
 8000ba8:	ea90 0f01 	teq	r0, r1
 8000bac:	bf1c      	itt	ne
 8000bae:	2000      	movne	r0, #0
 8000bb0:	4770      	bxne	lr
 8000bb2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bb6:	d104      	bne.n	8000bc2 <__addsf3+0x126>
 8000bb8:	0040      	lsls	r0, r0, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bc6:	bf3c      	itt	cc
 8000bc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bxcc	lr
 8000bce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bda:	4770      	bx	lr
 8000bdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be0:	bf16      	itet	ne
 8000be2:	4608      	movne	r0, r1
 8000be4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be8:	4601      	movne	r1, r0
 8000bea:	0242      	lsls	r2, r0, #9
 8000bec:	bf06      	itte	eq
 8000bee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf2:	ea90 0f01 	teqeq	r0, r1
 8000bf6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_ui2f>:
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e004      	b.n	8000c0c <__aeabi_i2f+0x8>
 8000c02:	bf00      	nop

08000c04 <__aeabi_i2f>:
 8000c04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c08:	bf48      	it	mi
 8000c0a:	4240      	negmi	r0, r0
 8000c0c:	ea5f 0c00 	movs.w	ip, r0
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c18:	4601      	mov	r1, r0
 8000c1a:	f04f 0000 	mov.w	r0, #0
 8000c1e:	e01c      	b.n	8000c5a <__aeabi_l2f+0x2a>

08000c20 <__aeabi_ul2f>:
 8000c20:	ea50 0201 	orrs.w	r2, r0, r1
 8000c24:	bf08      	it	eq
 8000c26:	4770      	bxeq	lr
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e00a      	b.n	8000c44 <__aeabi_l2f+0x14>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_l2f>:
 8000c30:	ea50 0201 	orrs.w	r2, r0, r1
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c3c:	d502      	bpl.n	8000c44 <__aeabi_l2f+0x14>
 8000c3e:	4240      	negs	r0, r0
 8000c40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c44:	ea5f 0c01 	movs.w	ip, r1
 8000c48:	bf02      	ittt	eq
 8000c4a:	4684      	moveq	ip, r0
 8000c4c:	4601      	moveq	r1, r0
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c54:	bf08      	it	eq
 8000c56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c5e:	fabc f28c 	clz	r2, ip
 8000c62:	3a08      	subs	r2, #8
 8000c64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c68:	db10      	blt.n	8000c8c <__aeabi_l2f+0x5c>
 8000c6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c6e:	4463      	add	r3, ip
 8000c70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c74:	f1c2 0220 	rsb	r2, r2, #32
 8000c78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000c80:	eb43 0002 	adc.w	r0, r3, r2
 8000c84:	bf08      	it	eq
 8000c86:	f020 0001 	biceq.w	r0, r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	f102 0220 	add.w	r2, r2, #32
 8000c90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c94:	f1c2 0220 	rsb	r2, r2, #32
 8000c98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca0:	eb43 0002 	adc.w	r0, r3, r2
 8000ca4:	bf08      	it	eq
 8000ca6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000caa:	4770      	bx	lr

08000cac <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <DWT_Delay_Init+0x58>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <DWT_Delay_Init+0x58>)
 8000cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000cba:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <DWT_Delay_Init+0x58>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <DWT_Delay_Init+0x58>)
 8000cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cc6:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <DWT_Delay_Init+0x5c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8000d08 <DWT_Delay_Init+0x5c>)
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <DWT_Delay_Init+0x5c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <DWT_Delay_Init+0x5c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <DWT_Delay_Init+0x5c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000ce6:	bf00      	nop
    __ASM volatile ("NOP");
 8000ce8:	bf00      	nop
    __ASM volatile ("NOP");
 8000cea:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <DWT_Delay_Init+0x5c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e000      	b.n	8000cfa <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000cf8:	2301      	movs	r3, #1
    }
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000edf0 	.word	0xe000edf0
 8000d08:	e0001000 	.word	0xe0001000

08000d0c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4603      	mov	r3, r0
 8000d14:	460a      	mov	r2, r1
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	4a13      	ldr	r2, [pc, #76]	@ (8000d6c <I2C_LCD_ExpanderWrite+0x60>)
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4413      	add	r3, r2
 8000d24:	785a      	ldrb	r2, [r3, #1]
 8000d26:	79bb      	ldrb	r3, [r7, #6]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000d2e:	79fa      	ldrb	r2, [r7, #7]
 8000d30:	490f      	ldr	r1, [pc, #60]	@ (8000d70 <I2C_LCD_ExpanderWrite+0x64>)
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	490b      	ldr	r1, [pc, #44]	@ (8000d70 <I2C_LCD_ExpanderWrite+0x64>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3308      	adds	r3, #8
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	b299      	uxth	r1, r3
 8000d56:	f107 020f 	add.w	r2, r7, #15
 8000d5a:	2364      	movs	r3, #100	@ 0x64
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	f004 f850 	bl	8004e04 <HAL_I2C_Master_Transmit>
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000007c 	.word	0x2000007c
 8000d70:	08007034 	.word	0x08007034

08000d74 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffbb 	bl	8000d0c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000d96:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <I2C_LCD_EnPulse+0xac>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	4b21      	ldr	r3, [pc, #132]	@ (8000e24 <I2C_LCD_EnPulse+0xb0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <I2C_LCD_EnPulse+0xb4>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	005a      	lsls	r2, r3, #1
 8000daa:	4b1e      	ldr	r3, [pc, #120]	@ (8000e24 <I2C_LCD_EnPulse+0xb0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	491e      	ldr	r1, [pc, #120]	@ (8000e28 <I2C_LCD_EnPulse+0xb4>)
 8000db0:	fba1 1303 	umull	r1, r3, r1, r3
 8000db4:	0c9b      	lsrs	r3, r3, #18
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <I2C_LCD_EnPulse+0xac>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d8f8      	bhi.n	8000dbc <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	f023 0304 	bic.w	r3, r3, #4
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff98 	bl	8000d0c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <I2C_LCD_EnPulse+0xac>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <I2C_LCD_EnPulse+0xb0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <I2C_LCD_EnPulse+0xb4>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	0c9b      	lsrs	r3, r3, #18
 8000dee:	2232      	movs	r2, #50	@ 0x32
 8000df0:	fb03 f202 	mul.w	r2, r3, r2
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <I2C_LCD_EnPulse+0xb0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	490b      	ldr	r1, [pc, #44]	@ (8000e28 <I2C_LCD_EnPulse+0xb4>)
 8000dfa:	fba1 1303 	umull	r1, r3, r1, r3
 8000dfe:	0c9b      	lsrs	r3, r3, #18
 8000e00:	085b      	lsrs	r3, r3, #1
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <I2C_LCD_EnPulse+0xac>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f8      	bhi.n	8000e06 <I2C_LCD_EnPulse+0x92>
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010
 8000e24:	20000054 	.word	0x20000054
 8000e28:	431bde83 	.word	0x431bde83

08000e2c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	460a      	mov	r2, r1
 8000e36:	71fb      	strb	r3, [r7, #7]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8000e3c:	79ba      	ldrb	r2, [r7, #6]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff62 	bl	8000d0c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000e48:	79ba      	ldrb	r2, [r7, #6]
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff90 	bl	8000d74 <I2C_LCD_EnPulse>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	460b      	mov	r3, r1
 8000e68:	71bb      	strb	r3, [r7, #6]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	f023 030f 	bic.w	r3, r3, #15
 8000e74:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffcf 	bl	8000e2c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8000e8e:	7bba      	ldrb	r2, [r7, #14]
 8000e90:	797b      	ldrb	r3, [r7, #5]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffc6 	bl	8000e2c <I2C_LCD_Write4Bits>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8000eb8:	79b9      	ldrb	r1, [r7, #6]
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffcc 	bl	8000e5c <I2C_LCD_Send>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	460a      	mov	r2, r1
 8000ed6:	71fb      	strb	r3, [r7, #7]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8000edc:	79b9      	ldrb	r1, [r7, #6]
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffba 	bl	8000e5c <I2C_LCD_Send>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8000efa:	bf00      	nop
 8000efc:	f003 fb78 	bl	80045f0 <HAL_GetTick>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b31      	cmp	r3, #49	@ 0x31
 8000f04:	d9fa      	bls.n	8000efc <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2130      	movs	r1, #48	@ 0x30
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffcc 	bl	8000ea8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f14:	e01f      	b.n	8000f56 <I2C_LCD_Init+0x66>
 8000f16:	4b4b      	ldr	r3, [pc, #300]	@ (8001044 <I2C_LCD_Init+0x154>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <I2C_LCD_Init+0x158>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a4a      	ldr	r2, [pc, #296]	@ (800104c <I2C_LCD_Init+0x15c>)
 8000f22:	fba2 2303 	umull	r2, r3, r2, r3
 8000f26:	0c9b      	lsrs	r3, r3, #18
 8000f28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f2c:	fb03 f202 	mul.w	r2, r3, r2
 8000f30:	4b45      	ldr	r3, [pc, #276]	@ (8001048 <I2C_LCD_Init+0x158>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4945      	ldr	r1, [pc, #276]	@ (800104c <I2C_LCD_Init+0x15c>)
 8000f36:	fba1 1303 	umull	r1, r3, r1, r3
 8000f3a:	0c9b      	lsrs	r3, r3, #18
 8000f3c:	085b      	lsrs	r3, r3, #1
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <I2C_LCD_Init+0x154>)
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d8f8      	bhi.n	8000f42 <I2C_LCD_Init+0x52>
 8000f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f52:	3301      	adds	r3, #1
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d9dc      	bls.n	8000f16 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2130      	movs	r1, #48	@ 0x30
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffa1 	bl	8000ea8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
 8000f6a:	e01f      	b.n	8000fac <I2C_LCD_Init+0xbc>
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <I2C_LCD_Init+0x154>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <I2C_LCD_Init+0x158>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a35      	ldr	r2, [pc, #212]	@ (800104c <I2C_LCD_Init+0x15c>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f82:	fb03 f202 	mul.w	r2, r3, r2
 8000f86:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <I2C_LCD_Init+0x158>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4930      	ldr	r1, [pc, #192]	@ (800104c <I2C_LCD_Init+0x15c>)
 8000f8c:	fba1 1303 	umull	r1, r3, r1, r3
 8000f90:	0c9b      	lsrs	r3, r3, #18
 8000f92:	085b      	lsrs	r3, r3, #1
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <I2C_LCD_Init+0x154>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d8f8      	bhi.n	8000f98 <I2C_LCD_Init+0xa8>
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d9dc      	bls.n	8000f6c <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2130      	movs	r1, #48	@ 0x30
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff76 	bl	8000ea8 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8000fbc:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <I2C_LCD_Init+0x154>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <I2C_LCD_Init+0x158>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a21      	ldr	r2, [pc, #132]	@ (800104c <I2C_LCD_Init+0x15c>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	2296      	movs	r2, #150	@ 0x96
 8000fd0:	fb03 f202 	mul.w	r2, r3, r2
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001048 <I2C_LCD_Init+0x158>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	491c      	ldr	r1, [pc, #112]	@ (800104c <I2C_LCD_Init+0x15c>)
 8000fda:	fba1 1303 	umull	r1, r3, r1, r3
 8000fde:	0c9b      	lsrs	r3, r3, #18
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <I2C_LCD_Init+0x154>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f8      	bhi.n	8000fe6 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff55 	bl	8000ea8 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2128      	movs	r1, #40	@ 0x28
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff50 	bl	8000ea8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	210c      	movs	r1, #12
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff4b 	bl	8000ea8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2106      	movs	r1, #6
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff46 	bl	8000ea8 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <I2C_LCD_Init+0x160>)
 8001020:	2104      	movs	r1, #4
 8001022:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <I2C_LCD_Init+0x160>)
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	2208      	movs	r2, #8
 8001030:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f80d 	bl	8001054 <I2C_LCD_Clear>
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	@ 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010
 8001048:	20000054 	.word	0x20000054
 800104c:	431bde83 	.word	0x431bde83
 8001050:	2000007c 	.word	0x2000007c

08001054 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2101      	movs	r1, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ff20 	bl	8000ea8 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e01f      	b.n	80010ae <I2C_LCD_Clear+0x5a>
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <I2C_LCD_Clear+0x6c>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <I2C_LCD_Clear+0x70>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <I2C_LCD_Clear+0x74>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	0c9b      	lsrs	r3, r3, #18
 8001080:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001084:	fb03 f202 	mul.w	r2, r3, r2
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <I2C_LCD_Clear+0x70>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	490e      	ldr	r1, [pc, #56]	@ (80010c8 <I2C_LCD_Clear+0x74>)
 800108e:	fba1 1303 	umull	r1, r3, r1, r3
 8001092:	0c9b      	lsrs	r3, r3, #18
 8001094:	085b      	lsrs	r3, r3, #1
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <I2C_LCD_Clear+0x6c>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f8      	bhi.n	800109a <I2C_LCD_Clear+0x46>
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d9dc      	bls.n	800106e <I2C_LCD_Clear+0x1a>
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010
 80010c4:	20000054 	.word	0x20000054
 80010c8:	431bde83 	.word	0x431bde83

080010cc <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	460b      	mov	r3, r1
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	4613      	mov	r3, r2
 80010dc:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <I2C_LCD_SetCursor+0x7c>)
 80010e0:	f107 0408 	add.w	r4, r7, #8
 80010e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80010ea:	79fa      	ldrb	r2, [r7, #7]
 80010ec:	4917      	ldr	r1, [pc, #92]	@ (800114c <I2C_LCD_SetCursor+0x80>)
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	330a      	adds	r3, #10
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	797a      	ldrb	r2, [r7, #5]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d90a      	bls.n	8001118 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	4911      	ldr	r1, [pc, #68]	@ (800114c <I2C_LCD_SetCursor+0x80>)
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	330a      	adds	r3, #10
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	3318      	adds	r3, #24
 800111e:	443b      	add	r3, r7
 8001120:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	79bb      	ldrb	r3, [r7, #6]
 8001128:	4413      	add	r3, r2
 800112a:	b2db      	uxtb	r3, r3
 800112c:	b25b      	sxtb	r3, r3
 800112e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001132:	b25b      	sxtb	r3, r3
 8001134:	b2da      	uxtb	r2, r3
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff feb4 	bl	8000ea8 <I2C_LCD_Cmd>
}
 8001140:	bf00      	nop
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	08006f50 	.word	0x08006f50
 800114c:	08007034 	.word	0x08007034

08001150 <I2C_LCD_WriteChar>:

void I2C_LCD_WriteChar(uint8_t I2C_LCD_InstanceIndex, char Ch)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4611      	mov	r1, r2
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff feb0 	bl	8000ecc <I2C_LCD_Data>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8001180:	e008      	b.n	8001194 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	1c5a      	adds	r2, r3, #1
 8001186:	603a      	str	r2, [r7, #0]
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fe9c 	bl	8000ecc <I2C_LCD_Data>
    while (*Str)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f2      	bne.n	8001182 <I2C_LCD_WriteString+0xe>
    }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <I2C_LCD_Backlight>:
{
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void I2C_LCD_Backlight(uint8_t I2C_LCD_InstanceIndex)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <I2C_LCD_Backlight+0x28>)
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	2208      	movs	r2, #8
 80011bc:	705a      	strb	r2, [r3, #1]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fda2 	bl	8000d0c <I2C_LCD_ExpanderWrite>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000007c 	.word	0x2000007c

080011d4 <I2C_LCD_Display>:
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
}

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <I2C_LCD_Display+0x40>)
 80011e2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	b2d1      	uxtb	r1, r2
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <I2C_LCD_Display+0x40>)
 80011f0:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <I2C_LCD_Display+0x40>)
 80011f8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	b2da      	uxtb	r2, r3
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe4e 	bl	8000ea8 <I2C_LCD_Cmd>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000007c 	.word	0x2000007c

08001218 <KEYPAD_Init>:
static KEYPAD_info gs_KEYPAD_info[KEYPAD_UNITS] = {0};



void KEYPAD_Init(uint16_t au16_Instance, uint8_t* au8_KeyStates)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b092      	sub	sp, #72	@ 0x48
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]

	if(au8_KeyStates != NULL)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8189 	beq.w	8001552 <KEYPAD_Init+0x33a>
	{
		gs_KEYPAD_info[au16_Instance].KEY_States = au8_KeyStates;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4997      	ldr	r1, [pc, #604]	@ (80014a0 <KEYPAD_Init+0x288>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	{
		/* Potentially Should Return An Error */
		return;
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001250:	e0ac      	b.n	80013ac <KEYPAD_Init+0x194>
	{
		if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOA)
 8001252:	88fa      	ldrh	r2, [r7, #6]
 8001254:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001258:	4892      	ldr	r0, [pc, #584]	@ (80014a4 <KEYPAD_Init+0x28c>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001268:	4a8f      	ldr	r2, [pc, #572]	@ (80014a8 <KEYPAD_Init+0x290>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10c      	bne.n	8001288 <KEYPAD_Init+0x70>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b8f      	ldr	r3, [pc, #572]	@ (80014ac <KEYPAD_Init+0x294>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a8e      	ldr	r2, [pc, #568]	@ (80014ac <KEYPAD_Init+0x294>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b8c      	ldr	r3, [pc, #560]	@ (80014ac <KEYPAD_Init+0x294>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
 8001284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001286:	e06a      	b.n	800135e <KEYPAD_Init+0x146>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOB)
 8001288:	88fa      	ldrh	r2, [r7, #6]
 800128a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800128e:	4885      	ldr	r0, [pc, #532]	@ (80014a4 <KEYPAD_Init+0x28c>)
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800129e:	4a84      	ldr	r2, [pc, #528]	@ (80014b0 <KEYPAD_Init+0x298>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d10c      	bne.n	80012be <KEYPAD_Init+0xa6>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	4b81      	ldr	r3, [pc, #516]	@ (80014ac <KEYPAD_Init+0x294>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a80      	ldr	r2, [pc, #512]	@ (80014ac <KEYPAD_Init+0x294>)
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b7e      	ldr	r3, [pc, #504]	@ (80014ac <KEYPAD_Init+0x294>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012bc:	e04f      	b.n	800135e <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOC)
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80012c4:	4877      	ldr	r0, [pc, #476]	@ (80014a4 <KEYPAD_Init+0x28c>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80012d4:	4a77      	ldr	r2, [pc, #476]	@ (80014b4 <KEYPAD_Init+0x29c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10c      	bne.n	80012f4 <KEYPAD_Init+0xdc>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <KEYPAD_Init+0x294>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a73      	ldr	r2, [pc, #460]	@ (80014ac <KEYPAD_Init+0x294>)
 80012e0:	f043 0310 	orr.w	r3, r3, #16
 80012e4:	6193      	str	r3, [r2, #24]
 80012e6:	4b71      	ldr	r3, [pc, #452]	@ (80014ac <KEYPAD_Init+0x294>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012f2:	e034      	b.n	800135e <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOD)
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80012fa:	486a      	ldr	r0, [pc, #424]	@ (80014a4 <KEYPAD_Init+0x28c>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	440b      	add	r3, r1
 8001306:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800130a:	4a6b      	ldr	r2, [pc, #428]	@ (80014b8 <KEYPAD_Init+0x2a0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d10c      	bne.n	800132a <KEYPAD_Init+0x112>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8001310:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <KEYPAD_Init+0x294>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a65      	ldr	r2, [pc, #404]	@ (80014ac <KEYPAD_Init+0x294>)
 8001316:	f043 0320 	orr.w	r3, r3, #32
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <KEYPAD_Init+0x294>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	e019      	b.n	800135e <KEYPAD_Init+0x146>
		}
		else if(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i] == GPIOE)
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001330:	485c      	ldr	r0, [pc, #368]	@ (80014a4 <KEYPAD_Init+0x28c>)
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001340:	4a5e      	ldr	r2, [pc, #376]	@ (80014bc <KEYPAD_Init+0x2a4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d10b      	bne.n	800135e <KEYPAD_Init+0x146>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	4b59      	ldr	r3, [pc, #356]	@ (80014ac <KEYPAD_Init+0x294>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a58      	ldr	r2, [pc, #352]	@ (80014ac <KEYPAD_Init+0x294>)
 800134c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001350:	6193      	str	r3, [r2, #24]
 8001352:	4b56      	ldr	r3, [pc, #344]	@ (80014ac <KEYPAD_Init+0x294>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800135a:	623b      	str	r3, [r7, #32]
 800135c:	6a3b      	ldr	r3, [r7, #32]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].ROW_PIN[i];
 800135e:	88fa      	ldrh	r2, [r7, #6]
 8001360:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001364:	484f      	ldr	r0, [pc, #316]	@ (80014a4 <KEYPAD_Init+0x28c>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3308      	adds	r3, #8
 8001372:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800137c:	2302      	movs	r3, #2
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], &GPIO_InitStruct);
 8001380:	88fa      	ldrh	r2, [r7, #6]
 8001382:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001386:	4847      	ldr	r0, [pc, #284]	@ (80014a4 <KEYPAD_Init+0x28c>)
 8001388:	4613      	mov	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001396:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800139a:	4611      	mov	r1, r2
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fa39 	bl	8004814 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 80013a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013a6:	3301      	adds	r3, #1
 80013a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	f67f af4e 	bls.w	8001252 <KEYPAD_Init+0x3a>
	}
	/*--------[ Configure The KeyPAD ROWs GPIO Pins ]-------*/
	for(i=0; i<ROWS; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80013bc:	e0c3      	b.n	8001546 <KEYPAD_Init+0x32e>
	{
		if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOA)
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80013c4:	4837      	ldr	r0, [pc, #220]	@ (80014a4 <KEYPAD_Init+0x28c>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	3306      	adds	r3, #6
 80013d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80013d6:	4a34      	ldr	r2, [pc, #208]	@ (80014a8 <KEYPAD_Init+0x290>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d10c      	bne.n	80013f6 <KEYPAD_Init+0x1de>
	    {
	        __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <KEYPAD_Init+0x294>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a32      	ldr	r2, [pc, #200]	@ (80014ac <KEYPAD_Init+0x294>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <KEYPAD_Init+0x294>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	e07f      	b.n	80014f6 <KEYPAD_Init+0x2de>
	    }
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOB)
 80013f6:	88fa      	ldrh	r2, [r7, #6]
 80013f8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80013fc:	4829      	ldr	r0, [pc, #164]	@ (80014a4 <KEYPAD_Init+0x28c>)
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3306      	adds	r3, #6
 800140a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800140e:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <KEYPAD_Init+0x298>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d10c      	bne.n	800142e <KEYPAD_Init+0x216>
		{
			__HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <KEYPAD_Init+0x294>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a24      	ldr	r2, [pc, #144]	@ (80014ac <KEYPAD_Init+0x294>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <KEYPAD_Init+0x294>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	e063      	b.n	80014f6 <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOC)
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8001434:	481b      	ldr	r0, [pc, #108]	@ (80014a4 <KEYPAD_Init+0x28c>)
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	3306      	adds	r3, #6
 8001442:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001446:	4a1b      	ldr	r2, [pc, #108]	@ (80014b4 <KEYPAD_Init+0x29c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d10c      	bne.n	8001466 <KEYPAD_Init+0x24e>
		{
			__HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <KEYPAD_Init+0x294>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a16      	ldr	r2, [pc, #88]	@ (80014ac <KEYPAD_Init+0x294>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <KEYPAD_Init+0x294>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	e047      	b.n	80014f6 <KEYPAD_Init+0x2de>
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOD)
 8001466:	88fa      	ldrh	r2, [r7, #6]
 8001468:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800146c:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <KEYPAD_Init+0x28c>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3306      	adds	r3, #6
 800147a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800147e:	4a0e      	ldr	r2, [pc, #56]	@ (80014b8 <KEYPAD_Init+0x2a0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d11d      	bne.n	80014c0 <KEYPAD_Init+0x2a8>
		{
			__HAL_RCC_GPIOD_CLK_ENABLE();
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <KEYPAD_Init+0x294>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <KEYPAD_Init+0x294>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <KEYPAD_Init+0x294>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	e02b      	b.n	80014f6 <KEYPAD_Init+0x2de>
 800149e:	bf00      	nop
 80014a0:	20000080 	.word	0x20000080
 80014a4:	08007040 	.word	0x08007040
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	40011000 	.word	0x40011000
 80014b8:	40011400 	.word	0x40011400
 80014bc:	40011800 	.word	0x40011800
		}
		else if(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i] == GPIOE)
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80014c6:	4825      	ldr	r0, [pc, #148]	@ (800155c <KEYPAD_Init+0x344>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3306      	adds	r3, #6
 80014d4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014d8:	4a21      	ldr	r2, [pc, #132]	@ (8001560 <KEYPAD_Init+0x348>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <KEYPAD_Init+0x2de>
		{
			__HAL_RCC_GPIOE_CLK_ENABLE();
 80014de:	4b21      	ldr	r3, [pc, #132]	@ (8001564 <KEYPAD_Init+0x34c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a20      	ldr	r2, [pc, #128]	@ (8001564 <KEYPAD_Init+0x34c>)
 80014e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <KEYPAD_Init+0x34c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
		}
		GPIO_InitStruct.Pin = KEYPAD_CfgParam[au16_Instance].COL_PIN[i];
 80014f6:	88fa      	ldrh	r2, [r7, #6]
 80014f8:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80014fc:	4817      	ldr	r0, [pc, #92]	@ (800155c <KEYPAD_Init+0x344>)
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	440b      	add	r3, r1
 8001508:	3314      	adds	r3, #20
 800150a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800150e:	637b      	str	r3, [r7, #52]	@ 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	63bb      	str	r3, [r7, #56]	@ 0x38
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001514:	2301      	movs	r3, #1
 8001516:	643b      	str	r3, [r7, #64]	@ 0x40
		HAL_GPIO_Init(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], &GPIO_InitStruct);
 8001518:	88fa      	ldrh	r2, [r7, #6]
 800151a:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800151e:	480f      	ldr	r0, [pc, #60]	@ (800155c <KEYPAD_Init+0x344>)
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3306      	adds	r3, #6
 800152c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001530:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f003 f96c 	bl	8004814 <HAL_GPIO_Init>
	for(i=0; i<ROWS; i++)
 800153c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001540:	3301      	adds	r3, #1
 8001542:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001546:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800154a:	2b03      	cmp	r3, #3
 800154c:	f67f af37 	bls.w	80013be <KEYPAD_Init+0x1a6>
 8001550:	e000      	b.n	8001554 <KEYPAD_Init+0x33c>
		return;
 8001552:	bf00      	nop
	}
}
 8001554:	3748      	adds	r7, #72	@ 0x48
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08007040 	.word	0x08007040
 8001560:	40011800 	.word	0x40011800
 8001564:	40021000 	.word	0x40021000

08001568 <KEYPAD_Scan>:



void KEYPAD_Scan(uint16_t au16_Instance)
{
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
	uint8_t au8_ReadState[ROWS] = {0};
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
	uint8_t au8_ReadSt;
	uint8_t i=0;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]

	/* Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
 800157e:	e01c      	b.n	80015ba <KEYPAD_Scan+0x52>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	7bf9      	ldrb	r1, [r7, #15]
 8001584:	48a7      	ldr	r0, [pc, #668]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	3306      	adds	r3, #6
 8001592:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	7bf9      	ldrb	r1, [r7, #15]
 800159a:	4ca2      	ldr	r4, [pc, #648]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	440b      	add	r3, r1
 80015a6:	3314      	adds	r3, #20
 80015a8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	f003 facb 	bl	8004b4a <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	3301      	adds	r3, #1
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d9df      	bls.n	8001580 <KEYPAD_Scan+0x18>
	}
	/* Steady State: Read The ROW Pins To Know If Any Key Is Pressed At All or Not */
	for(i=0; i<ROWS; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e022      	b.n	800160c <KEYPAD_Scan+0xa4>
	{
		au8_ReadState[i] = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[i], KEYPAD_CfgParam[au16_Instance].ROW_PIN[i]);
 80015c6:	88fa      	ldrh	r2, [r7, #6]
 80015c8:	7bf9      	ldrb	r1, [r7, #15]
 80015ca:	4896      	ldr	r0, [pc, #600]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80015da:	88fa      	ldrh	r2, [r7, #6]
 80015dc:	7bf9      	ldrb	r1, [r7, #15]
 80015de:	4c91      	ldr	r4, [pc, #580]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	3308      	adds	r3, #8
 80015ec:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 80015f0:	7bfc      	ldrb	r4, [r7, #15]
 80015f2:	4619      	mov	r1, r3
 80015f4:	f003 fa92 	bl	8004b1c <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	f104 0310 	add.w	r3, r4, #16
 8001600:	443b      	add	r3, r7
 8001602:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(i=0; i<ROWS; i++)
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	3301      	adds	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d9d9      	bls.n	80015c6 <KEYPAD_Scan+0x5e>
	}
	/* If Any member in array au8_ReadState is 1, we know that a key is pressed */
	/* And we'll keep changing the COL pins output pattern until we find the pressed key or keys */
	/* Else: We'll end the scan procedure at this point */
	if(au8_ReadState[0] | au8_ReadState[1] | au8_ReadState[2] | au8_ReadState[3])
 8001612:	7a3a      	ldrb	r2, [r7, #8]
 8001614:	7a7b      	ldrb	r3, [r7, #9]
 8001616:	4313      	orrs	r3, r2
 8001618:	b2da      	uxtb	r2, r3
 800161a:	7abb      	ldrb	r3, [r7, #10]
 800161c:	4313      	orrs	r3, r2
 800161e:	b2da      	uxtb	r2, r3
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	4313      	orrs	r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f001 808d 	beq.w	8002746 <KEYPAD_Scan+0x11de>
	{
		/*--[ First Row Check ]--*/
		if(au8_ReadState[0])
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8200 	beq.w	8001a34 <KEYPAD_Scan+0x4cc>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001634:	88fa      	ldrh	r2, [r7, #6]
 8001636:	497b      	ldr	r1, [pc, #492]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	440b      	add	r3, r1
 8001642:	3318      	adds	r3, #24
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	88fa      	ldrh	r2, [r7, #6]
 8001648:	4976      	ldr	r1, [pc, #472]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	440b      	add	r3, r1
 8001654:	3328      	adds	r3, #40	@ 0x28
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4619      	mov	r1, r3
 800165c:	f003 fa75 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	4970      	ldr	r1, [pc, #448]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	440b      	add	r3, r1
 800166e:	331c      	adds	r3, #28
 8001670:	6818      	ldr	r0, [r3, #0]
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	496b      	ldr	r1, [pc, #428]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	440b      	add	r3, r1
 8001680:	332a      	adds	r3, #42	@ 0x2a
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	f003 fa5f 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 800168c:	88fa      	ldrh	r2, [r7, #6]
 800168e:	4965      	ldr	r1, [pc, #404]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	440b      	add	r3, r1
 800169a:	3320      	adds	r3, #32
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	4960      	ldr	r1, [pc, #384]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	440b      	add	r3, r1
 80016ac:	332c      	adds	r3, #44	@ 0x2c
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	f003 fa49 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80016b8:	88fa      	ldrh	r2, [r7, #6]
 80016ba:	495a      	ldr	r1, [pc, #360]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	440b      	add	r3, r1
 80016c6:	3324      	adds	r3, #36	@ 0x24
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	88fa      	ldrh	r2, [r7, #6]
 80016cc:	4955      	ldr	r1, [pc, #340]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	440b      	add	r3, r1
 80016d8:	332e      	adds	r3, #46	@ 0x2e
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	f003 fa33 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW0-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80016e4:	88fa      	ldrh	r2, [r7, #6]
 80016e6:	494f      	ldr	r1, [pc, #316]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	440b      	add	r3, r1
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	494b      	ldr	r1, [pc, #300]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	011b      	lsls	r3, r3, #4
 8001700:	440b      	add	r3, r1
 8001702:	3310      	adds	r3, #16
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	f003 fa08 	bl	8004b1c <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001710:	7bbb      	ldrb	r3, [r7, #14]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d006      	beq.n	8001724 <KEYPAD_Scan+0x1bc>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 1;
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4a43      	ldr	r2, [pc, #268]	@ (8001828 <KEYPAD_Scan+0x2c0>)
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e005      	b.n	8001730 <KEYPAD_Scan+0x1c8>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4a40      	ldr	r2, [pc, #256]	@ (8001828 <KEYPAD_Scan+0x2c0>)
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	493c      	ldr	r1, [pc, #240]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	440b      	add	r3, r1
 800173e:	3318      	adds	r3, #24
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	88fa      	ldrh	r2, [r7, #6]
 8001744:	4937      	ldr	r1, [pc, #220]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001746:	4613      	mov	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	4413      	add	r3, r2
 800174c:	011b      	lsls	r3, r3, #4
 800174e:	440b      	add	r3, r1
 8001750:	3328      	adds	r3, #40	@ 0x28
 8001752:	881b      	ldrh	r3, [r3, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	f003 f9f7 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 800175c:	88fa      	ldrh	r2, [r7, #6]
 800175e:	4931      	ldr	r1, [pc, #196]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	440b      	add	r3, r1
 800176a:	331c      	adds	r3, #28
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	492c      	ldr	r1, [pc, #176]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	440b      	add	r3, r1
 800177c:	332a      	adds	r3, #42	@ 0x2a
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	f003 f9e1 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	4926      	ldr	r1, [pc, #152]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	440b      	add	r3, r1
 8001796:	3320      	adds	r3, #32
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	4921      	ldr	r1, [pc, #132]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 800179e:	4613      	mov	r3, r2
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	440b      	add	r3, r1
 80017a8:	332c      	adds	r3, #44	@ 0x2c
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	f003 f9cb 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80017b4:	88fa      	ldrh	r2, [r7, #6]
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	3324      	adds	r3, #36	@ 0x24
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	88fa      	ldrh	r2, [r7, #6]
 80017c8:	4916      	ldr	r1, [pc, #88]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	440b      	add	r3, r1
 80017d4:	332e      	adds	r3, #46	@ 0x2e
 80017d6:	881b      	ldrh	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	4619      	mov	r1, r3
 80017dc:	f003 f9b5 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW0-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80017e0:	88fa      	ldrh	r2, [r7, #6]
 80017e2:	4910      	ldr	r1, [pc, #64]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	440b      	add	r3, r1
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	88fa      	ldrh	r2, [r7, #6]
 80017f2:	490c      	ldr	r1, [pc, #48]	@ (8001824 <KEYPAD_Scan+0x2bc>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	440b      	add	r3, r1
 80017fe:	3310      	adds	r3, #16
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	f003 f98a 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001808:	4603      	mov	r3, r0
 800180a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <KEYPAD_Scan+0x2c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 1;
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <KEYPAD_Scan+0x2c0>)
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	3301      	adds	r3, #1
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
 8001820:	e00b      	b.n	800183a <KEYPAD_Scan+0x2d2>
 8001822:	bf00      	nop
 8001824:	08007040 	.word	0x08007040
 8001828:	20000080 	.word	0x20000080
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	4a7f      	ldr	r2, [pc, #508]	@ (8001a2c <KEYPAD_Scan+0x4c4>)
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	3301      	adds	r3, #1
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800183a:	88fa      	ldrh	r2, [r7, #6]
 800183c:	497c      	ldr	r1, [pc, #496]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	440b      	add	r3, r1
 8001848:	3318      	adds	r3, #24
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	88fa      	ldrh	r2, [r7, #6]
 800184e:	4978      	ldr	r1, [pc, #480]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	440b      	add	r3, r1
 800185a:	3328      	adds	r3, #40	@ 0x28
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	4619      	mov	r1, r3
 8001862:	f003 f972 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001866:	88fa      	ldrh	r2, [r7, #6]
 8001868:	4971      	ldr	r1, [pc, #452]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	440b      	add	r3, r1
 8001874:	331c      	adds	r3, #28
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	88fa      	ldrh	r2, [r7, #6]
 800187a:	496d      	ldr	r1, [pc, #436]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	440b      	add	r3, r1
 8001886:	332a      	adds	r3, #42	@ 0x2a
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	f003 f95c 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001892:	88fa      	ldrh	r2, [r7, #6]
 8001894:	4966      	ldr	r1, [pc, #408]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	440b      	add	r3, r1
 80018a0:	3320      	adds	r3, #32
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	4962      	ldr	r1, [pc, #392]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	440b      	add	r3, r1
 80018b2:	332c      	adds	r3, #44	@ 0x2c
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	f003 f946 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 80018be:	88fa      	ldrh	r2, [r7, #6]
 80018c0:	495b      	ldr	r1, [pc, #364]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	440b      	add	r3, r1
 80018cc:	3324      	adds	r3, #36	@ 0x24
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	4957      	ldr	r1, [pc, #348]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	440b      	add	r3, r1
 80018de:	332e      	adds	r3, #46	@ 0x2e
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	2200      	movs	r2, #0
 80018e4:	4619      	mov	r1, r3
 80018e6:	f003 f930 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW0-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80018ea:	88fa      	ldrh	r2, [r7, #6]
 80018ec:	4950      	ldr	r1, [pc, #320]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	440b      	add	r3, r1
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	88fa      	ldrh	r2, [r7, #6]
 80018fc:	494c      	ldr	r1, [pc, #304]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	440b      	add	r3, r1
 8001908:	3310      	adds	r3, #16
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f003 f905 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <KEYPAD_Scan+0x3c4>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 1;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	4a43      	ldr	r2, [pc, #268]	@ (8001a2c <KEYPAD_Scan+0x4c4>)
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	3302      	adds	r3, #2
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e006      	b.n	800193a <KEYPAD_Scan+0x3d2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a2c <KEYPAD_Scan+0x4c4>)
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	3302      	adds	r3, #2
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800193a:	88fa      	ldrh	r2, [r7, #6]
 800193c:	493c      	ldr	r1, [pc, #240]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	440b      	add	r3, r1
 8001948:	3318      	adds	r3, #24
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	88fa      	ldrh	r2, [r7, #6]
 800194e:	4938      	ldr	r1, [pc, #224]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	440b      	add	r3, r1
 800195a:	3328      	adds	r3, #40	@ 0x28
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	f003 f8f2 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001966:	88fa      	ldrh	r2, [r7, #6]
 8001968:	4931      	ldr	r1, [pc, #196]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	440b      	add	r3, r1
 8001974:	331c      	adds	r3, #28
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	88fa      	ldrh	r2, [r7, #6]
 800197a:	492d      	ldr	r1, [pc, #180]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	440b      	add	r3, r1
 8001986:	332a      	adds	r3, #42	@ 0x2a
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	4619      	mov	r1, r3
 800198e:	f003 f8dc 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	4926      	ldr	r1, [pc, #152]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	440b      	add	r3, r1
 80019a0:	3320      	adds	r3, #32
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	4922      	ldr	r1, [pc, #136]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80019a8:	4613      	mov	r3, r2
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	440b      	add	r3, r1
 80019b2:	332c      	adds	r3, #44	@ 0x2c
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	f003 f8c6 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 80019be:	88fa      	ldrh	r2, [r7, #6]
 80019c0:	491b      	ldr	r1, [pc, #108]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	440b      	add	r3, r1
 80019cc:	3324      	adds	r3, #36	@ 0x24
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	88fa      	ldrh	r2, [r7, #6]
 80019d2:	4917      	ldr	r1, [pc, #92]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	440b      	add	r3, r1
 80019de:	332e      	adds	r3, #46	@ 0x2e
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	f003 f8b0 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW0-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[0], KEYPAD_CfgParam[au16_Instance].ROW_PIN[0]);
 80019ea:	88fa      	ldrh	r2, [r7, #6]
 80019ec:	4910      	ldr	r1, [pc, #64]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	440b      	add	r3, r1
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	88fa      	ldrh	r2, [r7, #6]
 80019fc:	490c      	ldr	r1, [pc, #48]	@ (8001a30 <KEYPAD_Scan+0x4c8>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	440b      	add	r3, r1
 8001a08:	3310      	adds	r3, #16
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f003 f885 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001a16:	7bbb      	ldrb	r3, [r7, #14]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d026      	beq.n	8001a6a <KEYPAD_Scan+0x502>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[3] = 1;
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <KEYPAD_Scan+0x4c4>)
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	3303      	adds	r3, #3
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e01e      	b.n	8001a6a <KEYPAD_Scan+0x502>
 8001a2c:	20000080 	.word	0x20000080
 8001a30:	08007040 	.word	0x08007040
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[0] = 0;
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4a8c      	ldr	r2, [pc, #560]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[1] = 0;
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4a89      	ldr	r2, [pc, #548]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[2] = 0;
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4a85      	ldr	r2, [pc, #532]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a56:	3302      	adds	r3, #2
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[3] = 0;
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4a82      	ldr	r2, [pc, #520]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	3303      	adds	r3, #3
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 1st ROW Check ]--------------------*/
		/*--[ Second Row Check ]--*/
		if(au8_ReadState[1])
 8001a6a:	7a7b      	ldrb	r3, [r7, #9]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8205 	beq.w	8001e7c <KEYPAD_Scan+0x914>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	497d      	ldr	r1, [pc, #500]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	440b      	add	r3, r1
 8001a80:	3318      	adds	r3, #24
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	4979      	ldr	r1, [pc, #484]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	440b      	add	r3, r1
 8001a92:	3328      	adds	r3, #40	@ 0x28
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f003 f856 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	4972      	ldr	r1, [pc, #456]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	011b      	lsls	r3, r3, #4
 8001aaa:	440b      	add	r3, r1
 8001aac:	331c      	adds	r3, #28
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	496e      	ldr	r1, [pc, #440]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	440b      	add	r3, r1
 8001abe:	332a      	adds	r3, #42	@ 0x2a
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f003 f840 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001aca:	88fa      	ldrh	r2, [r7, #6]
 8001acc:	4967      	ldr	r1, [pc, #412]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3320      	adds	r3, #32
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	4963      	ldr	r1, [pc, #396]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	440b      	add	r3, r1
 8001aea:	332c      	adds	r3, #44	@ 0x2c
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	f003 f82a 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001af6:	88fa      	ldrh	r2, [r7, #6]
 8001af8:	495c      	ldr	r1, [pc, #368]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	440b      	add	r3, r1
 8001b04:	3324      	adds	r3, #36	@ 0x24
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	88fa      	ldrh	r2, [r7, #6]
 8001b0a:	4958      	ldr	r1, [pc, #352]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	440b      	add	r3, r1
 8001b16:	332e      	adds	r3, #46	@ 0x2e
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f003 f814 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW1-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001b22:	88fa      	ldrh	r2, [r7, #6]
 8001b24:	4951      	ldr	r1, [pc, #324]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	440b      	add	r3, r1
 8001b30:	3304      	adds	r3, #4
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	494d      	ldr	r1, [pc, #308]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	440b      	add	r3, r1
 8001b42:	3312      	adds	r3, #18
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	4619      	mov	r1, r3
 8001b48:	f002 ffe8 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d007      	beq.n	8001b66 <KEYPAD_Scan+0x5fe>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 1;
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4a43      	ldr	r2, [pc, #268]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e006      	b.n	8001b74 <KEYPAD_Scan+0x60c>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4a3f      	ldr	r2, [pc, #252]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	493d      	ldr	r1, [pc, #244]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	3318      	adds	r3, #24
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	88fa      	ldrh	r2, [r7, #6]
 8001b88:	4938      	ldr	r1, [pc, #224]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	440b      	add	r3, r1
 8001b94:	3328      	adds	r3, #40	@ 0x28
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f002 ffd5 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001ba0:	88fa      	ldrh	r2, [r7, #6]
 8001ba2:	4932      	ldr	r1, [pc, #200]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	440b      	add	r3, r1
 8001bae:	331c      	adds	r3, #28
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	492d      	ldr	r1, [pc, #180]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	440b      	add	r3, r1
 8001bc0:	332a      	adds	r3, #42	@ 0x2a
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f002 ffbf 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001bcc:	88fa      	ldrh	r2, [r7, #6]
 8001bce:	4927      	ldr	r1, [pc, #156]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	440b      	add	r3, r1
 8001bda:	3320      	adds	r3, #32
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	4922      	ldr	r1, [pc, #136]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	440b      	add	r3, r1
 8001bec:	332c      	adds	r3, #44	@ 0x2c
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f002 ffa9 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001bf8:	88fa      	ldrh	r2, [r7, #6]
 8001bfa:	491c      	ldr	r1, [pc, #112]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	440b      	add	r3, r1
 8001c06:	3324      	adds	r3, #36	@ 0x24
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	88fa      	ldrh	r2, [r7, #6]
 8001c0c:	4917      	ldr	r1, [pc, #92]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	440b      	add	r3, r1
 8001c18:	332e      	adds	r3, #46	@ 0x2e
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f002 ff93 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW1-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001c24:	88fa      	ldrh	r2, [r7, #6]
 8001c26:	4911      	ldr	r1, [pc, #68]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	440b      	add	r3, r1
 8001c32:	3304      	adds	r3, #4
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	88fa      	ldrh	r2, [r7, #6]
 8001c38:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <KEYPAD_Scan+0x704>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	440b      	add	r3, r1
 8001c44:	3312      	adds	r3, #18
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f002 ff67 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <KEYPAD_Scan+0x708>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 1;
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4a03      	ldr	r2, [pc, #12]	@ (8001c68 <KEYPAD_Scan+0x700>)
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	3305      	adds	r3, #5
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	e00a      	b.n	8001c7e <KEYPAD_Scan+0x716>
 8001c68:	20000080 	.word	0x20000080
 8001c6c:	08007040 	.word	0x08007040
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	4a80      	ldr	r2, [pc, #512]	@ (8001e74 <KEYPAD_Scan+0x90c>)
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001c7e:	88fa      	ldrh	r2, [r7, #6]
 8001c80:	497d      	ldr	r1, [pc, #500]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	440b      	add	r3, r1
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	4979      	ldr	r1, [pc, #484]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3328      	adds	r3, #40	@ 0x28
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f002 ff50 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001caa:	88fa      	ldrh	r2, [r7, #6]
 8001cac:	4972      	ldr	r1, [pc, #456]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	440b      	add	r3, r1
 8001cb8:	331c      	adds	r3, #28
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	496e      	ldr	r1, [pc, #440]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	440b      	add	r3, r1
 8001cca:	332a      	adds	r3, #42	@ 0x2a
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f002 ff3a 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	4967      	ldr	r1, [pc, #412]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3320      	adds	r3, #32
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	88fa      	ldrh	r2, [r7, #6]
 8001cea:	4963      	ldr	r1, [pc, #396]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	440b      	add	r3, r1
 8001cf6:	332c      	adds	r3, #44	@ 0x2c
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f002 ff24 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	495c      	ldr	r1, [pc, #368]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001d06:	4613      	mov	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4413      	add	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	440b      	add	r3, r1
 8001d10:	3324      	adds	r3, #36	@ 0x24
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	4958      	ldr	r1, [pc, #352]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	440b      	add	r3, r1
 8001d22:	332e      	adds	r3, #46	@ 0x2e
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f002 ff0e 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW1-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	4951      	ldr	r1, [pc, #324]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	494d      	ldr	r1, [pc, #308]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3312      	adds	r3, #18
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	4619      	mov	r1, r3
 8001d54:	f002 fee2 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <KEYPAD_Scan+0x80a>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 1;
 8001d62:	88fb      	ldrh	r3, [r7, #6]
 8001d64:	4a43      	ldr	r2, [pc, #268]	@ (8001e74 <KEYPAD_Scan+0x90c>)
 8001d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6a:	3306      	adds	r3, #6
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
 8001d70:	e006      	b.n	8001d80 <KEYPAD_Scan+0x818>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4a3f      	ldr	r2, [pc, #252]	@ (8001e74 <KEYPAD_Scan+0x90c>)
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	3306      	adds	r3, #6
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001d80:	88fa      	ldrh	r2, [r7, #6]
 8001d82:	493d      	ldr	r1, [pc, #244]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3318      	adds	r3, #24
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	88fa      	ldrh	r2, [r7, #6]
 8001d94:	4938      	ldr	r1, [pc, #224]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	3328      	adds	r3, #40	@ 0x28
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	f002 fecf 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001dac:	88fa      	ldrh	r2, [r7, #6]
 8001dae:	4932      	ldr	r1, [pc, #200]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	440b      	add	r3, r1
 8001dba:	331c      	adds	r3, #28
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	88fa      	ldrh	r2, [r7, #6]
 8001dc0:	492d      	ldr	r1, [pc, #180]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	440b      	add	r3, r1
 8001dcc:	332a      	adds	r3, #42	@ 0x2a
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f002 feb9 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	4927      	ldr	r1, [pc, #156]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	440b      	add	r3, r1
 8001de6:	3320      	adds	r3, #32
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	88fa      	ldrh	r2, [r7, #6]
 8001dec:	4922      	ldr	r1, [pc, #136]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	440b      	add	r3, r1
 8001df8:	332c      	adds	r3, #44	@ 0x2c
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f002 fea3 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8001e04:	88fa      	ldrh	r2, [r7, #6]
 8001e06:	491c      	ldr	r1, [pc, #112]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	440b      	add	r3, r1
 8001e12:	3324      	adds	r3, #36	@ 0x24
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	4917      	ldr	r1, [pc, #92]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	011b      	lsls	r3, r3, #4
 8001e22:	440b      	add	r3, r1
 8001e24:	332e      	adds	r3, #46	@ 0x2e
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f002 fe8d 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW1-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[1], KEYPAD_CfgParam[au16_Instance].ROW_PIN[1]);
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	4911      	ldr	r1, [pc, #68]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	440b      	add	r3, r1
 8001e3e:	3304      	adds	r3, #4
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	490c      	ldr	r1, [pc, #48]	@ (8001e78 <KEYPAD_Scan+0x910>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	440b      	add	r3, r1
 8001e50:	3312      	adds	r3, #18
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f002 fe61 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001e5e:	7bbb      	ldrb	r3, [r7, #14]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d027      	beq.n	8001eb4 <KEYPAD_Scan+0x94c>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[7] = 1;
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	4a03      	ldr	r2, [pc, #12]	@ (8001e74 <KEYPAD_Scan+0x90c>)
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	3307      	adds	r3, #7
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e01f      	b.n	8001eb4 <KEYPAD_Scan+0x94c>
 8001e74:	20000080 	.word	0x20000080
 8001e78:	08007040 	.word	0x08007040
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[4] = 0;
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4a8d      	ldr	r2, [pc, #564]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[5] = 0;
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	4a89      	ldr	r2, [pc, #548]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	3305      	adds	r3, #5
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[6] = 0;
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	4a86      	ldr	r2, [pc, #536]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[7] = 0;
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	4a82      	ldr	r2, [pc, #520]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	3307      	adds	r3, #7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 2nd ROW Check ]--------------------*/
		/*--[ Third Row Check ]--*/
		if(au8_ReadState[2])
 8001eb4:	7abb      	ldrb	r3, [r7, #10]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 8206 	beq.w	80022c8 <KEYPAD_Scan+0xd60>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	497e      	ldr	r1, [pc, #504]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	440b      	add	r3, r1
 8001eca:	3318      	adds	r3, #24
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	88fa      	ldrh	r2, [r7, #6]
 8001ed0:	4979      	ldr	r1, [pc, #484]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	440b      	add	r3, r1
 8001edc:	3328      	adds	r3, #40	@ 0x28
 8001ede:	881b      	ldrh	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f002 fe31 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	4973      	ldr	r1, [pc, #460]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	440b      	add	r3, r1
 8001ef6:	331c      	adds	r3, #28
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	88fa      	ldrh	r2, [r7, #6]
 8001efc:	496e      	ldr	r1, [pc, #440]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001efe:	4613      	mov	r3, r2
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4413      	add	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	440b      	add	r3, r1
 8001f08:	332a      	adds	r3, #42	@ 0x2a
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f002 fe1b 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	4968      	ldr	r1, [pc, #416]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	440b      	add	r3, r1
 8001f22:	3320      	adds	r3, #32
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	88fa      	ldrh	r2, [r7, #6]
 8001f28:	4963      	ldr	r1, [pc, #396]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	440b      	add	r3, r1
 8001f34:	332c      	adds	r3, #44	@ 0x2c
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f002 fe05 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	495d      	ldr	r1, [pc, #372]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3324      	adds	r3, #36	@ 0x24
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	4958      	ldr	r1, [pc, #352]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	440b      	add	r3, r1
 8001f60:	332e      	adds	r3, #46	@ 0x2e
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	4619      	mov	r1, r3
 8001f68:	f002 fdef 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW2-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 8001f6c:	88fa      	ldrh	r2, [r7, #6]
 8001f6e:	4952      	ldr	r1, [pc, #328]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	88fa      	ldrh	r2, [r7, #6]
 8001f80:	494d      	ldr	r1, [pc, #308]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f002 fdc3 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <KEYPAD_Scan+0xa48>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 1;
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	4a44      	ldr	r2, [pc, #272]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	3308      	adds	r3, #8
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
 8001fae:	e006      	b.n	8001fbe <KEYPAD_Scan+0xa56>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	493d      	ldr	r1, [pc, #244]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	440b      	add	r3, r1
 8001fcc:	3318      	adds	r3, #24
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	4939      	ldr	r1, [pc, #228]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	440b      	add	r3, r1
 8001fde:	3328      	adds	r3, #40	@ 0x28
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f002 fdb0 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8001fea:	88fa      	ldrh	r2, [r7, #6]
 8001fec:	4932      	ldr	r1, [pc, #200]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	440b      	add	r3, r1
 8001ff8:	331c      	adds	r3, #28
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	492e      	ldr	r1, [pc, #184]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	440b      	add	r3, r1
 800200a:	332a      	adds	r3, #42	@ 0x2a
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	4619      	mov	r1, r3
 8002012:	f002 fd9a 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	4927      	ldr	r1, [pc, #156]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	440b      	add	r3, r1
 8002024:	3320      	adds	r3, #32
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	88fa      	ldrh	r2, [r7, #6]
 800202a:	4923      	ldr	r1, [pc, #140]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	332c      	adds	r3, #44	@ 0x2c
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	f002 fd84 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	491c      	ldr	r1, [pc, #112]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	440b      	add	r3, r1
 8002050:	3324      	adds	r3, #36	@ 0x24
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	4918      	ldr	r1, [pc, #96]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	440b      	add	r3, r1
 8002062:	332e      	adds	r3, #46	@ 0x2e
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	2200      	movs	r2, #0
 8002068:	4619      	mov	r1, r3
 800206a:	f002 fd6e 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW2-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	4911      	ldr	r1, [pc, #68]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	440b      	add	r3, r1
 800207c:	3308      	adds	r3, #8
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	88fa      	ldrh	r2, [r7, #6]
 8002082:	490d      	ldr	r1, [pc, #52]	@ (80020b8 <KEYPAD_Scan+0xb50>)
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	011b      	lsls	r3, r3, #4
 800208c:	440b      	add	r3, r1
 800208e:	3314      	adds	r3, #20
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	4619      	mov	r1, r3
 8002094:	f002 fd42 	bl	8004b1c <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
 800209a:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00c      	beq.n	80020bc <KEYPAD_Scan+0xb54>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 1;
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	4a03      	ldr	r2, [pc, #12]	@ (80020b4 <KEYPAD_Scan+0xb4c>)
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	3309      	adds	r3, #9
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e00b      	b.n	80020ca <KEYPAD_Scan+0xb62>
 80020b2:	bf00      	nop
 80020b4:	20000080 	.word	0x20000080
 80020b8:	08007040 	.word	0x08007040
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	4a80      	ldr	r2, [pc, #512]	@ (80022c0 <KEYPAD_Scan+0xd58>)
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	3309      	adds	r3, #9
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80020ca:	88fa      	ldrh	r2, [r7, #6]
 80020cc:	497d      	ldr	r1, [pc, #500]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	440b      	add	r3, r1
 80020d8:	3318      	adds	r3, #24
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	4979      	ldr	r1, [pc, #484]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	440b      	add	r3, r1
 80020ea:	3328      	adds	r3, #40	@ 0x28
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	4619      	mov	r1, r3
 80020f2:	f002 fd2a 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	4972      	ldr	r1, [pc, #456]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	440b      	add	r3, r1
 8002104:	331c      	adds	r3, #28
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	496e      	ldr	r1, [pc, #440]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	440b      	add	r3, r1
 8002116:	332a      	adds	r3, #42	@ 0x2a
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	4619      	mov	r1, r3
 800211e:	f002 fd14 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 8002122:	88fa      	ldrh	r2, [r7, #6]
 8002124:	4967      	ldr	r1, [pc, #412]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	440b      	add	r3, r1
 8002130:	3320      	adds	r3, #32
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	4963      	ldr	r1, [pc, #396]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002138:	4613      	mov	r3, r2
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	440b      	add	r3, r1
 8002142:	332c      	adds	r3, #44	@ 0x2c
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	4619      	mov	r1, r3
 800214a:	f002 fcfe 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	495c      	ldr	r1, [pc, #368]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	440b      	add	r3, r1
 800215c:	3324      	adds	r3, #36	@ 0x24
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	4958      	ldr	r1, [pc, #352]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	332e      	adds	r3, #46	@ 0x2e
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	f002 fce8 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW2-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	4951      	ldr	r1, [pc, #324]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	440b      	add	r3, r1
 8002188:	3308      	adds	r3, #8
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	88fa      	ldrh	r2, [r7, #6]
 800218e:	494d      	ldr	r1, [pc, #308]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002190:	4613      	mov	r3, r2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4413      	add	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	440b      	add	r3, r1
 800219a:	3314      	adds	r3, #20
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	f002 fcbc 	bl	8004b1c <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <KEYPAD_Scan+0xc56>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 1;
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <KEYPAD_Scan+0xd58>)
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	330a      	adds	r3, #10
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e006      	b.n	80021cc <KEYPAD_Scan+0xc64>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	4a3f      	ldr	r2, [pc, #252]	@ (80022c0 <KEYPAD_Scan+0xd58>)
 80021c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c6:	330a      	adds	r3, #10
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 80021cc:	88fa      	ldrh	r2, [r7, #6]
 80021ce:	493d      	ldr	r1, [pc, #244]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	440b      	add	r3, r1
 80021da:	3318      	adds	r3, #24
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	4938      	ldr	r1, [pc, #224]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	4413      	add	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	440b      	add	r3, r1
 80021ec:	3328      	adds	r3, #40	@ 0x28
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	2200      	movs	r2, #0
 80021f2:	4619      	mov	r1, r3
 80021f4:	f002 fca9 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 80021f8:	88fa      	ldrh	r2, [r7, #6]
 80021fa:	4932      	ldr	r1, [pc, #200]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	4413      	add	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	440b      	add	r3, r1
 8002206:	331c      	adds	r3, #28
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	492d      	ldr	r1, [pc, #180]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	332a      	adds	r3, #42	@ 0x2a
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	f002 fc93 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002224:	88fa      	ldrh	r2, [r7, #6]
 8002226:	4927      	ldr	r1, [pc, #156]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	440b      	add	r3, r1
 8002232:	3320      	adds	r3, #32
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	88fa      	ldrh	r2, [r7, #6]
 8002238:	4922      	ldr	r1, [pc, #136]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 800223a:	4613      	mov	r3, r2
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	4413      	add	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	440b      	add	r3, r1
 8002244:	332c      	adds	r3, #44	@ 0x2c
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	f002 fc7d 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	491c      	ldr	r1, [pc, #112]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	440b      	add	r3, r1
 800225e:	3324      	adds	r3, #36	@ 0x24
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	4917      	ldr	r1, [pc, #92]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002266:	4613      	mov	r3, r2
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	4413      	add	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	440b      	add	r3, r1
 8002270:	332e      	adds	r3, #46	@ 0x2e
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	2201      	movs	r2, #1
 8002276:	4619      	mov	r1, r3
 8002278:	f002 fc67 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW2-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[2], KEYPAD_CfgParam[au16_Instance].ROW_PIN[2]);
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	4911      	ldr	r1, [pc, #68]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	440b      	add	r3, r1
 800228a:	3308      	adds	r3, #8
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	490c      	ldr	r1, [pc, #48]	@ (80022c4 <KEYPAD_Scan+0xd5c>)
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	440b      	add	r3, r1
 800229c:	3314      	adds	r3, #20
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f002 fc3b 	bl	8004b1c <HAL_GPIO_ReadPin>
 80022a6:	4603      	mov	r3, r0
 80022a8:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d027      	beq.n	8002300 <KEYPAD_Scan+0xd98>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[11] = 1;
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	4a03      	ldr	r2, [pc, #12]	@ (80022c0 <KEYPAD_Scan+0xd58>)
 80022b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b8:	330b      	adds	r3, #11
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e01f      	b.n	8002300 <KEYPAD_Scan+0xd98>
 80022c0:	20000080 	.word	0x20000080
 80022c4:	08007040 	.word	0x08007040
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[8] = 0;
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	4a8d      	ldr	r2, [pc, #564]	@ (8002500 <KEYPAD_Scan+0xf98>)
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	3308      	adds	r3, #8
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[9] = 0;
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	4a89      	ldr	r2, [pc, #548]	@ (8002500 <KEYPAD_Scan+0xf98>)
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	3309      	adds	r3, #9
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[10] = 0;
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4a86      	ldr	r2, [pc, #536]	@ (8002500 <KEYPAD_Scan+0xf98>)
 80022e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ec:	330a      	adds	r3, #10
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[11] = 0;
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	4a82      	ldr	r2, [pc, #520]	@ (8002500 <KEYPAD_Scan+0xf98>)
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	330b      	adds	r3, #11
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
		}
		/*---------------------[END OF 3rd ROW Check ]--------------------*/
		/*--[ Fourth Row Check ]--*/
		if(au8_ReadState[3])
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 8202 	beq.w	800270c <KEYPAD_Scan+0x11a4>
		{
			/* Output To The COL Pins This Pattern: [1 0 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 1);
 8002308:	88fa      	ldrh	r2, [r7, #6]
 800230a:	497e      	ldr	r1, [pc, #504]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	440b      	add	r3, r1
 8002316:	3318      	adds	r3, #24
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	4979      	ldr	r1, [pc, #484]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	440b      	add	r3, r1
 8002328:	3328      	adds	r3, #40	@ 0x28
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	2201      	movs	r2, #1
 800232e:	4619      	mov	r1, r3
 8002330:	f002 fc0b 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	4973      	ldr	r1, [pc, #460]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	440b      	add	r3, r1
 8002342:	331c      	adds	r3, #28
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	88fa      	ldrh	r2, [r7, #6]
 8002348:	496e      	ldr	r1, [pc, #440]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	440b      	add	r3, r1
 8002354:	332a      	adds	r3, #42	@ 0x2a
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	2200      	movs	r2, #0
 800235a:	4619      	mov	r1, r3
 800235c:	f002 fbf5 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	4968      	ldr	r1, [pc, #416]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002364:	4613      	mov	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	4413      	add	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	440b      	add	r3, r1
 800236e:	3320      	adds	r3, #32
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	4963      	ldr	r1, [pc, #396]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	440b      	add	r3, r1
 8002380:	332c      	adds	r3, #44	@ 0x2c
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	2200      	movs	r2, #0
 8002386:	4619      	mov	r1, r3
 8002388:	f002 fbdf 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800238c:	88fa      	ldrh	r2, [r7, #6]
 800238e:	495d      	ldr	r1, [pc, #372]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	440b      	add	r3, r1
 800239a:	3324      	adds	r3, #36	@ 0x24
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	88fa      	ldrh	r2, [r7, #6]
 80023a0:	4958      	ldr	r1, [pc, #352]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4413      	add	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	440b      	add	r3, r1
 80023ac:	332e      	adds	r3, #46	@ 0x2e
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	2200      	movs	r2, #0
 80023b2:	4619      	mov	r1, r3
 80023b4:	f002 fbc9 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW3-COL0 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80023b8:	88fa      	ldrh	r2, [r7, #6]
 80023ba:	4952      	ldr	r1, [pc, #328]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	440b      	add	r3, r1
 80023c6:	330c      	adds	r3, #12
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	494d      	ldr	r1, [pc, #308]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 80023ce:	4613      	mov	r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	4413      	add	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	440b      	add	r3, r1
 80023d8:	3316      	adds	r3, #22
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f002 fb9d 	bl	8004b1c <HAL_GPIO_ReadPin>
 80023e2:	4603      	mov	r3, r0
 80023e4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80023e6:	7bbb      	ldrb	r3, [r7, #14]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <KEYPAD_Scan+0xe94>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 1;
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	4a44      	ldr	r2, [pc, #272]	@ (8002500 <KEYPAD_Scan+0xf98>)
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	330c      	adds	r3, #12
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e006      	b.n	800240a <KEYPAD_Scan+0xea2>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 80023fc:	88fb      	ldrh	r3, [r7, #6]
 80023fe:	4a40      	ldr	r2, [pc, #256]	@ (8002500 <KEYPAD_Scan+0xf98>)
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	330c      	adds	r3, #12
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 1 0 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	493d      	ldr	r1, [pc, #244]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	440b      	add	r3, r1
 8002418:	3318      	adds	r3, #24
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	88fa      	ldrh	r2, [r7, #6]
 800241e:	4939      	ldr	r1, [pc, #228]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	440b      	add	r3, r1
 800242a:	3328      	adds	r3, #40	@ 0x28
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	f002 fb8a 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 1);
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	4932      	ldr	r1, [pc, #200]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	440b      	add	r3, r1
 8002444:	331c      	adds	r3, #28
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	492e      	ldr	r1, [pc, #184]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	440b      	add	r3, r1
 8002456:	332a      	adds	r3, #42	@ 0x2a
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	2201      	movs	r2, #1
 800245c:	4619      	mov	r1, r3
 800245e:	f002 fb74 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	4927      	ldr	r1, [pc, #156]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	440b      	add	r3, r1
 8002470:	3320      	adds	r3, #32
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	88fa      	ldrh	r2, [r7, #6]
 8002476:	4923      	ldr	r1, [pc, #140]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	440b      	add	r3, r1
 8002482:	332c      	adds	r3, #44	@ 0x2c
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	2200      	movs	r2, #0
 8002488:	4619      	mov	r1, r3
 800248a:	f002 fb5e 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800248e:	88fa      	ldrh	r2, [r7, #6]
 8002490:	491c      	ldr	r1, [pc, #112]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	440b      	add	r3, r1
 800249c:	3324      	adds	r3, #36	@ 0x24
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	88fa      	ldrh	r2, [r7, #6]
 80024a2:	4918      	ldr	r1, [pc, #96]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	440b      	add	r3, r1
 80024ae:	332e      	adds	r3, #46	@ 0x2e
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	2200      	movs	r2, #0
 80024b4:	4619      	mov	r1, r3
 80024b6:	f002 fb48 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW3-COL1 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	4911      	ldr	r1, [pc, #68]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	440b      	add	r3, r1
 80024c8:	330c      	adds	r3, #12
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	490d      	ldr	r1, [pc, #52]	@ (8002504 <KEYPAD_Scan+0xf9c>)
 80024d0:	4613      	mov	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4413      	add	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	440b      	add	r3, r1
 80024da:	3316      	adds	r3, #22
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	f002 fb1c 	bl	8004b1c <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <KEYPAD_Scan+0xfa0>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 1;
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	4a03      	ldr	r2, [pc, #12]	@ (8002500 <KEYPAD_Scan+0xf98>)
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	330d      	adds	r3, #13
 80024f8:	2201      	movs	r2, #1
 80024fa:	701a      	strb	r2, [r3, #0]
 80024fc:	e00b      	b.n	8002516 <KEYPAD_Scan+0xfae>
 80024fe:	bf00      	nop
 8002500:	20000080 	.word	0x20000080
 8002504:	08007040 	.word	0x08007040
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	4aab      	ldr	r2, [pc, #684]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	330d      	adds	r3, #13
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 1 0] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002516:	88fa      	ldrh	r2, [r7, #6]
 8002518:	49a8      	ldr	r1, [pc, #672]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	3318      	adds	r3, #24
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	88fa      	ldrh	r2, [r7, #6]
 800252a:	49a4      	ldr	r1, [pc, #656]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800252c:	4613      	mov	r3, r2
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	4413      	add	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	440b      	add	r3, r1
 8002536:	3328      	adds	r3, #40	@ 0x28
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	2200      	movs	r2, #0
 800253c:	4619      	mov	r1, r3
 800253e:	f002 fb04 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	499d      	ldr	r1, [pc, #628]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	440b      	add	r3, r1
 8002550:	331c      	adds	r3, #28
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	88fa      	ldrh	r2, [r7, #6]
 8002556:	4999      	ldr	r1, [pc, #612]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	440b      	add	r3, r1
 8002562:	332a      	adds	r3, #42	@ 0x2a
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	2200      	movs	r2, #0
 8002568:	4619      	mov	r1, r3
 800256a:	f002 faee 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 1);
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	4992      	ldr	r1, [pc, #584]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	440b      	add	r3, r1
 800257c:	3320      	adds	r3, #32
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	498e      	ldr	r1, [pc, #568]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	440b      	add	r3, r1
 800258e:	332c      	adds	r3, #44	@ 0x2c
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2201      	movs	r2, #1
 8002594:	4619      	mov	r1, r3
 8002596:	f002 fad8 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 0);
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	4987      	ldr	r1, [pc, #540]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	440b      	add	r3, r1
 80025a8:	3324      	adds	r3, #36	@ 0x24
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	4983      	ldr	r1, [pc, #524]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	440b      	add	r3, r1
 80025ba:	332e      	adds	r3, #46	@ 0x2e
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	4619      	mov	r1, r3
 80025c2:	f002 fac2 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW3-COL2 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	497c      	ldr	r1, [pc, #496]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	330c      	adds	r3, #12
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	88fa      	ldrh	r2, [r7, #6]
 80025da:	4978      	ldr	r1, [pc, #480]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80025dc:	4613      	mov	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	440b      	add	r3, r1
 80025e6:	3316      	adds	r3, #22
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	4619      	mov	r1, r3
 80025ec:	f002 fa96 	bl	8004b1c <HAL_GPIO_ReadPin>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <KEYPAD_Scan+0x10a2>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 1;
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	4a6e      	ldr	r2, [pc, #440]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	330e      	adds	r3, #14
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e006      	b.n	8002618 <KEYPAD_Scan+0x10b0>
			}
			else
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	4a6a      	ldr	r2, [pc, #424]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	330e      	adds	r3, #14
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
			}
			/* Output To The COL Pins This Pattern: [0 0 0 1] */
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[0], KEYPAD_CfgParam[au16_Instance].COL_PIN[0], 0);
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	4968      	ldr	r1, [pc, #416]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	440b      	add	r3, r1
 8002626:	3318      	adds	r3, #24
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	88fa      	ldrh	r2, [r7, #6]
 800262c:	4963      	ldr	r1, [pc, #396]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	440b      	add	r3, r1
 8002638:	3328      	adds	r3, #40	@ 0x28
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	2200      	movs	r2, #0
 800263e:	4619      	mov	r1, r3
 8002640:	f002 fa83 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[1], KEYPAD_CfgParam[au16_Instance].COL_PIN[1], 0);
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	495d      	ldr	r1, [pc, #372]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	440b      	add	r3, r1
 8002652:	331c      	adds	r3, #28
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	4958      	ldr	r1, [pc, #352]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	440b      	add	r3, r1
 8002664:	332a      	adds	r3, #42	@ 0x2a
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	f002 fa6d 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[2], KEYPAD_CfgParam[au16_Instance].COL_PIN[2], 0);
 8002670:	88fa      	ldrh	r2, [r7, #6]
 8002672:	4952      	ldr	r1, [pc, #328]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	440b      	add	r3, r1
 800267e:	3320      	adds	r3, #32
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	88fa      	ldrh	r2, [r7, #6]
 8002684:	494d      	ldr	r1, [pc, #308]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	440b      	add	r3, r1
 8002690:	332c      	adds	r3, #44	@ 0x2c
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	4619      	mov	r1, r3
 8002698:	f002 fa57 	bl	8004b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[3], KEYPAD_CfgParam[au16_Instance].COL_PIN[3], 1);
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	4947      	ldr	r1, [pc, #284]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	440b      	add	r3, r1
 80026aa:	3324      	adds	r3, #36	@ 0x24
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	4942      	ldr	r1, [pc, #264]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	440b      	add	r3, r1
 80026bc:	332e      	adds	r3, #46	@ 0x2e
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4619      	mov	r1, r3
 80026c4:	f002 fa41 	bl	8004b4a <HAL_GPIO_WritePin>
			/* Read ROW3-COL3 */
			au8_ReadSt = HAL_GPIO_ReadPin(KEYPAD_CfgParam[au16_Instance].ROW_GPIO[3], KEYPAD_CfgParam[au16_Instance].ROW_PIN[3]);
 80026c8:	88fa      	ldrh	r2, [r7, #6]
 80026ca:	493c      	ldr	r1, [pc, #240]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	440b      	add	r3, r1
 80026d6:	330c      	adds	r3, #12
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	4937      	ldr	r1, [pc, #220]	@ (80027bc <KEYPAD_Scan+0x1254>)
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	440b      	add	r3, r1
 80026e8:	3316      	adds	r3, #22
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	f002 fa15 	bl	8004b1c <HAL_GPIO_ReadPin>
 80026f2:	4603      	mov	r3, r0
 80026f4:	73bb      	strb	r3, [r7, #14]
			if(au8_ReadSt)
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d035      	beq.n	8002768 <KEYPAD_Scan+0x1200>
			{
				gs_KEYPAD_info[au16_Instance].KEY_States[15] = 1;
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	4a2e      	ldr	r2, [pc, #184]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 8002700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002704:	330f      	adds	r3, #15
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e02d      	b.n	8002768 <KEYPAD_Scan+0x1200>
			}
		}
		else
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[12] = 0;
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	4a2a      	ldr	r2, [pc, #168]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	330c      	adds	r3, #12
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[13] = 0;
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4a26      	ldr	r2, [pc, #152]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	330d      	adds	r3, #13
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[14] = 0;
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4a23      	ldr	r2, [pc, #140]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	330e      	adds	r3, #14
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
			gs_KEYPAD_info[au16_Instance].KEY_States[15] = 0;
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	4a1f      	ldr	r2, [pc, #124]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 800273a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273e:	330f      	adds	r3, #15
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e010      	b.n	8002768 <KEYPAD_Scan+0x1200>
	}
	/* Else If No Key Is Pressed */
	else
	{
		/* Fill The Keys States With 0s */
		for(i=0; i<KEYS; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e00a      	b.n	8002762 <KEYPAD_Scan+0x11fa>
		{
			gs_KEYPAD_info[au16_Instance].KEY_States[i] = 0;
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4a1a      	ldr	r2, [pc, #104]	@ (80027b8 <KEYPAD_Scan+0x1250>)
 8002750:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	4413      	add	r3, r2
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
		for(i=0; i<KEYS; i++)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	3301      	adds	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d9f1      	bls.n	800274c <KEYPAD_Scan+0x11e4>
		}
	}
	/* Back To Steady State: Output The Pattern [1 1 1 1] To The COL Pins */
	for(i=0; i<COLS; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	e01c      	b.n	80027a8 <KEYPAD_Scan+0x1240>
	{
		HAL_GPIO_WritePin(KEYPAD_CfgParam[au16_Instance].COL_GPIO[i], KEYPAD_CfgParam[au16_Instance].COL_PIN[i], 1);
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	7bf9      	ldrb	r1, [r7, #15]
 8002772:	4812      	ldr	r0, [pc, #72]	@ (80027bc <KEYPAD_Scan+0x1254>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	3306      	adds	r3, #6
 8002780:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	7bf9      	ldrb	r1, [r7, #15]
 8002788:	4c0c      	ldr	r4, [pc, #48]	@ (80027bc <KEYPAD_Scan+0x1254>)
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3314      	adds	r3, #20
 8002796:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 800279a:	2201      	movs	r2, #1
 800279c:	4619      	mov	r1, r3
 800279e:	f002 f9d4 	bl	8004b4a <HAL_GPIO_WritePin>
	for(i=0; i<COLS; i++)
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	3301      	adds	r3, #1
 80027a6:	73fb      	strb	r3, [r7, #15]
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d9df      	bls.n	800276e <KEYPAD_Scan+0x1206>
	}
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd90      	pop	{r4, r7, pc}
 80027b8:	20000080 	.word	0x20000080
 80027bc:	08007040 	.word	0x08007040

080027c0 <SERVO_Init>:

static SERVO_info gs_SERVO_info[SERVO_NUM] = {0};


void SERVO_Init(uint16_t au16_SERVO_Instance)
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b0b0      	sub	sp, #192	@ 0xc0
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ca:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	60da      	str	r2, [r3, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80027f0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	619a      	str	r2, [r3, #24]
    TIM_HandleTypeDef htim;
    uint32_t PSC_Value = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    uint32_t ARR_Value = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    DWT_Delay_Init();
 8002810:	f7fe fa4c 	bl	8000cac <DWT_Delay_Init>

	/*--------[ Configure The Servo PWM GPIO Pin ]-------*/

    if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOA)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	4a87      	ldr	r2, [pc, #540]	@ (8002a34 <SERVO_Init+0x274>)
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	4413      	add	r3, r2
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a86      	ldr	r2, [pc, #536]	@ (8002a38 <SERVO_Init+0x278>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10c      	bne.n	800283e <SERVO_Init+0x7e>
    {
    	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002824:	4b85      	ldr	r3, [pc, #532]	@ (8002a3c <SERVO_Init+0x27c>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a84      	ldr	r2, [pc, #528]	@ (8002a3c <SERVO_Init+0x27c>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b82      	ldr	r3, [pc, #520]	@ (8002a3c <SERVO_Init+0x27c>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	e052      	b.n	80028e4 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOB)
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	4a7c      	ldr	r2, [pc, #496]	@ (8002a34 <SERVO_Init+0x274>)
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4413      	add	r3, r2
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a7d      	ldr	r2, [pc, #500]	@ (8002a40 <SERVO_Init+0x280>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <SERVO_Init+0xa8>
    {
    	__HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a3c <SERVO_Init+0x27c>)
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4a7a      	ldr	r2, [pc, #488]	@ (8002a3c <SERVO_Init+0x27c>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6193      	str	r3, [r2, #24]
 800285a:	4b78      	ldr	r3, [pc, #480]	@ (8002a3c <SERVO_Init+0x27c>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	e03d      	b.n	80028e4 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOC)
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	4a72      	ldr	r2, [pc, #456]	@ (8002a34 <SERVO_Init+0x274>)
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	4413      	add	r3, r2
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a74      	ldr	r2, [pc, #464]	@ (8002a44 <SERVO_Init+0x284>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <SERVO_Init+0xd2>
    {
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8002878:	4b70      	ldr	r3, [pc, #448]	@ (8002a3c <SERVO_Init+0x27c>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	4a6f      	ldr	r2, [pc, #444]	@ (8002a3c <SERVO_Init+0x27c>)
 800287e:	f043 0310 	orr.w	r3, r3, #16
 8002882:	6193      	str	r3, [r2, #24]
 8002884:	4b6d      	ldr	r3, [pc, #436]	@ (8002a3c <SERVO_Init+0x27c>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	e028      	b.n	80028e4 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOD)
 8002892:	88fb      	ldrh	r3, [r7, #6]
 8002894:	4a67      	ldr	r2, [pc, #412]	@ (8002a34 <SERVO_Init+0x274>)
 8002896:	015b      	lsls	r3, r3, #5
 8002898:	4413      	add	r3, r2
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a48 <SERVO_Init+0x288>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10c      	bne.n	80028bc <SERVO_Init+0xfc>
    {
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a2:	4b66      	ldr	r3, [pc, #408]	@ (8002a3c <SERVO_Init+0x27c>)
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	4a65      	ldr	r2, [pc, #404]	@ (8002a3c <SERVO_Init+0x27c>)
 80028a8:	f043 0320 	orr.w	r3, r3, #32
 80028ac:	6193      	str	r3, [r2, #24]
 80028ae:	4b63      	ldr	r3, [pc, #396]	@ (8002a3c <SERVO_Init+0x27c>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	e013      	b.n	80028e4 <SERVO_Init+0x124>
    }
    else if(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO == GPIOE)
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	4a5d      	ldr	r2, [pc, #372]	@ (8002a34 <SERVO_Init+0x274>)
 80028c0:	015b      	lsls	r3, r3, #5
 80028c2:	4413      	add	r3, r2
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a61      	ldr	r2, [pc, #388]	@ (8002a4c <SERVO_Init+0x28c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d10b      	bne.n	80028e4 <SERVO_Init+0x124>
    {
        __HAL_RCC_GPIOE_CLK_ENABLE();
 80028cc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a3c <SERVO_Init+0x27c>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a3c <SERVO_Init+0x27c>)
 80028d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b58      	ldr	r3, [pc, #352]	@ (8002a3c <SERVO_Init+0x27c>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]
    }
	GPIO_InitStruct.Pin = SERVO_CfgParam[au16_SERVO_Instance].SERVO_PIN;
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	4a53      	ldr	r2, [pc, #332]	@ (8002a34 <SERVO_Init+0x274>)
 80028e8:	015b      	lsls	r3, r3, #5
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2302      	movs	r3, #2
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	HAL_GPIO_Init(SERVO_CfgParam[au16_SERVO_Instance].SERVO_GPIO, &GPIO_InitStruct);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	4a4c      	ldr	r2, [pc, #304]	@ (8002a34 <SERVO_Init+0x274>)
 8002904:	015b      	lsls	r3, r3, #5
 8002906:	4413      	add	r3, r2
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 800290e:	4611      	mov	r1, r2
 8002910:	4618      	mov	r0, r3
 8002912:	f001 ff7f 	bl	8004814 <HAL_GPIO_Init>

	/*--------[ Calculate The PSC & ARR Values To Maximize PWM Resolution ]-------*/

	/* Those Equations Sets The F_pwm = 50Hz & Maximizes The Resolution*/
	PSC_Value = (uint32_t) (SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / 3276800.0);
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	4a46      	ldr	r2, [pc, #280]	@ (8002a34 <SERVO_Init+0x274>)
 800291a:	015b      	lsls	r3, r3, #5
 800291c:	4413      	add	r3, r2
 800291e:	3314      	adds	r3, #20
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe08 	bl	8000538 <__aeabi_ui2d>
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <SERVO_Init+0x290>)
 800292e:	f7fd ffa7 	bl	8000880 <__aeabi_ddiv>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f889 	bl	8000a50 <__aeabi_d2uiz>
 800293e:	4603      	mov	r3, r0
 8002940:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
	ARR_Value = (uint32_t) ((SERVO_CfgParam[au16_SERVO_Instance].TIM_CLK / (50.0*(PSC_Value+1.0)))-1.0);
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	4a3b      	ldr	r2, [pc, #236]	@ (8002a34 <SERVO_Init+0x274>)
 8002948:	015b      	lsls	r3, r3, #5
 800294a:	4413      	add	r3, r2
 800294c:	3314      	adds	r3, #20
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7fd fdf1 	bl	8000538 <__aeabi_ui2d>
 8002956:	4604      	mov	r4, r0
 8002958:	460d      	mov	r5, r1
 800295a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	@ 0xbc
 800295e:	f7fd fdeb 	bl	8000538 <__aeabi_ui2d>
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <SERVO_Init+0x294>)
 8002968:	f7fd fcaa 	bl	80002c0 <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	4b37      	ldr	r3, [pc, #220]	@ (8002a58 <SERVO_Init+0x298>)
 800297a:	f7fd fe57 	bl	800062c <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4620      	mov	r0, r4
 8002984:	4629      	mov	r1, r5
 8002986:	f7fd ff7b 	bl	8000880 <__aeabi_ddiv>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b2f      	ldr	r3, [pc, #188]	@ (8002a54 <SERVO_Init+0x294>)
 8002998:	f7fd fc90 	bl	80002bc <__aeabi_dsub>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7fe f854 	bl	8000a50 <__aeabi_d2uiz>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	/*--------[ Configure The Servo PWM Timer Channel ]-------*/

	/*--[Check The Timer & Enable Its Clock]--*/
	if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM1)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	4a20      	ldr	r2, [pc, #128]	@ (8002a34 <SERVO_Init+0x274>)
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	4413      	add	r3, r2
 80029b6:	3308      	adds	r3, #8
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a28      	ldr	r2, [pc, #160]	@ (8002a5c <SERVO_Init+0x29c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d10c      	bne.n	80029da <SERVO_Init+0x21a>
	{
		__HAL_RCC_TIM1_CLK_ENABLE();
 80029c0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <SERVO_Init+0x27c>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a3c <SERVO_Init+0x27c>)
 80029c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <SERVO_Init+0x27c>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	e059      	b.n	8002a8e <SERVO_Init+0x2ce>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM2)
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	4a15      	ldr	r2, [pc, #84]	@ (8002a34 <SERVO_Init+0x274>)
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	4413      	add	r3, r2
 80029e2:	3308      	adds	r3, #8
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ea:	d10c      	bne.n	8002a06 <SERVO_Init+0x246>
	{
		__HAL_RCC_TIM2_CLK_ENABLE();
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <SERVO_Init+0x27c>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <SERVO_Init+0x27c>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	61d3      	str	r3, [r2, #28]
 80029f8:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <SERVO_Init+0x27c>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	e043      	b.n	8002a8e <SERVO_Init+0x2ce>
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM3)
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <SERVO_Init+0x274>)
 8002a0a:	015b      	lsls	r3, r3, #5
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3308      	adds	r3, #8
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a13      	ldr	r2, [pc, #76]	@ (8002a60 <SERVO_Init+0x2a0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d125      	bne.n	8002a64 <SERVO_Init+0x2a4>
	{
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <SERVO_Init+0x27c>)
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	4a07      	ldr	r2, [pc, #28]	@ (8002a3c <SERVO_Init+0x27c>)
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	61d3      	str	r3, [r2, #28]
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <SERVO_Init+0x27c>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	e02d      	b.n	8002a8e <SERVO_Init+0x2ce>
 8002a32:	bf00      	nop
 8002a34:	08007070 	.word	0x08007070
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010c00 	.word	0x40010c00
 8002a44:	40011000 	.word	0x40011000
 8002a48:	40011400 	.word	0x40011400
 8002a4c:	40011800 	.word	0x40011800
 8002a50:	41490000 	.word	0x41490000
 8002a54:	3ff00000 	.word	0x3ff00000
 8002a58:	40490000 	.word	0x40490000
 8002a5c:	40012c00 	.word	0x40012c00
 8002a60:	40000400 	.word	0x40000400
	}
	else if(SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance == TIM4)
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4a5f      	ldr	r2, [pc, #380]	@ (8002be4 <SERVO_Init+0x424>)
 8002a68:	015b      	lsls	r3, r3, #5
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a5d      	ldr	r2, [pc, #372]	@ (8002be8 <SERVO_Init+0x428>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d10b      	bne.n	8002a8e <SERVO_Init+0x2ce>
	{
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002a76:	4b5d      	ldr	r3, [pc, #372]	@ (8002bec <SERVO_Init+0x42c>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bec <SERVO_Init+0x42c>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b5a      	ldr	r3, [pc, #360]	@ (8002bec <SERVO_Init+0x42c>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
	}

	htim.Instance = SERVO_CfgParam[au16_SERVO_Instance].TIM_Instance;
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	4a54      	ldr	r2, [pc, #336]	@ (8002be4 <SERVO_Init+0x424>)
 8002a92:	015b      	lsls	r3, r3, #5
 8002a94:	4413      	add	r3, r2
 8002a96:	3308      	adds	r3, #8
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	htim.Init.Prescaler = PSC_Value;
 8002a9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aa0:	633b      	str	r3, [r7, #48]	@ 0x30
	htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	@ 0x34
	htim.Init.Period = ARR_Value;
 8002aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
	htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	htim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ab0:	2380      	movs	r3, #128	@ 0x80
 8002ab2:	647b      	str	r3, [r7, #68]	@ 0x44
	HAL_TIM_Base_Init(&htim);
 8002ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fbde 	bl	800627a <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	HAL_TIM_ConfigClockSource(&htim, &sClockSourceConfig);
 8002ac6:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8002aca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f003 fddd 	bl	8006690 <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim);
 8002ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 fc1c 	bl	8006318 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig);
 8002aec:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8002af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 f942 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afc:	2360      	movs	r3, #96	@ 0x60
 8002afe:	677b      	str	r3, [r7, #116]	@ 0x74
	sConfigOC.Pulse = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	67bb      	str	r3, [r7, #120]	@ 0x78
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b04:	2300      	movs	r3, #0
 8002b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	HAL_TIM_PWM_ConfigChannel(&htim, &sConfigOC, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4a34      	ldr	r2, [pc, #208]	@ (8002be4 <SERVO_Init+0x424>)
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	4413      	add	r3, r2
 8002b16:	3310      	adds	r3, #16
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8002b1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 fcf2 	bl	800650c <HAL_TIM_PWM_ConfigChannel>

	/*--------[ Calculate & Save The Servo Pulse Information ]-------*/

	gs_SERVO_info[au16_SERVO_Instance].Period_Min = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MinPulse/20.0));
 8002b28:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002b2c:	f7fd fd04 	bl	8000538 <__aeabi_ui2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	4a2b      	ldr	r2, [pc, #172]	@ (8002be4 <SERVO_Init+0x424>)
 8002b38:	015b      	lsls	r3, r3, #5
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3318      	adds	r3, #24
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fd1b 	bl	800057c <__aeabi_f2d>
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <SERVO_Init+0x430>)
 8002b4c:	f7fd fe98 	bl	8000880 <__aeabi_ddiv>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4620      	mov	r0, r4
 8002b56:	4629      	mov	r1, r5
 8002b58:	f7fd fd68 	bl	800062c <__aeabi_dmul>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	88fc      	ldrh	r4, [r7, #6]
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fd ff73 	bl	8000a50 <__aeabi_d2uiz>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	4b21      	ldr	r3, [pc, #132]	@ (8002bf4 <SERVO_Init+0x434>)
 8002b70:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
	gs_SERVO_info[au16_SERVO_Instance].Period_Max = (uint16_t) (ARR_Value * (SERVO_CfgParam[au16_SERVO_Instance].MaxPulse/20.0));
 8002b74:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8002b78:	f7fd fcde 	bl	8000538 <__aeabi_ui2d>
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	4a18      	ldr	r2, [pc, #96]	@ (8002be4 <SERVO_Init+0x424>)
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	4413      	add	r3, r2
 8002b88:	331c      	adds	r3, #28
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcf5 	bl	800057c <__aeabi_f2d>
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	4b16      	ldr	r3, [pc, #88]	@ (8002bf0 <SERVO_Init+0x430>)
 8002b98:	f7fd fe72 	bl	8000880 <__aeabi_ddiv>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	f7fd fd42 	bl	800062c <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	88fc      	ldrh	r4, [r7, #6]
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fd ff4d 	bl	8000a50 <__aeabi_d2uiz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b299      	uxth	r1, r3
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <SERVO_Init+0x434>)
 8002bbc:	00a3      	lsls	r3, r4, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	460a      	mov	r2, r1
 8002bc2:	805a      	strh	r2, [r3, #2]

	/*--------[ Start The PWM Channel ]-------*/

	HAL_TIM_PWM_Start(&htim, SERVO_CfgParam[au16_SERVO_Instance].PWM_TIM_CH);
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <SERVO_Init+0x424>)
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	4413      	add	r3, r2
 8002bcc:	3310      	adds	r3, #16
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fbf6 	bl	80063c8 <HAL_TIM_PWM_Start>
}
 8002bdc:	bf00      	nop
 8002bde:	37c0      	adds	r7, #192	@ 0xc0
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bdb0      	pop	{r4, r5, r7, pc}
 8002be4:	08007070 	.word	0x08007070
 8002be8:	40000800 	.word	0x40000800
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40340000 	.word	0x40340000
 8002bf4:	20000084 	.word	0x20000084

08002bf8 <SERVO_MoveTo>:

/* Moves A Specific Motor To A Specific Degree That Can Be Float Number */
void SERVO_MoveTo(uint16_t au16_SERVO_Instance, float af_Angle)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	80fb      	strh	r3, [r7, #6]
	uint16_t au16_Pulse = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	81fb      	strh	r3, [r7, #14]

	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4a20      	ldr	r2, [pc, #128]	@ (8002c8c <SERVO_MoveTo+0x94>)
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	885b      	ldrh	r3, [r3, #2]
 8002c12:	4619      	mov	r1, r3
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	4a1d      	ldr	r2, [pc, #116]	@ (8002c8c <SERVO_MoveTo+0x94>)
 8002c18:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002c1c:	1acb      	subs	r3, r1, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fd fff0 	bl	8000c04 <__aeabi_i2f>
 8002c24:	4603      	mov	r3, r0
 8002c26:	6839      	ldr	r1, [r7, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fa8f 	bl	800014c <__aeabi_fmul>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fca3 	bl	800057c <__aeabi_f2d>
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	4b15      	ldr	r3, [pc, #84]	@ (8002c90 <SERVO_MoveTo+0x98>)
 8002c3c:	f7fd fe20 	bl	8000880 <__aeabi_ddiv>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4614      	mov	r4, r2
 8002c46:	461d      	mov	r5, r3
			+ gs_SERVO_info[au16_SERVO_Instance].Period_Min;
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4a10      	ldr	r2, [pc, #64]	@ (8002c8c <SERVO_MoveTo+0x94>)
 8002c4c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc81 	bl	8000558 <__aeabi_i2d>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fb2f 	bl	80002c0 <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
	au16_Pulse = ((af_Angle*(gs_SERVO_info[au16_SERVO_Instance].Period_Max - gs_SERVO_info[au16_SERVO_Instance].Period_Min))/180.0)
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd fef1 	bl	8000a50 <__aeabi_d2uiz>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	81fb      	strh	r3, [r7, #14]

	*(SERVO_CfgParam[au16_SERVO_Instance].TIM_CCRx) = au16_Pulse;
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	4a07      	ldr	r2, [pc, #28]	@ (8002c94 <SERVO_MoveTo+0x9c>)
 8002c76:	015b      	lsls	r3, r3, #5
 8002c78:	4413      	add	r3, r2
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	89fa      	ldrh	r2, [r7, #14]
 8002c80:	601a      	str	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000084 	.word	0x20000084
 8002c90:	40668000 	.word	0x40668000
 8002c94:	08007070 	.word	0x08007070

08002c98 <Password_Check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Password_Check(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
    if(i == 6){
 8002c9c:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <Password_Check+0x58>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d120      	bne.n	8002ce6 <Password_Check+0x4e>
        for(i = 0; i<6; i++)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <Password_Check+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e018      	b.n	8002cde <Password_Check+0x46>
        {
            if(Password[i] != RightPassword[i])
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <Password_Check+0x58>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a10      	ldr	r2, [pc, #64]	@ (8002cf4 <Password_Check+0x5c>)
 8002cb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf0 <Password_Check+0x58>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	490f      	ldr	r1, [pc, #60]	@ (8002cf8 <Password_Check+0x60>)
 8002cbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d004      	beq.n	8002cce <Password_Check+0x36>
            {
                c = 0;
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <Password_Check+0x64>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
                break;
 8002cca:	bf00      	nop
            } else {
                c = 1;
            }
        }
    }
}
 8002ccc:	e00b      	b.n	8002ce6 <Password_Check+0x4e>
                c = 1;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <Password_Check+0x64>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]
        for(i = 0; i<6; i++)
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <Password_Check+0x58>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <Password_Check+0x58>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b04      	ldr	r3, [pc, #16]	@ (8002cf0 <Password_Check+0x58>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	dde2      	ble.n	8002cac <Password_Check+0x14>
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	200001f0 	.word	0x200001f0
 8002cf4:	200001d8 	.word	0x200001d8
 8002cf8:	2000001c 	.word	0x2000001c
 8002cfc:	20000034 	.word	0x20000034

08002d00 <Notifications>:

void Notifications(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
    if(c == 1)
 8002d04:	4b71      	ldr	r3, [pc, #452]	@ (8002ecc <Notifications+0x1cc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	f040 8086 	bne.w	8002e1a <Notifications+0x11a>
    {
        if( b == 0){
 8002d0e:	4b70      	ldr	r3, [pc, #448]	@ (8002ed0 <Notifications+0x1d0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <Notifications+0x28>
            SERVO_MoveTo(SERVO_Motor1, 0);
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f7ff ff6c 	bl	8002bf8 <SERVO_MoveTo>
            SERVO_MoveTo(SERVO_Motor1, 90);
 8002d20:	496c      	ldr	r1, [pc, #432]	@ (8002ed4 <Notifications+0x1d4>)
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7ff ff68 	bl	8002bf8 <SERVO_MoveTo>
        }
        I2C_LCD_Clear(MyI2C_LCD);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe f993 	bl	8001054 <I2C_LCD_Clear>
        I2C_LCD_WriteString(MyI2C_LCD,"Welcome");
 8002d2e:	496a      	ldr	r1, [pc, #424]	@ (8002ed8 <Notifications+0x1d8>)
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7fe fa1f 	bl	8001174 <I2C_LCD_WriteString>
        Tone(659, 167); // D5
 8002d36:	21a7      	movs	r1, #167	@ 0xa7
 8002d38:	f240 2093 	movw	r0, #659	@ 0x293
 8002d3c:	f000 fcac 	bl	8003698 <Tone>
        Tone(587, 167); // E5
 8002d40:	21a7      	movs	r1, #167	@ 0xa7
 8002d42:	f240 204b 	movw	r0, #587	@ 0x24b
 8002d46:	f000 fca7 	bl	8003698 <Tone>
        Tone(370, 333); // F#5
 8002d4a:	f240 114d 	movw	r1, #333	@ 0x14d
 8002d4e:	f44f 70b9 	mov.w	r0, #370	@ 0x172
 8002d52:	f000 fca1 	bl	8003698 <Tone>
        Tone(415, 333); // G5
 8002d56:	f240 114d 	movw	r1, #333	@ 0x14d
 8002d5a:	f240 109f 	movw	r0, #415	@ 0x19f
 8002d5e:	f000 fc9b 	bl	8003698 <Tone>
        Tone(554, 167);
 8002d62:	21a7      	movs	r1, #167	@ 0xa7
 8002d64:	f240 202a 	movw	r0, #554	@ 0x22a
 8002d68:	f000 fc96 	bl	8003698 <Tone>
        Tone(494, 167);
 8002d6c:	21a7      	movs	r1, #167	@ 0xa7
 8002d6e:	f44f 70f7 	mov.w	r0, #494	@ 0x1ee
 8002d72:	f000 fc91 	bl	8003698 <Tone>
        Tone(294, 333);
 8002d76:	f240 114d 	movw	r1, #333	@ 0x14d
 8002d7a:	f44f 7093 	mov.w	r0, #294	@ 0x126
 8002d7e:	f000 fc8b 	bl	8003698 <Tone>
        Tone(330, 333);
 8002d82:	f240 114d 	movw	r1, #333	@ 0x14d
 8002d86:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002d8a:	f000 fc85 	bl	8003698 <Tone>
        Tone(494, 167);
 8002d8e:	21a7      	movs	r1, #167	@ 0xa7
 8002d90:	f44f 70f7 	mov.w	r0, #494	@ 0x1ee
 8002d94:	f000 fc80 	bl	8003698 <Tone>
        Tone(440, 167);
 8002d98:	21a7      	movs	r1, #167	@ 0xa7
 8002d9a:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8002d9e:	f000 fc7b 	bl	8003698 <Tone>
        Tone(277, 333);
 8002da2:	f240 114d 	movw	r1, #333	@ 0x14d
 8002da6:	f240 1015 	movw	r0, #277	@ 0x115
 8002daa:	f000 fc75 	bl	8003698 <Tone>
        Tone(330, 333);
 8002dae:	f240 114d 	movw	r1, #333	@ 0x14d
 8002db2:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 8002db6:	f000 fc6f 	bl	8003698 <Tone>
        Tone(440, 667);
 8002dba:	f240 219b 	movw	r1, #667	@ 0x29b
 8002dbe:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 8002dc2:	f000 fc69 	bl	8003698 <Tone>
        noTone();
 8002dc6:	f000 fc85 	bl	80036d4 <noTone>
        if(b==0){
 8002dca:	4b41      	ldr	r3, [pc, #260]	@ (8002ed0 <Notifications+0x1d0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d104      	bne.n	8002ddc <Notifications+0xdc>
            SERVO_MoveTo(SERVO_Motor1, 0);
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7ff ff0e 	bl	8002bf8 <SERVO_MoveTo>
        }
        HAL_Delay(1500);
 8002ddc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002de0:	f001 fc10 	bl	8004604 <HAL_Delay>
        NoteIndex = 0;
 8002de4:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <Notifications+0x1dc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
        i=0;
 8002dea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee0 <Notifications+0x1e0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
        c=2;
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <Notifications+0x1cc>)
 8002df2:	2202      	movs	r2, #2
 8002df4:	601a      	str	r2, [r3, #0]
        k=0;
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <Notifications+0x1e4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
        memset(Password, 0, sizeof(Password));
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4839      	ldr	r0, [pc, #228]	@ (8002ee8 <Notifications+0x1e8>)
 8002e02:	f004 f86c 	bl	8006ede <memset>
        if (b == 1){
 8002e06:	4b32      	ldr	r3, [pc, #200]	@ (8002ed0 <Notifications+0x1d0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d102      	bne.n	8002e14 <Notifications+0x114>
            d = 1;
 8002e0e:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <Notifications+0x1ec>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
        }
        else if (b == 0){}
        main();
 8002e14:	f000 fc68 	bl	80036e8 <main>
            HAL_Delay(10000);
            main();
        }
        main();
    }
}
 8002e18:	e056      	b.n	8002ec8 <Notifications+0x1c8>
    else if (c == 0)
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <Notifications+0x1cc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d152      	bne.n	8002ec8 <Notifications+0x1c8>
        I2C_LCD_Clear(MyI2C_LCD);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fe f916 	bl	8001054 <I2C_LCD_Clear>
        I2C_LCD_WriteString(MyI2C_LCD, "Sai Mat Khau");
 8002e28:	4931      	ldr	r1, [pc, #196]	@ (8002ef0 <Notifications+0x1f0>)
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe f9a2 	bl	8001174 <I2C_LCD_WriteString>
        Tone(OctaveFour[NoteIndex++], 250);
 8002e30:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <Notifications+0x1dc>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	b2d1      	uxtb	r1, r2
 8002e38:	4a28      	ldr	r2, [pc, #160]	@ (8002edc <Notifications+0x1dc>)
 8002e3a:	7011      	strb	r1, [r2, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <Notifications+0x1f4>)
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	21fa      	movs	r1, #250	@ 0xfa
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fc26 	bl	8003698 <Tone>
        if(NoteIndex == 5){
 8002e4c:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <Notifications+0x1dc>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d102      	bne.n	8002e5a <Notifications+0x15a>
            NoteIndex = 0;
 8002e54:	4b21      	ldr	r3, [pc, #132]	@ (8002edc <Notifications+0x1dc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
        noTone();
 8002e5a:	f000 fc3b 	bl	80036d4 <noTone>
        HAL_Delay(1500);
 8002e5e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002e62:	f001 fbcf 	bl	8004604 <HAL_Delay>
        i=0;
 8002e66:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee0 <Notifications+0x1e0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
        c=2;
 8002e6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <Notifications+0x1cc>)
 8002e6e:	2202      	movs	r2, #2
 8002e70:	601a      	str	r2, [r3, #0]
        memset(Password, 0, sizeof(Password));
 8002e72:	2218      	movs	r2, #24
 8002e74:	2100      	movs	r1, #0
 8002e76:	481c      	ldr	r0, [pc, #112]	@ (8002ee8 <Notifications+0x1e8>)
 8002e78:	f004 f831 	bl	8006ede <memset>
        k++;
 8002e7c:	4b19      	ldr	r3, [pc, #100]	@ (8002ee4 <Notifications+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a18      	ldr	r2, [pc, #96]	@ (8002ee4 <Notifications+0x1e4>)
 8002e84:	6013      	str	r3, [r2, #0]
        b = 0;
 8002e86:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <Notifications+0x1d0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
        if(k == 5)
 8002e8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <Notifications+0x1e4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d117      	bne.n	8002ec4 <Notifications+0x1c4>
            I2C_LCD_Clear(MyI2C_LCD);
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7fe f8dd 	bl	8001054 <I2C_LCD_Clear>
            I2C_LCD_WriteString(MyI2C_LCD, "Thu Lai Sau 30s");
 8002e9a:	4917      	ldr	r1, [pc, #92]	@ (8002ef8 <Notifications+0x1f8>)
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fe f969 	bl	8001174 <I2C_LCD_WriteString>
            k = 0;
 8002ea2:	4b10      	ldr	r3, [pc, #64]	@ (8002ee4 <Notifications+0x1e4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
            HAL_Delay(10000);
 8002ea8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002eac:	f001 fbaa 	bl	8004604 <HAL_Delay>
            HAL_Delay(10000);
 8002eb0:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002eb4:	f001 fba6 	bl	8004604 <HAL_Delay>
            HAL_Delay(10000);
 8002eb8:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002ebc:	f001 fba2 	bl	8004604 <HAL_Delay>
            main();
 8002ec0:	f000 fc12 	bl	80036e8 <main>
        main();
 8002ec4:	f000 fc10 	bl	80036e8 <main>
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000034 	.word	0x20000034
 8002ed0:	20000200 	.word	0x20000200
 8002ed4:	42b40000 	.word	0x42b40000
 8002ed8:	08006f60 	.word	0x08006f60
 8002edc:	200001c4 	.word	0x200001c4
 8002ee0:	200001f0 	.word	0x200001f0
 8002ee4:	200001f4 	.word	0x200001f4
 8002ee8:	200001d8 	.word	0x200001d8
 8002eec:	200001fc 	.word	0x200001fc
 8002ef0:	08006f68 	.word	0x08006f68
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	08006f78 	.word	0x08006f78

08002efc <Set_Password>:

void Set_Password(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
    if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 8002f00:	4b6f      	ldr	r3, [pc, #444]	@ (80030c0 <Set_Password+0x1c4>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d111      	bne.n	8002f2c <Set_Password+0x30>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'1');
 8002f08:	2131      	movs	r1, #49	@ 0x31
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fe f920 	bl	8001150 <I2C_LCD_WriteChar>
        HAL_Delay(10);
 8002f10:	200a      	movs	r0, #10
 8002f12:	f001 fb77 	bl	8004604 <HAL_Delay>
        RightPassword[a] = 1;
 8002f16:	4b6b      	ldr	r3, [pc, #428]	@ (80030c4 <Set_Password+0x1c8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a6b      	ldr	r2, [pc, #428]	@ (80030c8 <Set_Password+0x1cc>)
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8002f22:	4b68      	ldr	r3, [pc, #416]	@ (80030c4 <Set_Password+0x1c8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	4a66      	ldr	r2, [pc, #408]	@ (80030c4 <Set_Password+0x1c8>)
 8002f2a:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED)
 8002f2c:	4b64      	ldr	r3, [pc, #400]	@ (80030c0 <Set_Password+0x1c4>)
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d111      	bne.n	8002f58 <Set_Password+0x5c>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'2');
 8002f34:	2132      	movs	r1, #50	@ 0x32
 8002f36:	2000      	movs	r0, #0
 8002f38:	f7fe f90a 	bl	8001150 <I2C_LCD_WriteChar>
        HAL_Delay(10);
 8002f3c:	200a      	movs	r0, #10
 8002f3e:	f001 fb61 	bl	8004604 <HAL_Delay>
        RightPassword[a] = 2;
 8002f42:	4b60      	ldr	r3, [pc, #384]	@ (80030c4 <Set_Password+0x1c8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a60      	ldr	r2, [pc, #384]	@ (80030c8 <Set_Password+0x1cc>)
 8002f48:	2102      	movs	r1, #2
 8002f4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80030c4 <Set_Password+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3301      	adds	r3, #1
 8002f54:	4a5b      	ldr	r2, [pc, #364]	@ (80030c4 <Set_Password+0x1c8>)
 8002f56:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED)
 8002f58:	4b59      	ldr	r3, [pc, #356]	@ (80030c0 <Set_Password+0x1c4>)
 8002f5a:	789b      	ldrb	r3, [r3, #2]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10e      	bne.n	8002f7e <Set_Password+0x82>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'3');
 8002f60:	2133      	movs	r1, #51	@ 0x33
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7fe f8f4 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 3;
 8002f68:	4b56      	ldr	r3, [pc, #344]	@ (80030c4 <Set_Password+0x1c8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a56      	ldr	r2, [pc, #344]	@ (80030c8 <Set_Password+0x1cc>)
 8002f6e:	2103      	movs	r1, #3
 8002f70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8002f74:	4b53      	ldr	r3, [pc, #332]	@ (80030c4 <Set_Password+0x1c8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	4a52      	ldr	r2, [pc, #328]	@ (80030c4 <Set_Password+0x1c8>)
 8002f7c:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED)
 8002f7e:	4b50      	ldr	r3, [pc, #320]	@ (80030c0 <Set_Password+0x1c4>)
 8002f80:	791b      	ldrb	r3, [r3, #4]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10e      	bne.n	8002fa4 <Set_Password+0xa8>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'4');
 8002f86:	2134      	movs	r1, #52	@ 0x34
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fe f8e1 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 4;
 8002f8e:	4b4d      	ldr	r3, [pc, #308]	@ (80030c4 <Set_Password+0x1c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a4d      	ldr	r2, [pc, #308]	@ (80030c8 <Set_Password+0x1cc>)
 8002f94:	2104      	movs	r1, #4
 8002f96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8002f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <Set_Password+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	4a48      	ldr	r2, [pc, #288]	@ (80030c4 <Set_Password+0x1c8>)
 8002fa2:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED)
 8002fa4:	4b46      	ldr	r3, [pc, #280]	@ (80030c0 <Set_Password+0x1c4>)
 8002fa6:	795b      	ldrb	r3, [r3, #5]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10e      	bne.n	8002fca <Set_Password+0xce>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'5');
 8002fac:	2135      	movs	r1, #53	@ 0x35
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fe f8ce 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 5;
 8002fb4:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <Set_Password+0x1c8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a43      	ldr	r2, [pc, #268]	@ (80030c8 <Set_Password+0x1cc>)
 8002fba:	2105      	movs	r1, #5
 8002fbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8002fc0:	4b40      	ldr	r3, [pc, #256]	@ (80030c4 <Set_Password+0x1c8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80030c4 <Set_Password+0x1c8>)
 8002fc8:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED)
 8002fca:	4b3d      	ldr	r3, [pc, #244]	@ (80030c0 <Set_Password+0x1c4>)
 8002fcc:	799b      	ldrb	r3, [r3, #6]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d10e      	bne.n	8002ff0 <Set_Password+0xf4>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'6');
 8002fd2:	2136      	movs	r1, #54	@ 0x36
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fe f8bb 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 6;
 8002fda:	4b3a      	ldr	r3, [pc, #232]	@ (80030c4 <Set_Password+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a3a      	ldr	r2, [pc, #232]	@ (80030c8 <Set_Password+0x1cc>)
 8002fe0:	2106      	movs	r1, #6
 8002fe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8002fe6:	4b37      	ldr	r3, [pc, #220]	@ (80030c4 <Set_Password+0x1c8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	4a35      	ldr	r2, [pc, #212]	@ (80030c4 <Set_Password+0x1c8>)
 8002fee:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED)
 8002ff0:	4b33      	ldr	r3, [pc, #204]	@ (80030c0 <Set_Password+0x1c4>)
 8002ff2:	7a1b      	ldrb	r3, [r3, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10e      	bne.n	8003016 <Set_Password+0x11a>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'7');
 8002ff8:	2137      	movs	r1, #55	@ 0x37
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7fe f8a8 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] =7;
 8003000:	4b30      	ldr	r3, [pc, #192]	@ (80030c4 <Set_Password+0x1c8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a30      	ldr	r2, [pc, #192]	@ (80030c8 <Set_Password+0x1cc>)
 8003006:	2107      	movs	r1, #7
 8003008:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 800300c:	4b2d      	ldr	r3, [pc, #180]	@ (80030c4 <Set_Password+0x1c8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a2c      	ldr	r2, [pc, #176]	@ (80030c4 <Set_Password+0x1c8>)
 8003014:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED)
 8003016:	4b2a      	ldr	r3, [pc, #168]	@ (80030c0 <Set_Password+0x1c4>)
 8003018:	7a5b      	ldrb	r3, [r3, #9]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10e      	bne.n	800303c <Set_Password+0x140>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'8');
 800301e:	2138      	movs	r1, #56	@ 0x38
 8003020:	2000      	movs	r0, #0
 8003022:	f7fe f895 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 8;
 8003026:	4b27      	ldr	r3, [pc, #156]	@ (80030c4 <Set_Password+0x1c8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a27      	ldr	r2, [pc, #156]	@ (80030c8 <Set_Password+0x1cc>)
 800302c:	2108      	movs	r1, #8
 800302e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <Set_Password+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <Set_Password+0x1c8>)
 800303a:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED)
 800303c:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <Set_Password+0x1c4>)
 800303e:	7a9b      	ldrb	r3, [r3, #10]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10e      	bne.n	8003062 <Set_Password+0x166>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'9');
 8003044:	2139      	movs	r1, #57	@ 0x39
 8003046:	2000      	movs	r0, #0
 8003048:	f7fe f882 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 9;
 800304c:	4b1d      	ldr	r3, [pc, #116]	@ (80030c4 <Set_Password+0x1c8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1d      	ldr	r2, [pc, #116]	@ (80030c8 <Set_Password+0x1cc>)
 8003052:	2109      	movs	r1, #9
 8003054:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 8003058:	4b1a      	ldr	r3, [pc, #104]	@ (80030c4 <Set_Password+0x1c8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	4a19      	ldr	r2, [pc, #100]	@ (80030c4 <Set_Password+0x1c8>)
 8003060:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED)
 8003062:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <Set_Password+0x1c4>)
 8003064:	7b5b      	ldrb	r3, [r3, #13]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d10e      	bne.n	8003088 <Set_Password+0x18c>
    {
        I2C_LCD_WriteChar(MyI2C_LCD,'0');
 800306a:	2130      	movs	r1, #48	@ 0x30
 800306c:	2000      	movs	r0, #0
 800306e:	f7fe f86f 	bl	8001150 <I2C_LCD_WriteChar>
        RightPassword[a] = 0;
 8003072:	4b14      	ldr	r3, [pc, #80]	@ (80030c4 <Set_Password+0x1c8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a14      	ldr	r2, [pc, #80]	@ (80030c8 <Set_Password+0x1cc>)
 8003078:	2100      	movs	r1, #0
 800307a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        a++;
 800307e:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <Set_Password+0x1c8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	4a0f      	ldr	r2, [pc, #60]	@ (80030c4 <Set_Password+0x1c8>)
 8003086:	6013      	str	r3, [r2, #0]
    }
    if(a == 6)
 8003088:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <Set_Password+0x1c8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b06      	cmp	r3, #6
 800308e:	d115      	bne.n	80030bc <Set_Password+0x1c0>
    {
        a = 0;
 8003090:	4b0c      	ldr	r3, [pc, #48]	@ (80030c4 <Set_Password+0x1c8>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
        d = 0;
 8003096:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <Set_Password+0x1d0>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
        b = 0;
 800309c:	4b0c      	ldr	r3, [pc, #48]	@ (80030d0 <Set_Password+0x1d4>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
        I2C_LCD_Clear(MyI2C_LCD);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fd ffd6 	bl	8001054 <I2C_LCD_Clear>
        I2C_LCD_WriteString(MyI2C_LCD,"Doi thanh cong");
 80030a8:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <Set_Password+0x1d8>)
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fe f862 	bl	8001174 <I2C_LCD_WriteString>
        HAL_Delay(1000);
 80030b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030b4:	f001 faa6 	bl	8004604 <HAL_Delay>
        main();
 80030b8:	f000 fb16 	bl	80036e8 <main>
    }
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200001c8 	.word	0x200001c8
 80030c4:	200001f8 	.word	0x200001f8
 80030c8:	2000001c 	.word	0x2000001c
 80030cc:	200001fc 	.word	0x200001fc
 80030d0:	20000200 	.word	0x20000200
 80030d4:	08006f88 	.word	0x08006f88

080030d8 <Display_Handler>:

void Display_Handler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
    if(gu8_KeyStatesArr[KEY_1] == KEY_PRESSED)
 80030dc:	4b7d      	ldr	r3, [pc, #500]	@ (80032d4 <Display_Handler+0x1fc>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d111      	bne.n	8003108 <Display_Handler+0x30>
    {
        HAL_Delay(100);
 80030e4:	2064      	movs	r0, #100	@ 0x64
 80030e6:	f001 fa8d 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'1');
 80030ea:	2131      	movs	r1, #49	@ 0x31
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7fe f82f 	bl	8001150 <I2C_LCD_WriteChar>
        Password[i] = 1;
 80030f2:	4b79      	ldr	r3, [pc, #484]	@ (80032d8 <Display_Handler+0x200>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a79      	ldr	r2, [pc, #484]	@ (80032dc <Display_Handler+0x204>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 80030fe:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <Display_Handler+0x200>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	4a74      	ldr	r2, [pc, #464]	@ (80032d8 <Display_Handler+0x200>)
 8003106:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_2] == KEY_PRESSED)
 8003108:	4b72      	ldr	r3, [pc, #456]	@ (80032d4 <Display_Handler+0x1fc>)
 800310a:	785b      	ldrb	r3, [r3, #1]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d111      	bne.n	8003134 <Display_Handler+0x5c>
    {
        HAL_Delay(100);
 8003110:	2064      	movs	r0, #100	@ 0x64
 8003112:	f001 fa77 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'2');
 8003116:	2132      	movs	r1, #50	@ 0x32
 8003118:	2000      	movs	r0, #0
 800311a:	f7fe f819 	bl	8001150 <I2C_LCD_WriteChar>
        Password[i] = 2;
 800311e:	4b6e      	ldr	r3, [pc, #440]	@ (80032d8 <Display_Handler+0x200>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6e      	ldr	r2, [pc, #440]	@ (80032dc <Display_Handler+0x204>)
 8003124:	2102      	movs	r1, #2
 8003126:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 800312a:	4b6b      	ldr	r3, [pc, #428]	@ (80032d8 <Display_Handler+0x200>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3301      	adds	r3, #1
 8003130:	4a69      	ldr	r2, [pc, #420]	@ (80032d8 <Display_Handler+0x200>)
 8003132:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_3] == KEY_PRESSED)
 8003134:	4b67      	ldr	r3, [pc, #412]	@ (80032d4 <Display_Handler+0x1fc>)
 8003136:	789b      	ldrb	r3, [r3, #2]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d111      	bne.n	8003160 <Display_Handler+0x88>
    {
        HAL_Delay(100);
 800313c:	2064      	movs	r0, #100	@ 0x64
 800313e:	f001 fa61 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'3');
 8003142:	2133      	movs	r1, #51	@ 0x33
 8003144:	2000      	movs	r0, #0
 8003146:	f7fe f803 	bl	8001150 <I2C_LCD_WriteChar>
        Password[i] = 3;
 800314a:	4b63      	ldr	r3, [pc, #396]	@ (80032d8 <Display_Handler+0x200>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a63      	ldr	r2, [pc, #396]	@ (80032dc <Display_Handler+0x204>)
 8003150:	2103      	movs	r1, #3
 8003152:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 8003156:	4b60      	ldr	r3, [pc, #384]	@ (80032d8 <Display_Handler+0x200>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	4a5e      	ldr	r2, [pc, #376]	@ (80032d8 <Display_Handler+0x200>)
 800315e:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_4] == KEY_PRESSED)
 8003160:	4b5c      	ldr	r3, [pc, #368]	@ (80032d4 <Display_Handler+0x1fc>)
 8003162:	791b      	ldrb	r3, [r3, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d111      	bne.n	800318c <Display_Handler+0xb4>
    {
        HAL_Delay(100);
 8003168:	2064      	movs	r0, #100	@ 0x64
 800316a:	f001 fa4b 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'4');
 800316e:	2134      	movs	r1, #52	@ 0x34
 8003170:	2000      	movs	r0, #0
 8003172:	f7fd ffed 	bl	8001150 <I2C_LCD_WriteChar>
        Password[i] = 4;
 8003176:	4b58      	ldr	r3, [pc, #352]	@ (80032d8 <Display_Handler+0x200>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a58      	ldr	r2, [pc, #352]	@ (80032dc <Display_Handler+0x204>)
 800317c:	2104      	movs	r1, #4
 800317e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 8003182:	4b55      	ldr	r3, [pc, #340]	@ (80032d8 <Display_Handler+0x200>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	4a53      	ldr	r2, [pc, #332]	@ (80032d8 <Display_Handler+0x200>)
 800318a:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_5] == KEY_PRESSED)
 800318c:	4b51      	ldr	r3, [pc, #324]	@ (80032d4 <Display_Handler+0x1fc>)
 800318e:	795b      	ldrb	r3, [r3, #5]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d111      	bne.n	80031b8 <Display_Handler+0xe0>
    {
        HAL_Delay(100);
 8003194:	2064      	movs	r0, #100	@ 0x64
 8003196:	f001 fa35 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'5');
 800319a:	2135      	movs	r1, #53	@ 0x35
 800319c:	2000      	movs	r0, #0
 800319e:	f7fd ffd7 	bl	8001150 <I2C_LCD_WriteChar>
        Password [i] = 5;
 80031a2:	4b4d      	ldr	r3, [pc, #308]	@ (80032d8 <Display_Handler+0x200>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a4d      	ldr	r2, [pc, #308]	@ (80032dc <Display_Handler+0x204>)
 80031a8:	2105      	movs	r1, #5
 80031aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 80031ae:	4b4a      	ldr	r3, [pc, #296]	@ (80032d8 <Display_Handler+0x200>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	4a48      	ldr	r2, [pc, #288]	@ (80032d8 <Display_Handler+0x200>)
 80031b6:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_6] == KEY_PRESSED)
 80031b8:	4b46      	ldr	r3, [pc, #280]	@ (80032d4 <Display_Handler+0x1fc>)
 80031ba:	799b      	ldrb	r3, [r3, #6]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d111      	bne.n	80031e4 <Display_Handler+0x10c>
    {
        HAL_Delay(100);
 80031c0:	2064      	movs	r0, #100	@ 0x64
 80031c2:	f001 fa1f 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'6');
 80031c6:	2136      	movs	r1, #54	@ 0x36
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd ffc1 	bl	8001150 <I2C_LCD_WriteChar>
        Password [i] = 6;
 80031ce:	4b42      	ldr	r3, [pc, #264]	@ (80032d8 <Display_Handler+0x200>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a42      	ldr	r2, [pc, #264]	@ (80032dc <Display_Handler+0x204>)
 80031d4:	2106      	movs	r1, #6
 80031d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 80031da:	4b3f      	ldr	r3, [pc, #252]	@ (80032d8 <Display_Handler+0x200>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a3d      	ldr	r2, [pc, #244]	@ (80032d8 <Display_Handler+0x200>)
 80031e2:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_7] == KEY_PRESSED)
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <Display_Handler+0x1fc>)
 80031e6:	7a1b      	ldrb	r3, [r3, #8]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d111      	bne.n	8003210 <Display_Handler+0x138>
    {
        HAL_Delay(100);
 80031ec:	2064      	movs	r0, #100	@ 0x64
 80031ee:	f001 fa09 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'7');
 80031f2:	2137      	movs	r1, #55	@ 0x37
 80031f4:	2000      	movs	r0, #0
 80031f6:	f7fd ffab 	bl	8001150 <I2C_LCD_WriteChar>
        Password [i] =7;
 80031fa:	4b37      	ldr	r3, [pc, #220]	@ (80032d8 <Display_Handler+0x200>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a37      	ldr	r2, [pc, #220]	@ (80032dc <Display_Handler+0x204>)
 8003200:	2107      	movs	r1, #7
 8003202:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 8003206:	4b34      	ldr	r3, [pc, #208]	@ (80032d8 <Display_Handler+0x200>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3301      	adds	r3, #1
 800320c:	4a32      	ldr	r2, [pc, #200]	@ (80032d8 <Display_Handler+0x200>)
 800320e:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_8] == KEY_PRESSED)
 8003210:	4b30      	ldr	r3, [pc, #192]	@ (80032d4 <Display_Handler+0x1fc>)
 8003212:	7a5b      	ldrb	r3, [r3, #9]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d111      	bne.n	800323c <Display_Handler+0x164>
    {
        HAL_Delay(100);
 8003218:	2064      	movs	r0, #100	@ 0x64
 800321a:	f001 f9f3 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'8');
 800321e:	2138      	movs	r1, #56	@ 0x38
 8003220:	2000      	movs	r0, #0
 8003222:	f7fd ff95 	bl	8001150 <I2C_LCD_WriteChar>
        Password [i] = 8;
 8003226:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <Display_Handler+0x200>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2c      	ldr	r2, [pc, #176]	@ (80032dc <Display_Handler+0x204>)
 800322c:	2108      	movs	r1, #8
 800322e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 8003232:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <Display_Handler+0x200>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a27      	ldr	r2, [pc, #156]	@ (80032d8 <Display_Handler+0x200>)
 800323a:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_9] == KEY_PRESSED)
 800323c:	4b25      	ldr	r3, [pc, #148]	@ (80032d4 <Display_Handler+0x1fc>)
 800323e:	7a9b      	ldrb	r3, [r3, #10]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d111      	bne.n	8003268 <Display_Handler+0x190>
    {
        HAL_Delay(100);
 8003244:	2064      	movs	r0, #100	@ 0x64
 8003246:	f001 f9dd 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'9');
 800324a:	2139      	movs	r1, #57	@ 0x39
 800324c:	2000      	movs	r0, #0
 800324e:	f7fd ff7f 	bl	8001150 <I2C_LCD_WriteChar>
        Password [i] = 9;
 8003252:	4b21      	ldr	r3, [pc, #132]	@ (80032d8 <Display_Handler+0x200>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <Display_Handler+0x204>)
 8003258:	2109      	movs	r1, #9
 800325a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 800325e:	4b1e      	ldr	r3, [pc, #120]	@ (80032d8 <Display_Handler+0x200>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	4a1c      	ldr	r2, [pc, #112]	@ (80032d8 <Display_Handler+0x200>)
 8003266:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_0] == KEY_PRESSED)
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <Display_Handler+0x1fc>)
 800326a:	7b5b      	ldrb	r3, [r3, #13]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d111      	bne.n	8003294 <Display_Handler+0x1bc>
    {
        HAL_Delay(100);
 8003270:	2064      	movs	r0, #100	@ 0x64
 8003272:	f001 f9c7 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteChar(MyI2C_LCD,'0');
 8003276:	2130      	movs	r1, #48	@ 0x30
 8003278:	2000      	movs	r0, #0
 800327a:	f7fd ff69 	bl	8001150 <I2C_LCD_WriteChar>
        Password [i] = 0;
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <Display_Handler+0x200>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <Display_Handler+0x204>)
 8003284:	2100      	movs	r1, #0
 8003286:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        i++;
 800328a:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <Display_Handler+0x200>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	4a11      	ldr	r2, [pc, #68]	@ (80032d8 <Display_Handler+0x200>)
 8003292:	6013      	str	r3, [r2, #0]
    }
    if(gu8_KeyStatesArr[KEY_F4] == KEY_PRESSED)
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <Display_Handler+0x1fc>)
 8003296:	7bdb      	ldrb	r3, [r3, #15]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d119      	bne.n	80032d0 <Display_Handler+0x1f8>
    {
        I2C_LCD_Clear(MyI2C_LCD);
 800329c:	2000      	movs	r0, #0
 800329e:	f7fd fed9 	bl	8001054 <I2C_LCD_Clear>
        memset(Password, 0, i*sizeof(Password));
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <Display_Handler+0x200>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	461a      	mov	r2, r3
 80032b2:	2100      	movs	r1, #0
 80032b4:	4809      	ldr	r0, [pc, #36]	@ (80032dc <Display_Handler+0x204>)
 80032b6:	f003 fe12 	bl	8006ede <memset>
        i = 0;
 80032ba:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <Display_Handler+0x200>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
        b = 0;
 80032c0:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <Display_Handler+0x208>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
        HAL_Delay(100);
 80032c6:	2064      	movs	r0, #100	@ 0x64
 80032c8:	f001 f99c 	bl	8004604 <HAL_Delay>
        main();
 80032cc:	f000 fa0c 	bl	80036e8 <main>
    }
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200001c8 	.word	0x200001c8
 80032d8:	200001f0 	.word	0x200001f0
 80032dc:	200001d8 	.word	0x200001d8
 80032e0:	20000200 	.word	0x20000200

080032e4 <CompareUID>:

static uchar CompareUID(uchar *scannedUID, uchar *storedUID)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
    for (uchar i = 0; i < 4; i++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
 80032f2:	e00e      	b.n	8003312 <CompareUID+0x2e>
    {
        if (scannedUID[i] != storedUID[i])
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	781a      	ldrb	r2, [r3, #0]
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	6839      	ldr	r1, [r7, #0]
 8003300:	440b      	add	r3, r1
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <CompareUID+0x28>
        {
            return 0;
 8003308:	2300      	movs	r3, #0
 800330a:	e006      	b.n	800331a <CompareUID+0x36>
    for (uchar i = 0; i < 4; i++)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	3301      	adds	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d9ed      	bls.n	80032f4 <CompareUID+0x10>
        }
    }
    return 1;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <IsSlaveCard>:

static uchar IsSlaveCard(uchar *scannedUID)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < numSlaveCards; i++)
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
 8003330:	e00f      	b.n	8003352 <IsSlaveCard+0x2e>
    {
        if (CompareUID(scannedUID, slaveCards[i]))
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4a0c      	ldr	r2, [pc, #48]	@ (8003368 <IsSlaveCard+0x44>)
 8003338:	4413      	add	r3, r2
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ffd1 	bl	80032e4 <CompareUID>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <IsSlaveCard+0x28>
        {
            return 1;
 8003348:	2301      	movs	r3, #1
 800334a:	e008      	b.n	800335e <IsSlaveCard+0x3a>
    for (uint8_t i = 0; i < numSlaveCards; i++)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	3301      	adds	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <IsSlaveCard+0x48>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3ea      	bcc.n	8003332 <IsSlaveCard+0xe>
        }
    }
    return 0;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000003c 	.word	0x2000003c
 800336c:	20000050 	.word	0x20000050

08003370 <AddSlaveCard>:

static void AddSlaveCard(uchar *newUID)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
    if (numSlaveCards < MAX_SLAVE_CARDS)
 8003378:	4b27      	ldr	r3, [pc, #156]	@ (8003418 <AddSlaveCard+0xa8>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b04      	cmp	r3, #4
 800337e:	d834      	bhi.n	80033ea <AddSlaveCard+0x7a>
    {
        for (uint8_t i = 0; i < 4; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e010      	b.n	80033a8 <AddSlaveCard+0x38>
        {
            slaveCards[numSlaveCards][i] = newUID[i];
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	441a      	add	r2, r3
 800338c:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <AddSlaveCard+0xa8>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461c      	mov	r4, r3
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	7810      	ldrb	r0, [r2, #0]
 8003396:	4921      	ldr	r1, [pc, #132]	@ (800341c <AddSlaveCard+0xac>)
 8003398:	00a2      	lsls	r2, r4, #2
 800339a:	440a      	add	r2, r1
 800339c:	4413      	add	r3, r2
 800339e:	4602      	mov	r2, r0
 80033a0:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 0; i < 4; i++)
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
 80033a4:	3301      	adds	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d9eb      	bls.n	8003386 <AddSlaveCard+0x16>
        }
        numSlaveCards++;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <AddSlaveCard+0xa8>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <AddSlaveCard+0xa8>)
 80033b8:	701a      	strb	r2, [r3, #0]
        I2C_LCD_Clear(MyI2C_LCD);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fd fe4a 	bl	8001054 <I2C_LCD_Clear>
        I2C_LCD_WriteString(MyI2C_LCD, "Them Thanh Cong");
 80033c0:	4917      	ldr	r1, [pc, #92]	@ (8003420 <AddSlaveCard+0xb0>)
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd fed6 	bl	8001174 <I2C_LCD_WriteString>
        Tone(659, 200); // E5
 80033c8:	21c8      	movs	r1, #200	@ 0xc8
 80033ca:	f240 2093 	movw	r0, #659	@ 0x293
 80033ce:	f000 f963 	bl	8003698 <Tone>
        Tone(784, 200); // G5
 80033d2:	21c8      	movs	r1, #200	@ 0xc8
 80033d4:	f44f 7044 	mov.w	r0, #784	@ 0x310
 80033d8:	f000 f95e 	bl	8003698 <Tone>
        noTone();
 80033dc:	f000 f97a 	bl	80036d4 <noTone>
        HAL_Delay(1000);
 80033e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033e4:	f001 f90e 	bl	8004604 <HAL_Delay>
        I2C_LCD_WriteString(MyI2C_LCD, "Danh Sach Day");
        Tone(392, 500); // G4
        noTone();
        HAL_Delay(1000);
    }
}
 80033e8:	e012      	b.n	8003410 <AddSlaveCard+0xa0>
        I2C_LCD_Clear(MyI2C_LCD);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fd fe32 	bl	8001054 <I2C_LCD_Clear>
        I2C_LCD_WriteString(MyI2C_LCD, "Danh Sach Day");
 80033f0:	490c      	ldr	r1, [pc, #48]	@ (8003424 <AddSlaveCard+0xb4>)
 80033f2:	2000      	movs	r0, #0
 80033f4:	f7fd febe 	bl	8001174 <I2C_LCD_WriteString>
        Tone(392, 500); // G4
 80033f8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80033fc:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8003400:	f000 f94a 	bl	8003698 <Tone>
        noTone();
 8003404:	f000 f966 	bl	80036d4 <noTone>
        HAL_Delay(1000);
 8003408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800340c:	f001 f8fa 	bl	8004604 <HAL_Delay>
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	20000050 	.word	0x20000050
 800341c:	2000003c 	.word	0x2000003c
 8003420:	08006f98 	.word	0x08006f98
 8003424:	08006fa8 	.word	0x08006fa8

08003428 <RFID_ProcessCard>:

static void RFID_ProcessCard(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
    uchar status;
    uchar tagType[2];
    uchar serNum[5];

    if (addCardMode)
 800342e:	4b8f      	ldr	r3, [pc, #572]	@ (800366c <RFID_ProcessCard+0x244>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 80ad 	beq.w	8003592 <RFID_ProcessCard+0x16a>
    {
        // Step 1: Prompt for master card
        if (!masterAuthenticated)
 8003438:	4b8d      	ldr	r3, [pc, #564]	@ (8003670 <RFID_ProcessCard+0x248>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d156      	bne.n	80034ee <RFID_ProcessCard+0xc6>
        {
            I2C_LCD_Clear(MyI2C_LCD);
 8003440:	2000      	movs	r0, #0
 8003442:	f7fd fe07 	bl	8001054 <I2C_LCD_Clear>
            I2C_LCD_WriteString(MyI2C_LCD, "Quet Master Card");
 8003446:	498b      	ldr	r1, [pc, #556]	@ (8003674 <RFID_ProcessCard+0x24c>)
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd fe93 	bl	8001174 <I2C_LCD_WriteString>
            status = MFRC522_Request(PICC_REQIDL, tagType);
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	4619      	mov	r1, r3
 8003454:	2026      	movs	r0, #38	@ 0x26
 8003456:	f000 fe00 	bl	800405a <MFRC522_Request>
 800345a:	4603      	mov	r3, r0
 800345c:	73fb      	strb	r3, [r7, #15]
            if (status == MI_OK)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f040 80ff 	bne.w	8003664 <RFID_ProcessCard+0x23c>
            {
                status = MFRC522_Anticoll(serNum);
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fe1b 	bl	80040a4 <MFRC522_Anticoll>
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]
                if (status == MI_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 80f5 	bne.w	8003664 <RFID_ProcessCard+0x23c>
                {
                    if (CompareUID(serNum, masterCard))
 800347a:	1d3b      	adds	r3, r7, #4
 800347c:	497e      	ldr	r1, [pc, #504]	@ (8003678 <RFID_ProcessCard+0x250>)
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ff30 	bl	80032e4 <CompareUID>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d014      	beq.n	80034b4 <RFID_ProcessCard+0x8c>
                    {
                        masterAuthenticated = 1;
 800348a:	4b79      	ldr	r3, [pc, #484]	@ (8003670 <RFID_ProcessCard+0x248>)
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
                        I2C_LCD_Clear(MyI2C_LCD);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd fddf 	bl	8001054 <I2C_LCD_Clear>
                        I2C_LCD_WriteString(MyI2C_LCD, "Quet The Moi");
 8003496:	4979      	ldr	r1, [pc, #484]	@ (800367c <RFID_ProcessCard+0x254>)
 8003498:	2000      	movs	r0, #0
 800349a:	f7fd fe6b 	bl	8001174 <I2C_LCD_WriteString>
                        Tone(523, 200); // C5
 800349e:	21c8      	movs	r1, #200	@ 0xc8
 80034a0:	f240 200b 	movw	r0, #523	@ 0x20b
 80034a4:	f000 f8f8 	bl	8003698 <Tone>
                        noTone();
 80034a8:	f000 f914 	bl	80036d4 <noTone>
                        HAL_Delay(200);
 80034ac:	20c8      	movs	r0, #200	@ 0xc8
 80034ae:	f001 f8a9 	bl	8004604 <HAL_Delay>
 80034b2:	e019      	b.n	80034e8 <RFID_ProcessCard+0xc0>
                    }
                    else
                    {
                        I2C_LCD_Clear(MyI2C_LCD);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fd fdcd 	bl	8001054 <I2C_LCD_Clear>
                        I2C_LCD_WriteString(MyI2C_LCD, "Sai Master Card");
 80034ba:	4971      	ldr	r1, [pc, #452]	@ (8003680 <RFID_ProcessCard+0x258>)
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fd fe59 	bl	8001174 <I2C_LCD_WriteString>
                        Tone(392, 500); // G4
 80034c2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80034c6:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 80034ca:	f000 f8e5 	bl	8003698 <Tone>
                        noTone();
 80034ce:	f000 f901 	bl	80036d4 <noTone>
                        HAL_Delay(1000);
 80034d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80034d6:	f001 f895 	bl	8004604 <HAL_Delay>
                        I2C_LCD_Clear(MyI2C_LCD);
 80034da:	2000      	movs	r0, #0
 80034dc:	f7fd fdba 	bl	8001054 <I2C_LCD_Clear>
                        I2C_LCD_WriteString(MyI2C_LCD, "Quet Master Card");
 80034e0:	4964      	ldr	r1, [pc, #400]	@ (8003674 <RFID_ProcessCard+0x24c>)
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7fd fe46 	bl	8001174 <I2C_LCD_WriteString>
                    }
                    MFRC522_Halt();
 80034e8:	f000 fe62 	bl	80041b0 <MFRC522_Halt>
                }
                MFRC522_Halt();
            }
        }
    }
}
 80034ec:	e0ba      	b.n	8003664 <RFID_ProcessCard+0x23c>
            status = MFRC522_Request(PICC_REQIDL, tagType);
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	4619      	mov	r1, r3
 80034f4:	2026      	movs	r0, #38	@ 0x26
 80034f6:	f000 fdb0 	bl	800405a <MFRC522_Request>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]
            if (status == MI_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	f040 80af 	bne.w	8003664 <RFID_ProcessCard+0x23c>
                status = MFRC522_Anticoll(serNum);
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fdcb 	bl	80040a4 <MFRC522_Anticoll>
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]
                if (status == MI_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 80a5 	bne.w	8003664 <RFID_ProcessCard+0x23c>
                    if (!IsSlaveCard(serNum) && !CompareUID(serNum, masterCard))
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff01 	bl	8003324 <IsSlaveCard>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10c      	bne.n	8003542 <RFID_ProcessCard+0x11a>
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	4953      	ldr	r1, [pc, #332]	@ (8003678 <RFID_ProcessCard+0x250>)
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fed9 	bl	80032e4 <CompareUID>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <RFID_ProcessCard+0x11a>
                        AddSlaveCard(serNum);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff18 	bl	8003370 <AddSlaveCard>
 8003540:	e012      	b.n	8003568 <RFID_ProcessCard+0x140>
                        I2C_LCD_Clear(MyI2C_LCD);
 8003542:	2000      	movs	r0, #0
 8003544:	f7fd fd86 	bl	8001054 <I2C_LCD_Clear>
                        I2C_LCD_WriteString(MyI2C_LCD, "The Da Ton Tai");
 8003548:	494e      	ldr	r1, [pc, #312]	@ (8003684 <RFID_ProcessCard+0x25c>)
 800354a:	2000      	movs	r0, #0
 800354c:	f7fd fe12 	bl	8001174 <I2C_LCD_WriteString>
                        Tone(392, 500); // G4
 8003550:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003554:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8003558:	f000 f89e 	bl	8003698 <Tone>
                        noTone();
 800355c:	f000 f8ba 	bl	80036d4 <noTone>
                        HAL_Delay(1000);
 8003560:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003564:	f001 f84e 	bl	8004604 <HAL_Delay>
                    addCardMode = 0;
 8003568:	4b40      	ldr	r3, [pc, #256]	@ (800366c <RFID_ProcessCard+0x244>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
                    masterAuthenticated = 0;
 800356e:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <RFID_ProcessCard+0x248>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
                    I2C_LCD_Clear(MyI2C_LCD);
 8003574:	2000      	movs	r0, #0
 8003576:	f7fd fd6d 	bl	8001054 <I2C_LCD_Clear>
                    I2C_LCD_WriteString(MyI2C_LCD, "Nhap mat khau:");
 800357a:	4943      	ldr	r1, [pc, #268]	@ (8003688 <RFID_ProcessCard+0x260>)
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd fdf9 	bl	8001174 <I2C_LCD_WriteString>
                    I2C_LCD_SetCursor(MyI2C_LCD, 1, 1);
 8003582:	2201      	movs	r2, #1
 8003584:	2101      	movs	r1, #1
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd fda0 	bl	80010cc <I2C_LCD_SetCursor>
                    MFRC522_Halt();
 800358c:	f000 fe10 	bl	80041b0 <MFRC522_Halt>
}
 8003590:	e068      	b.n	8003664 <RFID_ProcessCard+0x23c>
        status = MFRC522_Request(PICC_REQIDL, tagType);
 8003592:	f107 030c 	add.w	r3, r7, #12
 8003596:	4619      	mov	r1, r3
 8003598:	2026      	movs	r0, #38	@ 0x26
 800359a:	f000 fd5e 	bl	800405a <MFRC522_Request>
 800359e:	4603      	mov	r3, r0
 80035a0:	73fb      	strb	r3, [r7, #15]
        if (status == MI_OK)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d15d      	bne.n	8003664 <RFID_ProcessCard+0x23c>
            status = MFRC522_Anticoll(serNum);
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fd7a 	bl	80040a4 <MFRC522_Anticoll>
 80035b0:	4603      	mov	r3, r0
 80035b2:	73fb      	strb	r3, [r7, #15]
            if (status == MI_OK)
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d154      	bne.n	8003664 <RFID_ProcessCard+0x23c>
                if (IsSlaveCard(serNum))
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff feb1 	bl	8003324 <IsSlaveCard>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d02c      	beq.n	8003622 <RFID_ProcessCard+0x1fa>
                    I2C_LCD_Clear(MyI2C_LCD);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd fd43 	bl	8001054 <I2C_LCD_Clear>
                    I2C_LCD_WriteString(MyI2C_LCD, "Welcome");
 80035ce:	492f      	ldr	r1, [pc, #188]	@ (800368c <RFID_ProcessCard+0x264>)
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fd fdcf 	bl	8001174 <I2C_LCD_WriteString>
                    SERVO_MoveTo(SERVO_Motor1, 90);
 80035d6:	492e      	ldr	r1, [pc, #184]	@ (8003690 <RFID_ProcessCard+0x268>)
 80035d8:	2000      	movs	r0, #0
 80035da:	f7ff fb0d 	bl	8002bf8 <SERVO_MoveTo>
                    Tone(659, 200); // E5
 80035de:	21c8      	movs	r1, #200	@ 0xc8
 80035e0:	f240 2093 	movw	r0, #659	@ 0x293
 80035e4:	f000 f858 	bl	8003698 <Tone>
                    Tone(784, 200); // G5
 80035e8:	21c8      	movs	r1, #200	@ 0xc8
 80035ea:	f44f 7044 	mov.w	r0, #784	@ 0x310
 80035ee:	f000 f853 	bl	8003698 <Tone>
                    noTone();
 80035f2:	f000 f86f 	bl	80036d4 <noTone>
                    HAL_Delay(1500);
 80035f6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80035fa:	f001 f803 	bl	8004604 <HAL_Delay>
                    SERVO_MoveTo(SERVO_Motor1, 0);
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	2000      	movs	r0, #0
 8003604:	f7ff faf8 	bl	8002bf8 <SERVO_MoveTo>
                    I2C_LCD_Clear(MyI2C_LCD);
 8003608:	2000      	movs	r0, #0
 800360a:	f7fd fd23 	bl	8001054 <I2C_LCD_Clear>
                    I2C_LCD_WriteString(MyI2C_LCD, "Nhap mat khau:");
 800360e:	491e      	ldr	r1, [pc, #120]	@ (8003688 <RFID_ProcessCard+0x260>)
 8003610:	2000      	movs	r0, #0
 8003612:	f7fd fdaf 	bl	8001174 <I2C_LCD_WriteString>
                    I2C_LCD_SetCursor(MyI2C_LCD, 1, 1);
 8003616:	2201      	movs	r2, #1
 8003618:	2101      	movs	r1, #1
 800361a:	2000      	movs	r0, #0
 800361c:	f7fd fd56 	bl	80010cc <I2C_LCD_SetCursor>
 8003620:	e01e      	b.n	8003660 <RFID_ProcessCard+0x238>
                    I2C_LCD_Clear(MyI2C_LCD);
 8003622:	2000      	movs	r0, #0
 8003624:	f7fd fd16 	bl	8001054 <I2C_LCD_Clear>
                    I2C_LCD_WriteString(MyI2C_LCD, "Sai The");
 8003628:	491a      	ldr	r1, [pc, #104]	@ (8003694 <RFID_ProcessCard+0x26c>)
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd fda2 	bl	8001174 <I2C_LCD_WriteString>
                    Tone(392, 500); // G4
 8003630:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003634:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8003638:	f000 f82e 	bl	8003698 <Tone>
                    noTone();
 800363c:	f000 f84a 	bl	80036d4 <noTone>
                    HAL_Delay(1000);
 8003640:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003644:	f000 ffde 	bl	8004604 <HAL_Delay>
                    I2C_LCD_Clear(MyI2C_LCD);
 8003648:	2000      	movs	r0, #0
 800364a:	f7fd fd03 	bl	8001054 <I2C_LCD_Clear>
                    I2C_LCD_WriteString(MyI2C_LCD, "Nhap mat khau:");
 800364e:	490e      	ldr	r1, [pc, #56]	@ (8003688 <RFID_ProcessCard+0x260>)
 8003650:	2000      	movs	r0, #0
 8003652:	f7fd fd8f 	bl	8001174 <I2C_LCD_WriteString>
                    I2C_LCD_SetCursor(MyI2C_LCD, 1, 1);
 8003656:	2201      	movs	r2, #1
 8003658:	2101      	movs	r1, #1
 800365a:	2000      	movs	r0, #0
 800365c:	f7fd fd36 	bl	80010cc <I2C_LCD_SetCursor>
                MFRC522_Halt();
 8003660:	f000 fda6 	bl	80041b0 <MFRC522_Halt>
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000204 	.word	0x20000204
 8003670:	20000205 	.word	0x20000205
 8003674:	08006fb8 	.word	0x08006fb8
 8003678:	20000038 	.word	0x20000038
 800367c:	08006fcc 	.word	0x08006fcc
 8003680:	08006fdc 	.word	0x08006fdc
 8003684:	08006fec 	.word	0x08006fec
 8003688:	08006ffc 	.word	0x08006ffc
 800368c:	08006f60 	.word	0x08006f60
 8003690:	42b40000 	.word	0x42b40000
 8003694:	0800700c 	.word	0x0800700c

08003698 <Tone>:

static void Tone(uint32_t Frequency, uint32_t Duration)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    TIM2->ARR = (1000000UL / Frequency) - 1; // Set The PWM Frequency
 80036a2:	4a0b      	ldr	r2, [pc, #44]	@ (80036d0 <Tone+0x38>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036ae:	3b01      	subs	r3, #1
 80036b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    TIM2->CCR3 = (TIM2->ARR >> 1); // Set Duty Cycle 50%
 80036b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	63d3      	str	r3, [r2, #60]	@ 0x3c
    HAL_Delay(Duration); // Wait For The Tone Duration
 80036c0:	6838      	ldr	r0, [r7, #0]
 80036c2:	f000 ff9f 	bl	8004604 <HAL_Delay>
}
 80036c6:	bf00      	nop
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	000f4240 	.word	0x000f4240

080036d4 <noTone>:

static void noTone()
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
    TIM2->CCR3 = 0; // Set Duty Cycle 0%
 80036d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036dc:	2200      	movs	r2, #0
 80036de:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bc80      	pop	{r7}
 80036e6:	4770      	bx	lr

080036e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ec:	f000 ff28 	bl	8004540 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f0:	f000 f8b8 	bl	8003864 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f4:	f000 fa82 	bl	8003bfc <MX_GPIO_Init>
  MX_I2C1_Init();
 80036f8:	f000 f8fa 	bl	80038f0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80036fc:	f000 f95c 	bl	80039b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003700:	f000 f9fc 	bl	8003afc <MX_TIM2_Init>
  MX_SPI2_Init();
 8003704:	f000 f922 	bl	800394c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8003708:	2108      	movs	r1, #8
 800370a:	4849      	ldr	r0, [pc, #292]	@ (8003830 <main+0x148>)
 800370c:	f002 fe5c 	bl	80063c8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003710:	2100      	movs	r1, #0
 8003712:	4848      	ldr	r0, [pc, #288]	@ (8003834 <main+0x14c>)
 8003714:	f002 fe58 	bl	80063c8 <HAL_TIM_PWM_Start>
    SERVO_Init(SERVO_Motor1);
 8003718:	2000      	movs	r0, #0
 800371a:	f7ff f851 	bl	80027c0 <SERVO_Init>
    I2C_LCD_Init(MyI2C_LCD);
 800371e:	2000      	movs	r0, #0
 8003720:	f7fd fbe6 	bl	8000ef0 <I2C_LCD_Init>
    I2C_LCD_Clear(MyI2C_LCD);
 8003724:	2000      	movs	r0, #0
 8003726:	f7fd fc95 	bl	8001054 <I2C_LCD_Clear>
    I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800372a:	2200      	movs	r2, #0
 800372c:	2100      	movs	r1, #0
 800372e:	2000      	movs	r0, #0
 8003730:	f7fd fccc 	bl	80010cc <I2C_LCD_SetCursor>
    if (d == 0){
 8003734:	4b40      	ldr	r3, [pc, #256]	@ (8003838 <main+0x150>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <main+0x68>
        I2C_LCD_Backlight(MyI2C_LCD);
 800373c:	2000      	movs	r0, #0
 800373e:	f7fd fd33 	bl	80011a8 <I2C_LCD_Backlight>
        I2C_LCD_Display(MyI2C_LCD);
 8003742:	2000      	movs	r0, #0
 8003744:	f7fd fd46 	bl	80011d4 <I2C_LCD_Display>
        I2C_LCD_WriteString(MyI2C_LCD, "Nhap mat khau:");
 8003748:	493c      	ldr	r1, [pc, #240]	@ (800383c <main+0x154>)
 800374a:	2000      	movs	r0, #0
 800374c:	f7fd fd12 	bl	8001174 <I2C_LCD_WriteString>
    }
    if (d == 1){
 8003750:	4b39      	ldr	r3, [pc, #228]	@ (8003838 <main+0x150>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d103      	bne.n	8003760 <main+0x78>
        I2C_LCD_WriteString(MyI2C_LCD, "Mat khau moi:");
 8003758:	4939      	ldr	r1, [pc, #228]	@ (8003840 <main+0x158>)
 800375a:	2000      	movs	r0, #0
 800375c:	f7fd fd0a 	bl	8001174 <I2C_LCD_WriteString>
    }
    I2C_LCD_SetCursor(MyI2C_LCD, 1, 1);
 8003760:	2201      	movs	r2, #1
 8003762:	2101      	movs	r1, #1
 8003764:	2000      	movs	r0, #0
 8003766:	f7fd fcb1 	bl	80010cc <I2C_LCD_SetCursor>
    KEYPAD_Init(0, gu8_KeyStatesArr);
 800376a:	4936      	ldr	r1, [pc, #216]	@ (8003844 <main+0x15c>)
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd fd53 	bl	8001218 <KEYPAD_Init>
    MFRC522_Init(); // Initialize RFID module
 8003772:	f000 fb7b 	bl	8003e6c <MFRC522_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        if(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED)
 8003776:	4b33      	ldr	r3, [pc, #204]	@ (8003844 <main+0x15c>)
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d121      	bne.n	80037c2 <main+0xda>
        {
            if(gu8_KeyStatesArr[KEY_F2] == KEY_PRESSED){
 800377e:	4b31      	ldr	r3, [pc, #196]	@ (8003844 <main+0x15c>)
 8003780:	79db      	ldrb	r3, [r3, #7]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d11d      	bne.n	80037c2 <main+0xda>
                b = 1;
 8003786:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <main+0x160>)
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
                memset(Password, 0, i*sizeof(Password));
 800378c:	4b2f      	ldr	r3, [pc, #188]	@ (800384c <main+0x164>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	461a      	mov	r2, r3
 800379c:	2100      	movs	r1, #0
 800379e:	482c      	ldr	r0, [pc, #176]	@ (8003850 <main+0x168>)
 80037a0:	f003 fb9d 	bl	8006ede <memset>
                I2C_LCD_Clear(MyI2C_LCD);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7fd fc55 	bl	8001054 <I2C_LCD_Clear>
                I2C_LCD_WriteString(MyI2C_LCD, "Mat khau cu:");
 80037aa:	492a      	ldr	r1, [pc, #168]	@ (8003854 <main+0x16c>)
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fd fce1 	bl	8001174 <I2C_LCD_WriteString>
                I2C_LCD_SetCursor(MyI2C_LCD, 1, 1);
 80037b2:	2201      	movs	r2, #1
 80037b4:	2101      	movs	r1, #1
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7fd fc88 	bl	80010cc <I2C_LCD_SetCursor>
                HAL_Delay(200); // Debounce
 80037bc:	20c8      	movs	r0, #200	@ 0xc8
 80037be:	f000 ff21 	bl	8004604 <HAL_Delay>
            }
        }
        if(gu8_KeyStatesArr[KEY_F3] == KEY_PRESSED)
 80037c2:	4b20      	ldr	r3, [pc, #128]	@ (8003844 <main+0x15c>)
 80037c4:	7adb      	ldrb	r3, [r3, #11]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10f      	bne.n	80037ea <main+0x102>
        {
            addCardMode = 1;
 80037ca:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <main+0x170>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
            masterAuthenticated = 0;
 80037d0:	4b22      	ldr	r3, [pc, #136]	@ (800385c <main+0x174>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
            I2C_LCD_Clear(MyI2C_LCD);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fd fc3c 	bl	8001054 <I2C_LCD_Clear>
            I2C_LCD_WriteString(MyI2C_LCD, "Quet Master Card");
 80037dc:	4920      	ldr	r1, [pc, #128]	@ (8003860 <main+0x178>)
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd fcc8 	bl	8001174 <I2C_LCD_WriteString>
            HAL_Delay(200); // Debounce
 80037e4:	20c8      	movs	r0, #200	@ 0xc8
 80037e6:	f000 ff0d 	bl	8004604 <HAL_Delay>

        }

        KEYPAD_Scan(0);
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fd febc 	bl	8001568 <KEYPAD_Scan>
        HAL_Delay(10);
 80037f0:	200a      	movs	r0, #10
 80037f2:	f000 ff07 	bl	8004604 <HAL_Delay>
        if (d == 0 && !addCardMode){
 80037f6:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <main+0x150>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <main+0x130>
 80037fe:	4b16      	ldr	r3, [pc, #88]	@ (8003858 <main+0x170>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d108      	bne.n	8003818 <main+0x130>
            Display_Handler();
 8003806:	f7ff fc67 	bl	80030d8 <Display_Handler>
            HAL_Delay(10);
 800380a:	200a      	movs	r0, #10
 800380c:	f000 fefa 	bl	8004604 <HAL_Delay>
            Password_Check();
 8003810:	f7ff fa42 	bl	8002c98 <Password_Check>
            Notifications();
 8003814:	f7ff fa74 	bl	8002d00 <Notifications>
        }
        if (d == 1)
 8003818:	4b07      	ldr	r3, [pc, #28]	@ (8003838 <main+0x150>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d104      	bne.n	800382a <main+0x142>
        {
            Set_Password();
 8003820:	f7ff fb6c 	bl	8002efc <Set_Password>
            HAL_Delay(100);
 8003824:	2064      	movs	r0, #100	@ 0x64
 8003826:	f000 feed 	bl	8004604 <HAL_Delay>
        }
        RFID_ProcessCard(); // Process RFID cards
 800382a:	f7ff fdfd 	bl	8003428 <RFID_ProcessCard>
        if(gu8_KeyStatesArr[KEY_F1] == KEY_PRESSED)
 800382e:	e7a2      	b.n	8003776 <main+0x8e>
 8003830:	2000017c 	.word	0x2000017c
 8003834:	20000134 	.word	0x20000134
 8003838:	200001fc 	.word	0x200001fc
 800383c:	08006ffc 	.word	0x08006ffc
 8003840:	08007014 	.word	0x08007014
 8003844:	200001c8 	.word	0x200001c8
 8003848:	20000200 	.word	0x20000200
 800384c:	200001f0 	.word	0x200001f0
 8003850:	200001d8 	.word	0x200001d8
 8003854:	08007024 	.word	0x08007024
 8003858:	20000204 	.word	0x20000204
 800385c:	20000205 	.word	0x20000205
 8003860:	08006fb8 	.word	0x08006fb8

08003864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b090      	sub	sp, #64	@ 0x40
 8003868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800386a:	f107 0318 	add.w	r3, r7, #24
 800386e:	2228      	movs	r2, #40	@ 0x28
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f003 fb33 	bl	8006ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003878:	1d3b      	adds	r3, r7, #4
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
 8003880:	609a      	str	r2, [r3, #8]
 8003882:	60da      	str	r2, [r3, #12]
 8003884:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800388a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800388e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003890:	2300      	movs	r3, #0
 8003892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003894:	2301      	movs	r3, #1
 8003896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003898:	2302      	movs	r3, #2
 800389a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800389c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038a2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a8:	f107 0318 	add.w	r3, r7, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 fe01 	bl	80054b4 <HAL_RCC_OscConfig>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80038b8:	f000 fa1a 	bl	8003cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038bc:	230f      	movs	r3, #15
 80038be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c0:	2302      	movs	r3, #2
 80038c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038d2:	1d3b      	adds	r3, r7, #4
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 f86e 	bl	80059b8 <HAL_RCC_ClockConfig>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80038e2:	f000 fa05 	bl	8003cf0 <Error_Handler>
  }
}
 80038e6:	bf00      	nop
 80038e8:	3740      	adds	r7, #64	@ 0x40
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80038f4:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <MX_I2C1_Init+0x50>)
 80038f6:	4a13      	ldr	r2, [pc, #76]	@ (8003944 <MX_I2C1_Init+0x54>)
 80038f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80038fa:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <MX_I2C1_Init+0x50>)
 80038fc:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <MX_I2C1_Init+0x58>)
 80038fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <MX_I2C1_Init+0x50>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003906:	4b0e      	ldr	r3, [pc, #56]	@ (8003940 <MX_I2C1_Init+0x50>)
 8003908:	2200      	movs	r2, #0
 800390a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <MX_I2C1_Init+0x50>)
 800390e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003914:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <MX_I2C1_Init+0x50>)
 8003916:	2200      	movs	r2, #0
 8003918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <MX_I2C1_Init+0x50>)
 800391c:	2200      	movs	r2, #0
 800391e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <MX_I2C1_Init+0x50>)
 8003922:	2200      	movs	r2, #0
 8003924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <MX_I2C1_Init+0x50>)
 8003928:	2200      	movs	r2, #0
 800392a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800392c:	4804      	ldr	r0, [pc, #16]	@ (8003940 <MX_I2C1_Init+0x50>)
 800392e:	f001 f925 	bl	8004b7c <HAL_I2C_Init>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003938:	f000 f9da 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20000088 	.word	0x20000088
 8003944:	40005400 	.word	0x40005400
 8003948:	000186a0 	.word	0x000186a0

0800394c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003950:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003952:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <MX_SPI2_Init+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003956:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003958:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800395c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800395e:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003964:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003966:	2200      	movs	r2, #0
 8003968:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800396a:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <MX_SPI2_Init+0x64>)
 800396c:	2200      	movs	r2, #0
 800396e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003970:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003972:	2200      	movs	r2, #0
 8003974:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003976:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800397c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003980:	2210      	movs	r2, #16
 8003982:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003986:	2200      	movs	r2, #0
 8003988:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800398a:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <MX_SPI2_Init+0x64>)
 800398c:	2200      	movs	r2, #0
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003990:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003992:	2200      	movs	r2, #0
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <MX_SPI2_Init+0x64>)
 8003998:	220a      	movs	r2, #10
 800399a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800399c:	4804      	ldr	r0, [pc, #16]	@ (80039b0 <MX_SPI2_Init+0x64>)
 800399e:	f002 f985 	bl	8005cac <HAL_SPI_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80039a8:	f000 f9a2 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200000dc 	.word	0x200000dc
 80039b4:	40003800 	.word	0x40003800

080039b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b096      	sub	sp, #88	@ 0x58
 80039bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	615a      	str	r2, [r3, #20]
 80039e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039ea:	1d3b      	adds	r3, r7, #4
 80039ec:	2220      	movs	r2, #32
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 fa74 	bl	8006ede <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039f6:	4b3f      	ldr	r3, [pc, #252]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 80039f8:	4a3f      	ldr	r2, [pc, #252]	@ (8003af8 <MX_TIM1_Init+0x140>)
 80039fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80039fc:	4b3d      	ldr	r3, [pc, #244]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a02:	4b3c      	ldr	r3, [pc, #240]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003a08:	4b3a      	ldr	r3, [pc, #232]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a10:	4b38      	ldr	r3, [pc, #224]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a16:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a1c:	4b35      	ldr	r3, [pc, #212]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a22:	4834      	ldr	r0, [pc, #208]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a24:	f002 fc29 	bl	800627a <HAL_TIM_Base_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003a2e:	f000 f95f 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a36:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a38:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	482d      	ldr	r0, [pc, #180]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a40:	f002 fe26 	bl	8006690 <HAL_TIM_ConfigClockSource>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003a4a:	f000 f951 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a4e:	4829      	ldr	r0, [pc, #164]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a50:	f002 fc62 	bl	8006318 <HAL_TIM_PWM_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003a5a:	f000 f949 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4821      	ldr	r0, [pc, #132]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003a6e:	f003 f987 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003a78:	f000 f93a 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a7c:	2360      	movs	r3, #96	@ 0x60
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a84:	2300      	movs	r3, #0
 8003a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4814      	ldr	r0, [pc, #80]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003aa4:	f002 fd32 	bl	800650c <HAL_TIM_PWM_ConfigChannel>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8003aae:	f000 f91f 	bl	8003cf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ad0:	1d3b      	adds	r3, r7, #4
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4807      	ldr	r0, [pc, #28]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003ad6:	f003 f9b1 	bl	8006e3c <HAL_TIMEx_ConfigBreakDeadTime>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8003ae0:	f000 f906 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003ae4:	4803      	ldr	r0, [pc, #12]	@ (8003af4 <MX_TIM1_Init+0x13c>)
 8003ae6:	f000 fc6b 	bl	80043c0 <HAL_TIM_MspPostInit>

}
 8003aea:	bf00      	nop
 8003aec:	3758      	adds	r7, #88	@ 0x58
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000134 	.word	0x20000134
 8003af8:	40012c00 	.word	0x40012c00

08003afc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	@ 0x38
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b10:	f107 0320 	add.w	r3, r7, #32
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
 8003b28:	615a      	str	r2, [r3, #20]
 8003b2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b2c:	4b32      	ldr	r3, [pc, #200]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003b34:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b36:	2247      	movs	r2, #71	@ 0x47
 8003b38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003b40:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b48:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b50:	2280      	movs	r2, #128	@ 0x80
 8003b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b54:	4828      	ldr	r0, [pc, #160]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b56:	f002 fb90 	bl	800627a <HAL_TIM_Base_Init>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003b60:	f000 f8c6 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4821      	ldr	r0, [pc, #132]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b72:	f002 fd8d 	bl	8006690 <HAL_TIM_ConfigClockSource>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003b7c:	f000 f8b8 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b80:	481d      	ldr	r0, [pc, #116]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003b82:	f002 fbc9 	bl	8006318 <HAL_TIM_PWM_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003b8c:	f000 f8b0 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b98:	f107 0320 	add.w	r3, r7, #32
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4816      	ldr	r0, [pc, #88]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003ba0:	f003 f8ee 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003baa:	f000 f8a1 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bae:	2360      	movs	r3, #96	@ 0x60
 8003bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	480c      	ldr	r0, [pc, #48]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003bc6:	f002 fca1 	bl	800650c <HAL_TIM_PWM_ConfigChannel>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003bd0:	f000 f88e 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	220c      	movs	r2, #12
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4807      	ldr	r0, [pc, #28]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003bdc:	f002 fc96 	bl	800650c <HAL_TIM_PWM_ConfigChannel>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8003be6:	f000 f883 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003bea:	4803      	ldr	r0, [pc, #12]	@ (8003bf8 <MX_TIM2_Init+0xfc>)
 8003bec:	f000 fbe8 	bl	80043c0 <HAL_TIM_MspPostInit>

}
 8003bf0:	bf00      	nop
 8003bf2:	3738      	adds	r7, #56	@ 0x38
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000017c 	.word	0x2000017c

08003bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	f107 0310 	add.w	r3, r7, #16
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c10:	4b34      	ldr	r3, [pc, #208]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c16:	f043 0320 	orr.w	r3, r3, #32
 8003c1a:	6193      	str	r3, [r2, #24]
 8003c1c:	4b31      	ldr	r3, [pc, #196]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c28:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	6193      	str	r3, [r2, #24]
 8003c34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c40:	4b28      	ldr	r3, [pc, #160]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4a27      	ldr	r2, [pc, #156]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c46:	f043 0308 	orr.w	r3, r3, #8
 8003c4a:	6193      	str	r3, [r2, #24]
 8003c4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ce4 <MX_GPIO_Init+0xe8>)
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	21f0      	movs	r1, #240	@ 0xf0
 8003c5c:	4822      	ldr	r0, [pc, #136]	@ (8003ce8 <MX_GPIO_Init+0xec>)
 8003c5e:	f000 ff74 	bl	8004b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_RESET);
 8003c62:	2200      	movs	r2, #0
 8003c64:	f241 0101 	movw	r1, #4097	@ 0x1001
 8003c68:	4820      	ldr	r0, [pc, #128]	@ (8003cec <MX_GPIO_Init+0xf0>)
 8003c6a:	f000 ff6e 	bl	8004b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003c6e:	230f      	movs	r3, #15
 8003c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003c76:	2302      	movs	r3, #2
 8003c78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7a:	f107 0310 	add.w	r3, r7, #16
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4819      	ldr	r0, [pc, #100]	@ (8003ce8 <MX_GPIO_Init+0xec>)
 8003c82:	f000 fdc7 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c86:	23f0      	movs	r3, #240	@ 0xf0
 8003c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c92:	2302      	movs	r3, #2
 8003c94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c96:	f107 0310 	add.w	r3, r7, #16
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4812      	ldr	r0, [pc, #72]	@ (8003ce8 <MX_GPIO_Init+0xec>)
 8003c9e:	f000 fdb9 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb2:	f107 0310 	add.w	r3, r7, #16
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	480c      	ldr	r0, [pc, #48]	@ (8003cec <MX_GPIO_Init+0xf0>)
 8003cba:	f000 fdab 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd0:	f107 0310 	add.w	r3, r7, #16
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4805      	ldr	r0, [pc, #20]	@ (8003cec <MX_GPIO_Init+0xf0>)
 8003cd8:	f000 fd9c 	bl	8004814 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003cdc:	bf00      	nop
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010800 	.word	0x40010800
 8003cec:	40010c00 	.word	0x40010c00

08003cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf4:	b672      	cpsid	i
}
 8003cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <Error_Handler+0x8>

08003cfc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8003d06:	f107 020f 	add.w	r2, r7, #15
 8003d0a:	1df9      	adds	r1, r7, #7
 8003d0c:	2364      	movs	r3, #100	@ 0x64
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2301      	movs	r3, #1
 8003d12:	4804      	ldr	r0, [pc, #16]	@ (8003d24 <RC522_SPI_Transfer+0x28>)
 8003d14:	f002 f84e 	bl	8005db4 <HAL_SPI_TransmitReceive>

	return rx_data;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200000dc 	.word	0x200000dc

08003d28 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	460a      	mov	r2, r1
 8003d32:	71fb      	strb	r3, [r7, #7]
 8003d34:	4613      	mov	r3, r2
 8003d36:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d3e:	480d      	ldr	r0, [pc, #52]	@ (8003d74 <Write_MFRC522+0x4c>)
 8003d40:	f000 ff03 	bl	8004b4a <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff ffd3 	bl	8003cfc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8003d56:	79bb      	ldrb	r3, [r7, #6]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff ffcf 	bl	8003cfc <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d64:	4803      	ldr	r0, [pc, #12]	@ (8003d74 <Write_MFRC522+0x4c>)
 8003d66:	f000 fef0 	bl	8004b4a <HAL_GPIO_WritePin>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40010c00 	.word	0x40010c00

08003d78 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8003d82:	2200      	movs	r2, #0
 8003d84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d88:	4810      	ldr	r0, [pc, #64]	@ (8003dcc <Read_MFRC522+0x54>)
 8003d8a:	f000 fede 	bl	8004b4a <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8003d9a:	b25b      	sxtb	r3, r3
 8003d9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ffa9 	bl	8003cfc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7ff ffa6 	bl	8003cfc <RC522_SPI_Transfer>
 8003db0:	4603      	mov	r3, r0
 8003db2:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003db4:	2201      	movs	r2, #1
 8003db6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003dba:	4804      	ldr	r0, [pc, #16]	@ (8003dcc <Read_MFRC522+0x54>)
 8003dbc:	f000 fec5 	bl	8004b4a <HAL_GPIO_WritePin>

	return val;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]

}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40010c00 	.word	0x40010c00

08003dd0 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460a      	mov	r2, r1
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ffc8 	bl	8003d78 <Read_MFRC522>
 8003de8:	4603      	mov	r3, r0
 8003dea:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	79bb      	ldrb	r3, [r7, #6]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff95 	bl	8003d28 <Write_MFRC522>
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	460a      	mov	r2, r1
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ffad 	bl	8003d78 <Read_MFRC522>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8003e22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	b25a      	sxtb	r2, r3
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	4611      	mov	r1, r2
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff ff75 	bl	8003d28 <Write_MFRC522>
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8003e4a:	2014      	movs	r0, #20
 8003e4c:	f7ff ff94 	bl	8003d78 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8003e50:	2103      	movs	r1, #3
 8003e52:	2014      	movs	r0, #20
 8003e54:	f7ff ffbc 	bl	8003dd0 <SetBitMask>
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8003e60:	210f      	movs	r1, #15
 8003e62:	2001      	movs	r0, #1
 8003e64:	f7ff ff60 	bl	8003d28 <Write_MFRC522>
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8003e70:	2201      	movs	r2, #1
 8003e72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e76:	4813      	ldr	r0, [pc, #76]	@ (8003ec4 <MFRC522_Init+0x58>)
 8003e78:	f000 fe67 	bl	8004b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4810      	ldr	r0, [pc, #64]	@ (8003ec4 <MFRC522_Init+0x58>)
 8003e82:	f000 fe62 	bl	8004b4a <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8003e86:	f7ff ffe9 	bl	8003e5c <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8003e8a:	218d      	movs	r1, #141	@ 0x8d
 8003e8c:	202a      	movs	r0, #42	@ 0x2a
 8003e8e:	f7ff ff4b 	bl	8003d28 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8003e92:	213e      	movs	r1, #62	@ 0x3e
 8003e94:	202b      	movs	r0, #43	@ 0x2b
 8003e96:	f7ff ff47 	bl	8003d28 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8003e9a:	211e      	movs	r1, #30
 8003e9c:	202d      	movs	r0, #45	@ 0x2d
 8003e9e:	f7ff ff43 	bl	8003d28 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	202c      	movs	r0, #44	@ 0x2c
 8003ea6:	f7ff ff3f 	bl	8003d28 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8003eaa:	2140      	movs	r1, #64	@ 0x40
 8003eac:	2015      	movs	r0, #21
 8003eae:	f7ff ff3b 	bl	8003d28 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8003eb2:	213d      	movs	r1, #61	@ 0x3d
 8003eb4:	2011      	movs	r0, #17
 8003eb6:	f7ff ff37 	bl	8003d28 <Write_MFRC522>

	AntennaOn();
 8003eba:	f7ff ffc4 	bl	8003e46 <AntennaOn>
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40010c00 	.word	0x40010c00

08003ec8 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b089      	sub	sp, #36	@ 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	73fb      	strb	r3, [r7, #15]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	d006      	beq.n	8003efa <MFRC522_ToCard+0x32>
 8003eec:	2b0e      	cmp	r3, #14
 8003eee:	d109      	bne.n	8003f04 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8003ef0:	2312      	movs	r3, #18
 8003ef2:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	777b      	strb	r3, [r7, #29]
			break;
 8003ef8:	e005      	b.n	8003f06 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8003efa:	2377      	movs	r3, #119	@ 0x77
 8003efc:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8003efe:	2330      	movs	r3, #48	@ 0x30
 8003f00:	777b      	strb	r3, [r7, #29]
			break;
 8003f02:	e000      	b.n	8003f06 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8003f04:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8003f06:	7fbb      	ldrb	r3, [r7, #30]
 8003f08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	4619      	mov	r1, r3
 8003f10:	2002      	movs	r0, #2
 8003f12:	f7ff ff09 	bl	8003d28 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8003f16:	2180      	movs	r1, #128	@ 0x80
 8003f18:	2004      	movs	r0, #4
 8003f1a:	f7ff ff74 	bl	8003e06 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	200a      	movs	r0, #10
 8003f22:	f7ff ff55 	bl	8003dd0 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8003f26:	2100      	movs	r1, #0
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f7ff fefd 	bl	8003d28 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	e00a      	b.n	8003f4a <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	4413      	add	r3, r2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	2009      	movs	r0, #9
 8003f40:	f7ff fef2 	bl	8003d28 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	7bbb      	ldrb	r3, [r7, #14]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3f0      	bcc.n	8003f34 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	4619      	mov	r1, r3
 8003f56:	2001      	movs	r0, #1
 8003f58:	f7ff fee6 	bl	8003d28 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d103      	bne.n	8003f6a <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8003f62:	2180      	movs	r1, #128	@ 0x80
 8003f64:	200d      	movs	r0, #13
 8003f66:	f7ff ff33 	bl	8003dd0 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8003f6a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003f6e:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8003f70:	2004      	movs	r0, #4
 8003f72:	f7ff ff01 	bl	8003d78 <Read_MFRC522>
 8003f76:	4603      	mov	r3, r0
 8003f78:	773b      	strb	r3, [r7, #28]
        i--;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <MFRC522_ToCard+0xd4>
 8003f86:	7f3b      	ldrb	r3, [r7, #28]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <MFRC522_ToCard+0xd4>
 8003f90:	7f3a      	ldrb	r2, [r7, #28]
 8003f92:	7f7b      	ldrb	r3, [r7, #29]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0e9      	beq.n	8003f70 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8003f9c:	2180      	movs	r1, #128	@ 0x80
 8003f9e:	200d      	movs	r0, #13
 8003fa0:	f7ff ff31 	bl	8003e06 <ClearBitMask>

    if (i != 0)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d052      	beq.n	8004050 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8003faa:	2006      	movs	r0, #6
 8003fac:	f7ff fee4 	bl	8003d78 <Read_MFRC522>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f003 031b 	and.w	r3, r3, #27
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d148      	bne.n	800404c <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8003fbe:	7f3a      	ldrb	r2, [r7, #28]
 8003fc0:	7fbb      	ldrb	r3, [r7, #30]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d13b      	bne.n	8004050 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8003fd8:	200a      	movs	r0, #10
 8003fda:	f7ff fecd 	bl	8003d78 <Read_MFRC522>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8003fe2:	200c      	movs	r0, #12
 8003fe4:	f7ff fec8 	bl	8003d78 <Read_MFRC522>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8003ff6:	7f3b      	ldrb	r3, [r7, #28]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	00da      	lsls	r2, r3, #3
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	4413      	add	r3, r2
 8004000:	461a      	mov	r2, r3
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e004      	b.n	8004012 <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8004008:	7f3b      	ldrb	r3, [r7, #28]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	461a      	mov	r2, r3
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8004012:	7f3b      	ldrb	r3, [r7, #28]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <MFRC522_ToCard+0x154>
                {
					n = 1;
 8004018:	2301      	movs	r3, #1
 800401a:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 800401c:	7f3b      	ldrb	r3, [r7, #28]
 800401e:	2b10      	cmp	r3, #16
 8004020:	d901      	bls.n	8004026 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8004022:	2310      	movs	r3, #16
 8004024:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e00a      	b.n	8004042 <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	18d4      	adds	r4, r2, r3
 8004032:	2009      	movs	r0, #9
 8004034:	f7ff fea0 	bl	8003d78 <Read_MFRC522>
 8004038:	4603      	mov	r3, r0
 800403a:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	3301      	adds	r3, #1
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	7f3b      	ldrb	r3, [r7, #28]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3f0      	bcc.n	800402c <MFRC522_ToCard+0x164>
 800404a:	e001      	b.n	8004050 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 800404c:	2302      	movs	r3, #2
 800404e:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8004050:	7ffb      	ldrb	r3, [r7, #31]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	@ 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd90      	pop	{r4, r7, pc}

0800405a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af02      	add	r7, sp, #8
 8004060:	4603      	mov	r3, r0
 8004062:	6039      	str	r1, [r7, #0]
 8004064:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8004066:	2107      	movs	r1, #7
 8004068:	200d      	movs	r0, #13
 800406a:	f7ff fe5d 	bl	8003d28 <Write_MFRC522>

	TagType[0] = reqMode;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	79fa      	ldrb	r2, [r7, #7]
 8004072:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	6839      	ldr	r1, [r7, #0]
 8004080:	200c      	movs	r0, #12
 8004082:	f7ff ff21 	bl	8003ec8 <MFRC522_ToCard>
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d102      	bne.n	8004096 <MFRC522_Request+0x3c>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b10      	cmp	r3, #16
 8004094:	d001      	beq.n	800409a <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8004096:	2302      	movs	r3, #2
 8004098:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800409a:	7bfb      	ldrb	r3, [r7, #15]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80040b0:	2100      	movs	r1, #0
 80040b2:	200d      	movs	r0, #13
 80040b4:	f7ff fe38 	bl	8003d28 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2293      	movs	r2, #147	@ 0x93
 80040bc:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3301      	adds	r3, #1
 80040c2:	2220      	movs	r2, #32
 80040c4:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	200c      	movs	r0, #12
 80040d4:	f7ff fef8 	bl	8003ec8 <MFRC522_ToCard>
 80040d8:	4603      	mov	r3, r0
 80040da:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80040e2:	2300      	movs	r3, #0
 80040e4:	73bb      	strb	r3, [r7, #14]
 80040e6:	e009      	b.n	80040fc <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 80040e8:	7bbb      	ldrb	r3, [r7, #14]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4413      	add	r3, r2
 80040ee:	781a      	ldrb	r2, [r3, #0]
 80040f0:	7b7b      	ldrb	r3, [r7, #13]
 80040f2:	4053      	eors	r3, r2
 80040f4:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73bb      	strb	r3, [r7, #14]
 80040fc:	7bbb      	ldrb	r3, [r7, #14]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d9f2      	bls.n	80040e8 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8004102:	7bbb      	ldrb	r3, [r7, #14]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	7b7a      	ldrb	r2, [r7, #13]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8004110:	2302      	movs	r3, #2
 8004112:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <CalulateCRC>:
 * Description: CRC calculation with MF522
 * Input parameters: pIndata - To read the CRC data, len - the data length, pOutData - CRC calculation results
 * Return value: None
 */
void CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData)
{
 800411e:	b590      	push	{r4, r7, lr}
 8004120:	b087      	sub	sp, #28
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	460b      	mov	r3, r1
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	72fb      	strb	r3, [r7, #11]
    uchar i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 800412c:	2104      	movs	r1, #4
 800412e:	2005      	movs	r0, #5
 8004130:	f7ff fe69 	bl	8003e06 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Clear the FIFO pointer
 8004134:	2180      	movs	r1, #128	@ 0x80
 8004136:	200a      	movs	r0, #10
 8004138:	f7ff fe4a 	bl	8003dd0 <SetBitMask>

    //Writing data to the FIFO
    for (i=0; i<len; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
 8004140:	e00a      	b.n	8004158 <CalulateCRC+0x3a>
    {
		Write_MFRC522(FIFODataReg, *(pIndata+i));
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	2009      	movs	r0, #9
 800414e:	f7ff fdeb 	bl	8003d28 <Write_MFRC522>
    for (i=0; i<len; i++)
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	3301      	adds	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
 8004158:	7dfa      	ldrb	r2, [r7, #23]
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	429a      	cmp	r2, r3
 800415e:	d3f0      	bcc.n	8004142 <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 8004160:	2103      	movs	r1, #3
 8004162:	2001      	movs	r0, #1
 8004164:	f7ff fde0 	bl	8003d28 <Write_MFRC522>

    //Wait CRC calculation is complete
    i = 0xFF;
 8004168:	23ff      	movs	r3, #255	@ 0xff
 800416a:	75fb      	strb	r3, [r7, #23]
    do
    {
        n = Read_MFRC522(DivIrqReg);
 800416c:	2005      	movs	r0, #5
 800416e:	f7ff fe03 	bl	8003d78 <Read_MFRC522>
 8004172:	4603      	mov	r3, r0
 8004174:	75bb      	strb	r3, [r7, #22]
        i--;
 8004176:	7dfb      	ldrb	r3, [r7, #23]
 8004178:	3b01      	subs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <CalulateCRC+0x6e>
 8004182:	7dbb      	ldrb	r3, [r7, #22]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0ef      	beq.n	800416c <CalulateCRC+0x4e>

    //Read CRC calculation result
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 800418c:	2022      	movs	r0, #34	@ 0x22
 800418e:	f7ff fdf3 	bl	8003d78 <Read_MFRC522>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegH);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	1c5c      	adds	r4, r3, #1
 800419e:	2021      	movs	r0, #33	@ 0x21
 80041a0:	f7ff fdea 	bl	8003d78 <Read_MFRC522>
 80041a4:	4603      	mov	r3, r0
 80041a6:	7023      	strb	r3, [r4, #0]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <MFRC522_Halt>:
 * Description: Command card into hibernation
 * Input: None
 * Return value: None
 */
void MFRC522_Halt(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af02      	add	r7, sp, #8
	uint unLen;
	uchar buff[4];

	buff[0] = PICC_HALT;
 80041b6:	2350      	movs	r3, #80	@ 0x50
 80041b8:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	707b      	strb	r3, [r7, #1]
	CalulateCRC(buff, 2, &buff[2]);
 80041be:	463b      	mov	r3, r7
 80041c0:	1c9a      	adds	r2, r3, #2
 80041c2:	463b      	mov	r3, r7
 80041c4:	2102      	movs	r1, #2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ffa9 	bl	800411e <CalulateCRC>

	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff,&unLen);
 80041cc:	463a      	mov	r2, r7
 80041ce:	4639      	mov	r1, r7
 80041d0:	1d3b      	adds	r3, r7, #4
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	2204      	movs	r2, #4
 80041d8:	200c      	movs	r0, #12
 80041da:	f7ff fe75 	bl	8003ec8 <MFRC522_ToCard>
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <HAL_MspInit+0x5c>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	4a14      	ldr	r2, [pc, #80]	@ (8004244 <HAL_MspInit+0x5c>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	6193      	str	r3, [r2, #24]
 80041fa:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_MspInit+0x5c>)
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004206:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <HAL_MspInit+0x5c>)
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	4a0e      	ldr	r2, [pc, #56]	@ (8004244 <HAL_MspInit+0x5c>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004210:	61d3      	str	r3, [r2, #28]
 8004212:	4b0c      	ldr	r3, [pc, #48]	@ (8004244 <HAL_MspInit+0x5c>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800421e:	4b0a      	ldr	r3, [pc, #40]	@ (8004248 <HAL_MspInit+0x60>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	4a04      	ldr	r2, [pc, #16]	@ (8004248 <HAL_MspInit+0x60>)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800423a:	bf00      	nop
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40021000 	.word	0x40021000
 8004248:	40010000 	.word	0x40010000

0800424c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0310 	add.w	r3, r7, #16
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a15      	ldr	r2, [pc, #84]	@ (80042bc <HAL_I2C_MspInit+0x70>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d123      	bne.n	80042b4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426c:	4b14      	ldr	r3, [pc, #80]	@ (80042c0 <HAL_I2C_MspInit+0x74>)
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4a13      	ldr	r2, [pc, #76]	@ (80042c0 <HAL_I2C_MspInit+0x74>)
 8004272:	f043 0308 	orr.w	r3, r3, #8
 8004276:	6193      	str	r3, [r2, #24]
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_I2C_MspInit+0x74>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004284:	23c0      	movs	r3, #192	@ 0xc0
 8004286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004288:	2312      	movs	r3, #18
 800428a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800428c:	2303      	movs	r3, #3
 800428e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004290:	f107 0310 	add.w	r3, r7, #16
 8004294:	4619      	mov	r1, r3
 8004296:	480b      	ldr	r0, [pc, #44]	@ (80042c4 <HAL_I2C_MspInit+0x78>)
 8004298:	f000 fabc 	bl	8004814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800429c:	4b08      	ldr	r3, [pc, #32]	@ (80042c0 <HAL_I2C_MspInit+0x74>)
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	4a07      	ldr	r2, [pc, #28]	@ (80042c0 <HAL_I2C_MspInit+0x74>)
 80042a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042a6:	61d3      	str	r3, [r2, #28]
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_I2C_MspInit+0x74>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80042b4:	bf00      	nop
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40005400 	.word	0x40005400
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40010c00 	.word	0x40010c00

080042c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042d0:	f107 0310 	add.w	r3, r7, #16
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <HAL_SPI_MspInit+0x8c>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d131      	bne.n	800434c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80042e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004358 <HAL_SPI_MspInit+0x90>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <HAL_SPI_MspInit+0x90>)
 80042ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042f2:	61d3      	str	r3, [r2, #28]
 80042f4:	4b18      	ldr	r3, [pc, #96]	@ (8004358 <HAL_SPI_MspInit+0x90>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <HAL_SPI_MspInit+0x90>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4a14      	ldr	r2, [pc, #80]	@ (8004358 <HAL_SPI_MspInit+0x90>)
 8004306:	f043 0308 	orr.w	r3, r3, #8
 800430a:	6193      	str	r3, [r2, #24]
 800430c:	4b12      	ldr	r3, [pc, #72]	@ (8004358 <HAL_SPI_MspInit+0x90>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004318:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800431c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004322:	2303      	movs	r3, #3
 8004324:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004326:	f107 0310 	add.w	r3, r7, #16
 800432a:	4619      	mov	r1, r3
 800432c:	480b      	ldr	r0, [pc, #44]	@ (800435c <HAL_SPI_MspInit+0x94>)
 800432e:	f000 fa71 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004332:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004340:	f107 0310 	add.w	r3, r7, #16
 8004344:	4619      	mov	r1, r3
 8004346:	4805      	ldr	r0, [pc, #20]	@ (800435c <HAL_SPI_MspInit+0x94>)
 8004348:	f000 fa64 	bl	8004814 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40003800 	.word	0x40003800
 8004358:	40021000 	.word	0x40021000
 800435c:	40010c00 	.word	0x40010c00

08004360 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a12      	ldr	r2, [pc, #72]	@ (80043b8 <HAL_TIM_Base_MspInit+0x58>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004372:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <HAL_TIM_Base_MspInit+0x5c>)
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	4a11      	ldr	r2, [pc, #68]	@ (80043bc <HAL_TIM_Base_MspInit+0x5c>)
 8004378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800437c:	6193      	str	r3, [r2, #24]
 800437e:	4b0f      	ldr	r3, [pc, #60]	@ (80043bc <HAL_TIM_Base_MspInit+0x5c>)
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800438a:	e010      	b.n	80043ae <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004394:	d10b      	bne.n	80043ae <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004396:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_TIM_Base_MspInit+0x5c>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4a08      	ldr	r2, [pc, #32]	@ (80043bc <HAL_TIM_Base_MspInit+0x5c>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	61d3      	str	r3, [r2, #28]
 80043a2:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_TIM_Base_MspInit+0x5c>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
}
 80043ae:	bf00      	nop
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40021000 	.word	0x40021000

080043c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	@ 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a28      	ldr	r2, [pc, #160]	@ (800447c <HAL_TIM_MspPostInit+0xbc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d119      	bne.n	8004414 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e0:	4b27      	ldr	r3, [pc, #156]	@ (8004480 <HAL_TIM_MspPostInit+0xc0>)
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4a26      	ldr	r2, [pc, #152]	@ (8004480 <HAL_TIM_MspPostInit+0xc0>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6193      	str	r3, [r2, #24]
 80043ec:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <HAL_TIM_MspPostInit+0xc0>)
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80043f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043fe:	2302      	movs	r3, #2
 8004400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004402:	2302      	movs	r3, #2
 8004404:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004406:	f107 0314 	add.w	r3, r7, #20
 800440a:	4619      	mov	r1, r3
 800440c:	481d      	ldr	r0, [pc, #116]	@ (8004484 <HAL_TIM_MspPostInit+0xc4>)
 800440e:	f000 fa01 	bl	8004814 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004412:	e02f      	b.n	8004474 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441c:	d12a      	bne.n	8004474 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441e:	4b18      	ldr	r3, [pc, #96]	@ (8004480 <HAL_TIM_MspPostInit+0xc0>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	4a17      	ldr	r2, [pc, #92]	@ (8004480 <HAL_TIM_MspPostInit+0xc0>)
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	6193      	str	r3, [r2, #24]
 800442a:	4b15      	ldr	r3, [pc, #84]	@ (8004480 <HAL_TIM_MspPostInit+0xc0>)
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004436:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800443a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	2302      	movs	r3, #2
 8004442:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	4619      	mov	r1, r3
 800444a:	480f      	ldr	r0, [pc, #60]	@ (8004488 <HAL_TIM_MspPostInit+0xc8>)
 800444c:	f000 f9e2 	bl	8004814 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8004450:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <HAL_TIM_MspPostInit+0xcc>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004460:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004464:	627b      	str	r3, [r7, #36]	@ 0x24
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
 800446e:	4a07      	ldr	r2, [pc, #28]	@ (800448c <HAL_TIM_MspPostInit+0xcc>)
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	6053      	str	r3, [r2, #4]
}
 8004474:	bf00      	nop
 8004476:	3728      	adds	r7, #40	@ 0x28
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40021000 	.word	0x40021000
 8004484:	40010800 	.word	0x40010800
 8004488:	40010c00 	.word	0x40010c00
 800448c:	40010000 	.word	0x40010000

08004490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <NMI_Handler+0x4>

08004498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <HardFault_Handler+0x4>

080044a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <MemManage_Handler+0x4>

080044a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <BusFault_Handler+0x4>

080044b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <UsageFault_Handler+0x4>

080044b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr

080044dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044e0:	f000 f874 	bl	80045cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044f4:	f7ff fff8 	bl	80044e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044f8:	480b      	ldr	r0, [pc, #44]	@ (8004528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80044fa:	490c      	ldr	r1, [pc, #48]	@ (800452c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80044fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004500:	e002      	b.n	8004508 <LoopCopyDataInit>

08004502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004506:	3304      	adds	r3, #4

08004508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800450a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800450c:	d3f9      	bcc.n	8004502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800450e:	4a09      	ldr	r2, [pc, #36]	@ (8004534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004510:	4c09      	ldr	r4, [pc, #36]	@ (8004538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004514:	e001      	b.n	800451a <LoopFillZerobss>

08004516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004518:	3204      	adds	r2, #4

0800451a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800451a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800451c:	d3fb      	bcc.n	8004516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800451e:	f002 fce7 	bl	8006ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004522:	f7ff f8e1 	bl	80036e8 <main>
  bx lr
 8004526:	4770      	bx	lr
  ldr r0, =_sdata
 8004528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800452c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8004530:	080070c4 	.word	0x080070c4
  ldr r2, =_sbss
 8004534:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004538:	2000020c 	.word	0x2000020c

0800453c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800453c:	e7fe      	b.n	800453c <ADC1_2_IRQHandler>
	...

08004540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <HAL_Init+0x28>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a07      	ldr	r2, [pc, #28]	@ (8004568 <HAL_Init+0x28>)
 800454a:	f043 0310 	orr.w	r3, r3, #16
 800454e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004550:	2003      	movs	r0, #3
 8004552:	f000 f92b 	bl	80047ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004556:	200f      	movs	r0, #15
 8004558:	f000 f808 	bl	800456c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800455c:	f7ff fe44 	bl	80041e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40022000 	.word	0x40022000

0800456c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004574:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_InitTick+0x54>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b12      	ldr	r3, [pc, #72]	@ (80045c4 <HAL_InitTick+0x58>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004582:	fbb3 f3f1 	udiv	r3, r3, r1
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f935 	bl	80047fa <HAL_SYSTICK_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e00e      	b.n	80045b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d80a      	bhi.n	80045b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045a0:	2200      	movs	r2, #0
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	f000 f90b 	bl	80047c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045ac:	4a06      	ldr	r2, [pc, #24]	@ (80045c8 <HAL_InitTick+0x5c>)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e000      	b.n	80045b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000054 	.word	0x20000054
 80045c4:	2000005c 	.word	0x2000005c
 80045c8:	20000058 	.word	0x20000058

080045cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045d0:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_IncTick+0x1c>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <HAL_IncTick+0x20>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4413      	add	r3, r2
 80045dc:	4a03      	ldr	r2, [pc, #12]	@ (80045ec <HAL_IncTick+0x20>)
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	2000005c 	.word	0x2000005c
 80045ec:	20000208 	.word	0x20000208

080045f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return uwTick;
 80045f4:	4b02      	ldr	r3, [pc, #8]	@ (8004600 <HAL_GetTick+0x10>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	20000208 	.word	0x20000208

08004604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800460c:	f7ff fff0 	bl	80045f0 <HAL_GetTick>
 8004610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d005      	beq.n	800462a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800461e:	4b0a      	ldr	r3, [pc, #40]	@ (8004648 <HAL_Delay+0x44>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800462a:	bf00      	nop
 800462c:	f7ff ffe0 	bl	80045f0 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	429a      	cmp	r2, r3
 800463a:	d8f7      	bhi.n	800462c <HAL_Delay+0x28>
  {
  }
}
 800463c:	bf00      	nop
 800463e:	bf00      	nop
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	2000005c 	.word	0x2000005c

0800464c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004668:	4013      	ands	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467e:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	60d3      	str	r3, [r2, #12]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004698:	4b04      	ldr	r3, [pc, #16]	@ (80046ac <__NVIC_GetPriorityGrouping+0x18>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	f003 0307 	and.w	r3, r3, #7
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db0a      	blt.n	80046da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	490c      	ldr	r1, [pc, #48]	@ (80046fc <__NVIC_SetPriority+0x4c>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d8:	e00a      	b.n	80046f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4908      	ldr	r1, [pc, #32]	@ (8004700 <__NVIC_SetPriority+0x50>)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3b04      	subs	r3, #4
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	761a      	strb	r2, [r3, #24]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	@ 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf28      	it	cs
 8004722:	2304      	movcs	r3, #4
 8004724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	2b06      	cmp	r3, #6
 800472c:	d902      	bls.n	8004734 <NVIC_EncodePriority+0x30>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3b03      	subs	r3, #3
 8004732:	e000      	b.n	8004736 <NVIC_EncodePriority+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	401a      	ands	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43d9      	mvns	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	4313      	orrs	r3, r2
         );
}
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	@ 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3b01      	subs	r3, #1
 8004774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004778:	d301      	bcc.n	800477e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477a:	2301      	movs	r3, #1
 800477c:	e00f      	b.n	800479e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800477e:	4a0a      	ldr	r2, [pc, #40]	@ (80047a8 <SysTick_Config+0x40>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3b01      	subs	r3, #1
 8004784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004786:	210f      	movs	r1, #15
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	f7ff ff90 	bl	80046b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <SysTick_Config+0x40>)
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004796:	4b04      	ldr	r3, [pc, #16]	@ (80047a8 <SysTick_Config+0x40>)
 8004798:	2207      	movs	r2, #7
 800479a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	e000e010 	.word	0xe000e010

080047ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ff49 	bl	800464c <__NVIC_SetPriorityGrouping>
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	4603      	mov	r3, r0
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d4:	f7ff ff5e 	bl	8004694 <__NVIC_GetPriorityGrouping>
 80047d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	6978      	ldr	r0, [r7, #20]
 80047e0:	f7ff ff90 	bl	8004704 <NVIC_EncodePriority>
 80047e4:	4602      	mov	r2, r0
 80047e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff5f 	bl	80046b0 <__NVIC_SetPriority>
}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ffb0 	bl	8004768 <SysTick_Config>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	b480      	push	{r7}
 8004816:	b08b      	sub	sp, #44	@ 0x2c
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800481e:	2300      	movs	r3, #0
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004822:	2300      	movs	r3, #0
 8004824:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004826:	e169      	b.n	8004afc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004828:	2201      	movs	r2, #1
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	429a      	cmp	r2, r3
 8004842:	f040 8158 	bne.w	8004af6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	4a9a      	ldr	r2, [pc, #616]	@ (8004ab4 <HAL_GPIO_Init+0x2a0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d05e      	beq.n	800490e <HAL_GPIO_Init+0xfa>
 8004850:	4a98      	ldr	r2, [pc, #608]	@ (8004ab4 <HAL_GPIO_Init+0x2a0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d875      	bhi.n	8004942 <HAL_GPIO_Init+0x12e>
 8004856:	4a98      	ldr	r2, [pc, #608]	@ (8004ab8 <HAL_GPIO_Init+0x2a4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d058      	beq.n	800490e <HAL_GPIO_Init+0xfa>
 800485c:	4a96      	ldr	r2, [pc, #600]	@ (8004ab8 <HAL_GPIO_Init+0x2a4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d86f      	bhi.n	8004942 <HAL_GPIO_Init+0x12e>
 8004862:	4a96      	ldr	r2, [pc, #600]	@ (8004abc <HAL_GPIO_Init+0x2a8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d052      	beq.n	800490e <HAL_GPIO_Init+0xfa>
 8004868:	4a94      	ldr	r2, [pc, #592]	@ (8004abc <HAL_GPIO_Init+0x2a8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d869      	bhi.n	8004942 <HAL_GPIO_Init+0x12e>
 800486e:	4a94      	ldr	r2, [pc, #592]	@ (8004ac0 <HAL_GPIO_Init+0x2ac>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d04c      	beq.n	800490e <HAL_GPIO_Init+0xfa>
 8004874:	4a92      	ldr	r2, [pc, #584]	@ (8004ac0 <HAL_GPIO_Init+0x2ac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d863      	bhi.n	8004942 <HAL_GPIO_Init+0x12e>
 800487a:	4a92      	ldr	r2, [pc, #584]	@ (8004ac4 <HAL_GPIO_Init+0x2b0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d046      	beq.n	800490e <HAL_GPIO_Init+0xfa>
 8004880:	4a90      	ldr	r2, [pc, #576]	@ (8004ac4 <HAL_GPIO_Init+0x2b0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d85d      	bhi.n	8004942 <HAL_GPIO_Init+0x12e>
 8004886:	2b12      	cmp	r3, #18
 8004888:	d82a      	bhi.n	80048e0 <HAL_GPIO_Init+0xcc>
 800488a:	2b12      	cmp	r3, #18
 800488c:	d859      	bhi.n	8004942 <HAL_GPIO_Init+0x12e>
 800488e:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <HAL_GPIO_Init+0x80>)
 8004890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004894:	0800490f 	.word	0x0800490f
 8004898:	080048e9 	.word	0x080048e9
 800489c:	080048fb 	.word	0x080048fb
 80048a0:	0800493d 	.word	0x0800493d
 80048a4:	08004943 	.word	0x08004943
 80048a8:	08004943 	.word	0x08004943
 80048ac:	08004943 	.word	0x08004943
 80048b0:	08004943 	.word	0x08004943
 80048b4:	08004943 	.word	0x08004943
 80048b8:	08004943 	.word	0x08004943
 80048bc:	08004943 	.word	0x08004943
 80048c0:	08004943 	.word	0x08004943
 80048c4:	08004943 	.word	0x08004943
 80048c8:	08004943 	.word	0x08004943
 80048cc:	08004943 	.word	0x08004943
 80048d0:	08004943 	.word	0x08004943
 80048d4:	08004943 	.word	0x08004943
 80048d8:	080048f1 	.word	0x080048f1
 80048dc:	08004905 	.word	0x08004905
 80048e0:	4a79      	ldr	r2, [pc, #484]	@ (8004ac8 <HAL_GPIO_Init+0x2b4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80048e6:	e02c      	b.n	8004942 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	623b      	str	r3, [r7, #32]
          break;
 80048ee:	e029      	b.n	8004944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	3304      	adds	r3, #4
 80048f6:	623b      	str	r3, [r7, #32]
          break;
 80048f8:	e024      	b.n	8004944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	3308      	adds	r3, #8
 8004900:	623b      	str	r3, [r7, #32]
          break;
 8004902:	e01f      	b.n	8004944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	330c      	adds	r3, #12
 800490a:	623b      	str	r3, [r7, #32]
          break;
 800490c:	e01a      	b.n	8004944 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004916:	2304      	movs	r3, #4
 8004918:	623b      	str	r3, [r7, #32]
          break;
 800491a:	e013      	b.n	8004944 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004924:	2308      	movs	r3, #8
 8004926:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	611a      	str	r2, [r3, #16]
          break;
 800492e:	e009      	b.n	8004944 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004930:	2308      	movs	r3, #8
 8004932:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	615a      	str	r2, [r3, #20]
          break;
 800493a:	e003      	b.n	8004944 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800493c:	2300      	movs	r3, #0
 800493e:	623b      	str	r3, [r7, #32]
          break;
 8004940:	e000      	b.n	8004944 <HAL_GPIO_Init+0x130>
          break;
 8004942:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2bff      	cmp	r3, #255	@ 0xff
 8004948:	d801      	bhi.n	800494e <HAL_GPIO_Init+0x13a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	e001      	b.n	8004952 <HAL_GPIO_Init+0x13e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3304      	adds	r3, #4
 8004952:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2bff      	cmp	r3, #255	@ 0xff
 8004958:	d802      	bhi.n	8004960 <HAL_GPIO_Init+0x14c>
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	e002      	b.n	8004966 <HAL_GPIO_Init+0x152>
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	3b08      	subs	r3, #8
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	210f      	movs	r1, #15
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	401a      	ands	r2, r3
 8004978:	6a39      	ldr	r1, [r7, #32]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	fa01 f303 	lsl.w	r3, r1, r3
 8004980:	431a      	orrs	r2, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80b1 	beq.w	8004af6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004994:	4b4d      	ldr	r3, [pc, #308]	@ (8004acc <HAL_GPIO_Init+0x2b8>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	4a4c      	ldr	r2, [pc, #304]	@ (8004acc <HAL_GPIO_Init+0x2b8>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6193      	str	r3, [r2, #24]
 80049a0:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_GPIO_Init+0x2b8>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80049ac:	4a48      	ldr	r2, [pc, #288]	@ (8004ad0 <HAL_GPIO_Init+0x2bc>)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	3302      	adds	r3, #2
 80049b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	220f      	movs	r2, #15
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a40      	ldr	r2, [pc, #256]	@ (8004ad4 <HAL_GPIO_Init+0x2c0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d013      	beq.n	8004a00 <HAL_GPIO_Init+0x1ec>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a3f      	ldr	r2, [pc, #252]	@ (8004ad8 <HAL_GPIO_Init+0x2c4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00d      	beq.n	80049fc <HAL_GPIO_Init+0x1e8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a3e      	ldr	r2, [pc, #248]	@ (8004adc <HAL_GPIO_Init+0x2c8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d007      	beq.n	80049f8 <HAL_GPIO_Init+0x1e4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a3d      	ldr	r2, [pc, #244]	@ (8004ae0 <HAL_GPIO_Init+0x2cc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_GPIO_Init+0x1e0>
 80049f0:	2303      	movs	r3, #3
 80049f2:	e006      	b.n	8004a02 <HAL_GPIO_Init+0x1ee>
 80049f4:	2304      	movs	r3, #4
 80049f6:	e004      	b.n	8004a02 <HAL_GPIO_Init+0x1ee>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e002      	b.n	8004a02 <HAL_GPIO_Init+0x1ee>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_GPIO_Init+0x1ee>
 8004a00:	2300      	movs	r3, #0
 8004a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a04:	f002 0203 	and.w	r2, r2, #3
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	4093      	lsls	r3, r2
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a12:	492f      	ldr	r1, [pc, #188]	@ (8004ad0 <HAL_GPIO_Init+0x2bc>)
 8004a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a16:	089b      	lsrs	r3, r3, #2
 8004a18:	3302      	adds	r3, #2
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	492c      	ldr	r1, [pc, #176]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
 8004a38:	e006      	b.n	8004a48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	4928      	ldr	r1, [pc, #160]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004a54:	4b23      	ldr	r3, [pc, #140]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4922      	ldr	r1, [pc, #136]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60cb      	str	r3, [r1, #12]
 8004a60:	e006      	b.n	8004a70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a62:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	491e      	ldr	r1, [pc, #120]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d006      	beq.n	8004a8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4918      	ldr	r1, [pc, #96]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
 8004a88:	e006      	b.n	8004a98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a8a:	4b16      	ldr	r3, [pc, #88]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	43db      	mvns	r3, r3
 8004a92:	4914      	ldr	r1, [pc, #80]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d021      	beq.n	8004ae8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	490e      	ldr	r1, [pc, #56]	@ (8004ae4 <HAL_GPIO_Init+0x2d0>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]
 8004ab0:	e021      	b.n	8004af6 <HAL_GPIO_Init+0x2e2>
 8004ab2:	bf00      	nop
 8004ab4:	10320000 	.word	0x10320000
 8004ab8:	10310000 	.word	0x10310000
 8004abc:	10220000 	.word	0x10220000
 8004ac0:	10210000 	.word	0x10210000
 8004ac4:	10120000 	.word	0x10120000
 8004ac8:	10110000 	.word	0x10110000
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010800 	.word	0x40010800
 8004ad8:	40010c00 	.word	0x40010c00
 8004adc:	40011000 	.word	0x40011000
 8004ae0:	40011400 	.word	0x40011400
 8004ae4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b18 <HAL_GPIO_Init+0x304>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	4909      	ldr	r1, [pc, #36]	@ (8004b18 <HAL_GPIO_Init+0x304>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	3301      	adds	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	fa22 f303 	lsr.w	r3, r2, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f47f ae8e 	bne.w	8004828 <HAL_GPIO_Init+0x14>
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	372c      	adds	r7, #44	@ 0x2c
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	40010400 	.word	0x40010400

08004b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
 8004b38:	e001      	b.n	8004b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr

08004b4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	460b      	mov	r3, r1
 8004b54:	807b      	strh	r3, [r7, #2]
 8004b56:	4613      	mov	r3, r2
 8004b58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b5a:	787b      	ldrb	r3, [r7, #1]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b60:	887a      	ldrh	r2, [r7, #2]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004b66:	e003      	b.n	8004b70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004b68:	887b      	ldrh	r3, [r7, #2]
 8004b6a:	041a      	lsls	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	611a      	str	r2, [r3, #16]
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e12b      	b.n	8004de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fb52 	bl	800424c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	@ 0x24
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be0:	f001 f832 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 8004be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4a81      	ldr	r2, [pc, #516]	@ (8004df0 <HAL_I2C_Init+0x274>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d807      	bhi.n	8004c00 <HAL_I2C_Init+0x84>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a80      	ldr	r2, [pc, #512]	@ (8004df4 <HAL_I2C_Init+0x278>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf94      	ite	ls
 8004bf8:	2301      	movls	r3, #1
 8004bfa:	2300      	movhi	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e006      	b.n	8004c0e <HAL_I2C_Init+0x92>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a7d      	ldr	r2, [pc, #500]	@ (8004df8 <HAL_I2C_Init+0x27c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bf94      	ite	ls
 8004c08:	2301      	movls	r3, #1
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0e7      	b.n	8004de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a78      	ldr	r2, [pc, #480]	@ (8004dfc <HAL_I2C_Init+0x280>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0c9b      	lsrs	r3, r3, #18
 8004c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a6a      	ldr	r2, [pc, #424]	@ (8004df0 <HAL_I2C_Init+0x274>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d802      	bhi.n	8004c50 <HAL_I2C_Init+0xd4>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	e009      	b.n	8004c64 <HAL_I2C_Init+0xe8>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	4a69      	ldr	r2, [pc, #420]	@ (8004e00 <HAL_I2C_Init+0x284>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	099b      	lsrs	r3, r3, #6
 8004c62:	3301      	adds	r3, #1
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004c76:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	495c      	ldr	r1, [pc, #368]	@ (8004df0 <HAL_I2C_Init+0x274>)
 8004c80:	428b      	cmp	r3, r1
 8004c82:	d819      	bhi.n	8004cb8 <HAL_I2C_Init+0x13c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e59      	subs	r1, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c98:	400b      	ands	r3, r1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_I2C_Init+0x138>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1e59      	subs	r1, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb2:	e051      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e04f      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d111      	bne.n	8004ce4 <HAL_I2C_Init+0x168>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e58      	subs	r0, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	440b      	add	r3, r1
 8004cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e012      	b.n	8004d0a <HAL_I2C_Init+0x18e>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e58      	subs	r0, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	0099      	lsls	r1, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Init+0x196>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e022      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <HAL_I2C_Init+0x1bc>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e58      	subs	r0, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	440b      	add	r3, r1
 8004d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d36:	e00f      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e58      	subs	r0, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	0099      	lsls	r1, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	6809      	ldr	r1, [r1, #0]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004d86:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6911      	ldr	r1, [r2, #16]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	000186a0 	.word	0x000186a0
 8004df4:	001e847f 	.word	0x001e847f
 8004df8:	003d08ff 	.word	0x003d08ff
 8004dfc:	431bde83 	.word	0x431bde83
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	460b      	mov	r3, r1
 8004e12:	817b      	strh	r3, [r7, #10]
 8004e14:	4613      	mov	r3, r2
 8004e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff fbea 	bl	80045f0 <HAL_GetTick>
 8004e1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	f040 80e0 	bne.w	8004fec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2319      	movs	r3, #25
 8004e32:	2201      	movs	r2, #1
 8004e34:	4970      	ldr	r1, [pc, #448]	@ (8004ff8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 f964 	bl	8005104 <I2C_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
 8004e44:	e0d3      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_I2C_Master_Transmit+0x50>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e0cc      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d007      	beq.n	8004e7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0201 	orr.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2221      	movs	r2, #33	@ 0x21
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2210      	movs	r2, #16
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	893a      	ldrh	r2, [r7, #8]
 8004eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a50      	ldr	r2, [pc, #320]	@ (8004ffc <HAL_I2C_Master_Transmit+0x1f8>)
 8004eba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ebc:	8979      	ldrh	r1, [r7, #10]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f89c 	bl	8005000 <I2C_MasterRequestWrite>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e08d      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ee8:	e066      	b.n	8004fb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	6a39      	ldr	r1, [r7, #32]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fa22 	bl	8005338 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d107      	bne.n	8004f12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e06b      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11b      	bne.n	8004f8c <HAL_I2C_Master_Transmit+0x188>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d017      	beq.n	8004f8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	6a39      	ldr	r1, [r7, #32]
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fa19 	bl	80053c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d107      	bne.n	8004fb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e01a      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d194      	bne.n	8004eea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
  }
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	00100002 	.word	0x00100002
 8004ffc:	ffff0000 	.word	0xffff0000

08005000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	460b      	mov	r3, r1
 800500e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d006      	beq.n	800502a <I2C_MasterRequestWrite+0x2a>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d003      	beq.n	800502a <I2C_MasterRequestWrite+0x2a>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005028:	d108      	bne.n	800503c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e00b      	b.n	8005054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	2b12      	cmp	r3, #18
 8005042:	d107      	bne.n	8005054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f84f 	bl	8005104 <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00d      	beq.n	8005088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800507a:	d103      	bne.n	8005084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005082:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e035      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005090:	d108      	bne.n	80050a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005092:	897b      	ldrh	r3, [r7, #10]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050a0:	611a      	str	r2, [r3, #16]
 80050a2:	e01b      	b.n	80050dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050a4:	897b      	ldrh	r3, [r7, #10]
 80050a6:	11db      	asrs	r3, r3, #7
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f063 030f 	orn	r3, r3, #15
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	490e      	ldr	r1, [pc, #56]	@ (80050fc <I2C_MasterRequestWrite+0xfc>)
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f898 	bl	80051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e010      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050d2:	897b      	ldrh	r3, [r7, #10]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	4907      	ldr	r1, [pc, #28]	@ (8005100 <I2C_MasterRequestWrite+0x100>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f888 	bl	80051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	00010008 	.word	0x00010008
 8005100:	00010002 	.word	0x00010002

08005104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005114:	e048      	b.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511c:	d044      	beq.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	f7ff fa67 	bl	80045f0 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d302      	bcc.n	8005134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d139      	bne.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	d10d      	bne.n	800515a <I2C_WaitOnFlagUntilTimeout+0x56>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	43da      	mvns	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf0c      	ite	eq
 8005150:	2301      	moveq	r3, #1
 8005152:	2300      	movne	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	461a      	mov	r2, r3
 8005158:	e00c      	b.n	8005174 <I2C_WaitOnFlagUntilTimeout+0x70>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	43da      	mvns	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	4013      	ands	r3, r2
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	461a      	mov	r2, r3
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	429a      	cmp	r2, r3
 8005178:	d116      	bne.n	80051a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	f043 0220 	orr.w	r2, r3, #32
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e023      	b.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d10d      	bne.n	80051ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	43da      	mvns	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	e00c      	b.n	80051e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	43da      	mvns	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	b29b      	uxth	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bf0c      	ite	eq
 80051e0:	2301      	moveq	r3, #1
 80051e2:	2300      	movne	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d093      	beq.n	8005116 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005206:	e071      	b.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005216:	d123      	bne.n	8005260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005226:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e067      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005266:	d041      	beq.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005268:	f7ff f9c2 	bl	80045f0 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	d302      	bcc.n	800527e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d136      	bne.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d10c      	bne.n	80052a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	e00b      	b.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	43da      	mvns	r2, r3
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	4013      	ands	r3, r2
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d016      	beq.n	80052ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e021      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	0c1b      	lsrs	r3, r3, #16
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d10c      	bne.n	8005310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	43da      	mvns	r2, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e00b      	b.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	43da      	mvns	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	bf14      	ite	ne
 8005322:	2301      	movne	r3, #1
 8005324:	2300      	moveq	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f af6d 	bne.w	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005344:	e034      	b.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f886 	bl	8005458 <I2C_IsAcknowledgeFailed>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e034      	b.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d028      	beq.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7ff f947 	bl	80045f0 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11d      	bne.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b80      	cmp	r3, #128	@ 0x80
 8005380:	d016      	beq.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f043 0220 	orr.w	r2, r3, #32
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b80      	cmp	r3, #128	@ 0x80
 80053bc:	d1c3      	bne.n	8005346 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053d4:	e034      	b.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f83e 	bl	8005458 <I2C_IsAcknowledgeFailed>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e034      	b.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d028      	beq.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7ff f8ff 	bl	80045f0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11d      	bne.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b04      	cmp	r3, #4
 8005410:	d016      	beq.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800542c:	f043 0220 	orr.w	r2, r3, #32
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e007      	b.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b04      	cmp	r3, #4
 800544c:	d1c3      	bne.n	80053d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546e:	d11b      	bne.n	80054a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005478:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005494:	f043 0204 	orr.w	r2, r3, #4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e272      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8087 	beq.w	80055e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054d4:	4b92      	ldr	r3, [pc, #584]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 030c 	and.w	r3, r3, #12
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d00c      	beq.n	80054fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80054e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d112      	bne.n	8005512 <HAL_RCC_OscConfig+0x5e>
 80054ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f8:	d10b      	bne.n	8005512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fa:	4b89      	ldr	r3, [pc, #548]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d06c      	beq.n	80055e0 <HAL_RCC_OscConfig+0x12c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d168      	bne.n	80055e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e24c      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551a:	d106      	bne.n	800552a <HAL_RCC_OscConfig+0x76>
 800551c:	4b80      	ldr	r3, [pc, #512]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a7f      	ldr	r2, [pc, #508]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	e02e      	b.n	8005588 <HAL_RCC_OscConfig+0xd4>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10c      	bne.n	800554c <HAL_RCC_OscConfig+0x98>
 8005532:	4b7b      	ldr	r3, [pc, #492]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a7a      	ldr	r2, [pc, #488]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	4b78      	ldr	r3, [pc, #480]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a77      	ldr	r2, [pc, #476]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005544:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e01d      	b.n	8005588 <HAL_RCC_OscConfig+0xd4>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005554:	d10c      	bne.n	8005570 <HAL_RCC_OscConfig+0xbc>
 8005556:	4b72      	ldr	r3, [pc, #456]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a71      	ldr	r2, [pc, #452]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 800555c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005560:	6013      	str	r3, [r2, #0]
 8005562:	4b6f      	ldr	r3, [pc, #444]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a6e      	ldr	r2, [pc, #440]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e00b      	b.n	8005588 <HAL_RCC_OscConfig+0xd4>
 8005570:	4b6b      	ldr	r3, [pc, #428]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a6a      	ldr	r2, [pc, #424]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a67      	ldr	r2, [pc, #412]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005582:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d013      	beq.n	80055b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7ff f82e 	bl	80045f0 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005598:	f7ff f82a 	bl	80045f0 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	@ 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e200      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0f0      	beq.n	8005598 <HAL_RCC_OscConfig+0xe4>
 80055b6:	e014      	b.n	80055e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7ff f81a 	bl	80045f0 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c0:	f7ff f816 	bl	80045f0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b64      	cmp	r3, #100	@ 0x64
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1ec      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d2:	4b53      	ldr	r3, [pc, #332]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x10c>
 80055de:	e000      	b.n	80055e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d063      	beq.n	80056b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80055ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055fa:	4b49      	ldr	r3, [pc, #292]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	2b08      	cmp	r3, #8
 8005604:	d11c      	bne.n	8005640 <HAL_RCC_OscConfig+0x18c>
 8005606:	4b46      	ldr	r3, [pc, #280]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d116      	bne.n	8005640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005612:	4b43      	ldr	r3, [pc, #268]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_RCC_OscConfig+0x176>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d001      	beq.n	800562a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e1c0      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562a:	4b3d      	ldr	r3, [pc, #244]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4939      	ldr	r1, [pc, #228]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	e03a      	b.n	80056b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005648:	4b36      	ldr	r3, [pc, #216]	@ (8005724 <HAL_RCC_OscConfig+0x270>)
 800564a:	2201      	movs	r2, #1
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fe ffcf 	bl	80045f0 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005656:	f7fe ffcb 	bl	80045f0 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e1a1      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005668:	4b2d      	ldr	r3, [pc, #180]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0f0      	beq.n	8005656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005674:	4b2a      	ldr	r3, [pc, #168]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4927      	ldr	r1, [pc, #156]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 8005684:	4313      	orrs	r3, r2
 8005686:	600b      	str	r3, [r1, #0]
 8005688:	e015      	b.n	80056b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568a:	4b26      	ldr	r3, [pc, #152]	@ (8005724 <HAL_RCC_OscConfig+0x270>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005690:	f7fe ffae 	bl	80045f0 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005698:	f7fe ffaa 	bl	80045f0 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e180      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056aa:	4b1d      	ldr	r3, [pc, #116]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f0      	bne.n	8005698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d03a      	beq.n	8005738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d019      	beq.n	80056fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ca:	4b17      	ldr	r3, [pc, #92]	@ (8005728 <HAL_RCC_OscConfig+0x274>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d0:	f7fe ff8e 	bl	80045f0 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056d8:	f7fe ff8a 	bl	80045f0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e160      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <HAL_RCC_OscConfig+0x26c>)
 80056ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ee:	f003 0302 	and.w	r3, r3, #2
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056f6:	2001      	movs	r0, #1
 80056f8:	f000 faba 	bl	8005c70 <RCC_Delay>
 80056fc:	e01c      	b.n	8005738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_RCC_OscConfig+0x274>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005704:	f7fe ff74 	bl	80045f0 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800570a:	e00f      	b.n	800572c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800570c:	f7fe ff70 	bl	80045f0 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d908      	bls.n	800572c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e146      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
 800571e:	bf00      	nop
 8005720:	40021000 	.word	0x40021000
 8005724:	42420000 	.word	0x42420000
 8005728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800572c:	4b92      	ldr	r3, [pc, #584]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e9      	bne.n	800570c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80a6 	beq.w	8005892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005746:	2300      	movs	r3, #0
 8005748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574a:	4b8b      	ldr	r3, [pc, #556]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10d      	bne.n	8005772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005756:	4b88      	ldr	r3, [pc, #544]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4a87      	ldr	r2, [pc, #540]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005760:	61d3      	str	r3, [r2, #28]
 8005762:	4b85      	ldr	r3, [pc, #532]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005772:	4b82      	ldr	r3, [pc, #520]	@ (800597c <HAL_RCC_OscConfig+0x4c8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d118      	bne.n	80057b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800577e:	4b7f      	ldr	r3, [pc, #508]	@ (800597c <HAL_RCC_OscConfig+0x4c8>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a7e      	ldr	r2, [pc, #504]	@ (800597c <HAL_RCC_OscConfig+0x4c8>)
 8005784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578a:	f7fe ff31 	bl	80045f0 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005792:	f7fe ff2d 	bl	80045f0 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b64      	cmp	r3, #100	@ 0x64
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e103      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a4:	4b75      	ldr	r3, [pc, #468]	@ (800597c <HAL_RCC_OscConfig+0x4c8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d106      	bne.n	80057c6 <HAL_RCC_OscConfig+0x312>
 80057b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6213      	str	r3, [r2, #32]
 80057c4:	e02d      	b.n	8005822 <HAL_RCC_OscConfig+0x36e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCC_OscConfig+0x334>
 80057ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	4a69      	ldr	r2, [pc, #420]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	6213      	str	r3, [r2, #32]
 80057da:	4b67      	ldr	r3, [pc, #412]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4a66      	ldr	r2, [pc, #408]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057e0:	f023 0304 	bic.w	r3, r3, #4
 80057e4:	6213      	str	r3, [r2, #32]
 80057e6:	e01c      	b.n	8005822 <HAL_RCC_OscConfig+0x36e>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d10c      	bne.n	800580a <HAL_RCC_OscConfig+0x356>
 80057f0:	4b61      	ldr	r3, [pc, #388]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4a60      	ldr	r2, [pc, #384]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057f6:	f043 0304 	orr.w	r3, r3, #4
 80057fa:	6213      	str	r3, [r2, #32]
 80057fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	4a5d      	ldr	r2, [pc, #372]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005802:	f043 0301 	orr.w	r3, r3, #1
 8005806:	6213      	str	r3, [r2, #32]
 8005808:	e00b      	b.n	8005822 <HAL_RCC_OscConfig+0x36e>
 800580a:	4b5b      	ldr	r3, [pc, #364]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	4a5a      	ldr	r2, [pc, #360]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005810:	f023 0301 	bic.w	r3, r3, #1
 8005814:	6213      	str	r3, [r2, #32]
 8005816:	4b58      	ldr	r3, [pc, #352]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	4a57      	ldr	r2, [pc, #348]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800581c:	f023 0304 	bic.w	r3, r3, #4
 8005820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d015      	beq.n	8005856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800582a:	f7fe fee1 	bl	80045f0 <HAL_GetTick>
 800582e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005830:	e00a      	b.n	8005848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005832:	f7fe fedd 	bl	80045f0 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005840:	4293      	cmp	r3, r2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e0b1      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005848:	4b4b      	ldr	r3, [pc, #300]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0ee      	beq.n	8005832 <HAL_RCC_OscConfig+0x37e>
 8005854:	e014      	b.n	8005880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005856:	f7fe fecb 	bl	80045f0 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800585c:	e00a      	b.n	8005874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585e:	f7fe fec7 	bl	80045f0 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e09b      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005874:	4b40      	ldr	r3, [pc, #256]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1ee      	bne.n	800585e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d105      	bne.n	8005892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005886:	4b3c      	ldr	r3, [pc, #240]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	4a3b      	ldr	r2, [pc, #236]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800588c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8087 	beq.w	80059aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800589c:	4b36      	ldr	r3, [pc, #216]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d061      	beq.n	800596c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d146      	bne.n	800593e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b0:	4b33      	ldr	r3, [pc, #204]	@ (8005980 <HAL_RCC_OscConfig+0x4cc>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b6:	f7fe fe9b 	bl	80045f0 <HAL_GetTick>
 80058ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058be:	f7fe fe97 	bl	80045f0 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e06d      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d0:	4b29      	ldr	r3, [pc, #164]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f0      	bne.n	80058be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e4:	d108      	bne.n	80058f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80058e6:	4b24      	ldr	r3, [pc, #144]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	4921      	ldr	r1, [pc, #132]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f8:	4b1f      	ldr	r3, [pc, #124]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a19      	ldr	r1, [r3, #32]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	430b      	orrs	r3, r1
 800590a:	491b      	ldr	r1, [pc, #108]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	4313      	orrs	r3, r2
 800590e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005910:	4b1b      	ldr	r3, [pc, #108]	@ (8005980 <HAL_RCC_OscConfig+0x4cc>)
 8005912:	2201      	movs	r2, #1
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005916:	f7fe fe6b 	bl	80045f0 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591e:	f7fe fe67 	bl	80045f0 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e03d      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005930:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x46a>
 800593c:	e035      	b.n	80059aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593e:	4b10      	ldr	r3, [pc, #64]	@ (8005980 <HAL_RCC_OscConfig+0x4cc>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7fe fe54 	bl	80045f0 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594c:	f7fe fe50 	bl	80045f0 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e026      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800595e:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <HAL_RCC_OscConfig+0x4c4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x498>
 800596a:	e01e      	b.n	80059aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d107      	bne.n	8005984 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e019      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
 8005978:	40021000 	.word	0x40021000
 800597c:	40007000 	.word	0x40007000
 8005980:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005984:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <HAL_RCC_OscConfig+0x500>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	429a      	cmp	r2, r3
 8005996:	d106      	bne.n	80059a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d001      	beq.n	80059aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	40021000 	.word	0x40021000

080059b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e0d0      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d910      	bls.n	80059fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059da:	4b67      	ldr	r3, [pc, #412]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f023 0207 	bic.w	r2, r3, #7
 80059e2:	4965      	ldr	r1, [pc, #404]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ea:	4b63      	ldr	r3, [pc, #396]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0307 	and.w	r3, r3, #7
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d001      	beq.n	80059fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0b8      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d020      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a14:	4b59      	ldr	r3, [pc, #356]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	4a58      	ldr	r2, [pc, #352]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a2c:	4b53      	ldr	r3, [pc, #332]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a52      	ldr	r2, [pc, #328]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a38:	4b50      	ldr	r3, [pc, #320]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	494d      	ldr	r1, [pc, #308]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d040      	beq.n	8005ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	4b47      	ldr	r3, [pc, #284]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d115      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e07f      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d107      	bne.n	8005a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a76:	4b41      	ldr	r3, [pc, #260]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e073      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a86:	4b3d      	ldr	r3, [pc, #244]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e06b      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a96:	4b39      	ldr	r3, [pc, #228]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f023 0203 	bic.w	r2, r3, #3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4936      	ldr	r1, [pc, #216]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa8:	f7fe fda2 	bl	80045f0 <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fe fd9e 	bl	80045f0 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e053      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 020c 	and.w	r2, r3, #12
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d1eb      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b27      	ldr	r3, [pc, #156]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d210      	bcs.n	8005b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae6:	4b24      	ldr	r3, [pc, #144]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f023 0207 	bic.w	r2, r3, #7
 8005aee:	4922      	ldr	r1, [pc, #136]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	4b20      	ldr	r3, [pc, #128]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e032      	b.n	8005b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b14:	4b19      	ldr	r3, [pc, #100]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4916      	ldr	r1, [pc, #88]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b32:	4b12      	ldr	r3, [pc, #72]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	490e      	ldr	r1, [pc, #56]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b46:	f000 f821 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c4>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	091b      	lsrs	r3, r3, #4
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	490a      	ldr	r1, [pc, #40]	@ (8005b80 <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	5ccb      	ldrb	r3, [r1, r3]
 8005b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5e:	4a09      	ldr	r2, [pc, #36]	@ (8005b84 <HAL_RCC_ClockConfig+0x1cc>)
 8005b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b62:	4b09      	ldr	r3, [pc, #36]	@ (8005b88 <HAL_RCC_ClockConfig+0x1d0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fd00 	bl	800456c <HAL_InitTick>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40022000 	.word	0x40022000
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	08007090 	.word	0x08007090
 8005b84:	20000054 	.word	0x20000054
 8005b88:	20000058 	.word	0x20000058

08005b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 030c 	and.w	r3, r3, #12
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d002      	beq.n	8005bbc <HAL_RCC_GetSysClockFreq+0x30>
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d003      	beq.n	8005bc2 <HAL_RCC_GetSysClockFreq+0x36>
 8005bba:	e027      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bbc:	4b19      	ldr	r3, [pc, #100]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bbe:	613b      	str	r3, [r7, #16]
      break;
 8005bc0:	e027      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	0c9b      	lsrs	r3, r3, #18
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005bcc:	5cd3      	ldrb	r3, [r2, r3]
 8005bce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bda:	4b11      	ldr	r3, [pc, #68]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0x94>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	0c5b      	lsrs	r3, r3, #17
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	4a11      	ldr	r2, [pc, #68]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005be6:	5cd3      	ldrb	r3, [r2, r3]
 8005be8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005bee:	fb03 f202 	mul.w	r2, r3, r2
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e004      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8005c30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
 8005c04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	613b      	str	r3, [r7, #16]
      break;
 8005c0a:	e002      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c0c:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c0e:	613b      	str	r3, [r7, #16]
      break;
 8005c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c12:	693b      	ldr	r3, [r7, #16]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bc80      	pop	{r7}
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000
 8005c24:	007a1200 	.word	0x007a1200
 8005c28:	080070a8 	.word	0x080070a8
 8005c2c:	080070b8 	.word	0x080070b8
 8005c30:	003d0900 	.word	0x003d0900

08005c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c38:	4b02      	ldr	r3, [pc, #8]	@ (8005c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	20000054 	.word	0x20000054

08005c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c4c:	f7ff fff2 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 8005c50:	4602      	mov	r2, r0
 8005c52:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	0a1b      	lsrs	r3, r3, #8
 8005c58:	f003 0307 	and.w	r3, r3, #7
 8005c5c:	4903      	ldr	r1, [pc, #12]	@ (8005c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c5e:	5ccb      	ldrb	r3, [r1, r3]
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	080070a0 	.word	0x080070a0

08005c70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <RCC_Delay+0x34>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca8 <RCC_Delay+0x38>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	0a5b      	lsrs	r3, r3, #9
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c8c:	bf00      	nop
  }
  while (Delay --);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1e5a      	subs	r2, r3, #1
 8005c92:	60fa      	str	r2, [r7, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1f9      	bne.n	8005c8c <RCC_Delay+0x1c>
}
 8005c98:	bf00      	nop
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr
 8005ca4:	20000054 	.word	0x20000054
 8005ca8:	10624dd3 	.word	0x10624dd3

08005cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e076      	b.n	8005dac <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d108      	bne.n	8005cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cce:	d009      	beq.n	8005ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	61da      	str	r2, [r3, #28]
 8005cd6:	e005      	b.n	8005ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d106      	bne.n	8005d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7fe fae2 	bl	80042c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d36:	431a      	orrs	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d68:	ea42 0103 	orr.w	r1, r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	0c1a      	lsrs	r2, r3, #16
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f002 0204 	and.w	r2, r2, #4
 8005d8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	69da      	ldr	r2, [r3, #28]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc6:	f7fe fc13 	bl	80045f0 <HAL_GetTick>
 8005dca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dd2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dde:	7ffb      	ldrb	r3, [r7, #31]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d00c      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x4a>
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dea:	d106      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x46>
 8005df4:	7ffb      	ldrb	r3, [r7, #31]
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d001      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e17f      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_SPI_TransmitReceive+0x5c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_TransmitReceive+0x5c>
 8005e0a:	887b      	ldrh	r3, [r7, #2]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e174      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x6e>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e16d      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d003      	beq.n	8005e3e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2205      	movs	r2, #5
 8005e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	887a      	ldrh	r2, [r7, #2]
 8005e4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	887a      	ldrh	r2, [r7, #2]
 8005e66:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7e:	2b40      	cmp	r3, #64	@ 0x40
 8005e80:	d007      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e9a:	d17e      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0xf6>
 8005ea4:	8afb      	ldrh	r3, [r7, #22]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d16c      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eae:	881a      	ldrh	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	1c9a      	adds	r2, r3, #2
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ece:	e059      	b.n	8005f84 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d11b      	bne.n	8005f16 <HAL_SPI_TransmitReceive+0x162>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d016      	beq.n	8005f16 <HAL_SPI_TransmitReceive+0x162>
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d113      	bne.n	8005f16 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef2:	881a      	ldrh	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efe:	1c9a      	adds	r2, r3, #2
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d119      	bne.n	8005f58 <HAL_SPI_TransmitReceive+0x1a4>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d014      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f54:	2301      	movs	r3, #1
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f58:	f7fe fb4a 	bl	80045f0 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d80d      	bhi.n	8005f84 <HAL_SPI_TransmitReceive+0x1d0>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6e:	d009      	beq.n	8005f84 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e0bc      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1a0      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x11c>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d19b      	bne.n	8005ed0 <HAL_SPI_TransmitReceive+0x11c>
 8005f98:	e082      	b.n	80060a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x1f4>
 8005fa2:	8afb      	ldrh	r3, [r7, #22]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d171      	bne.n	800608c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	330c      	adds	r3, #12
 8005fb2:	7812      	ldrb	r2, [r2, #0]
 8005fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fce:	e05d      	b.n	800608c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d11c      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x264>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d017      	beq.n	8006018 <HAL_SPI_TransmitReceive+0x264>
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d114      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d119      	bne.n	800605a <HAL_SPI_TransmitReceive+0x2a6>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d014      	beq.n	800605a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	b2d2      	uxtb	r2, r2
 800603c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604c:	b29b      	uxth	r3, r3
 800604e:	3b01      	subs	r3, #1
 8006050:	b29a      	uxth	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006056:	2301      	movs	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800605a:	f7fe fac9 	bl	80045f0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006066:	429a      	cmp	r2, r3
 8006068:	d803      	bhi.n	8006072 <HAL_SPI_TransmitReceive+0x2be>
 800606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006070:	d102      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x2c4>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e038      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d19c      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x21c>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d197      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f8b7 	bl	8006218 <SPI_EndRxTxTransaction>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e01d      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e000      	b.n	80060fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
  }
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3728      	adds	r7, #40	@ 0x28
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006118:	f7fe fa6a 	bl	80045f0 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	4413      	add	r3, r2
 8006126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006128:	f7fe fa62 	bl	80045f0 <HAL_GetTick>
 800612c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800612e:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	015b      	lsls	r3, r3, #5
 8006134:	0d1b      	lsrs	r3, r3, #20
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	fb02 f303 	mul.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800613e:	e054      	b.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d050      	beq.n	80061ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006148:	f7fe fa52 	bl	80045f0 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	429a      	cmp	r2, r3
 8006156:	d902      	bls.n	800615e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d13d      	bne.n	80061da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800616c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006176:	d111      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006180:	d004      	beq.n	800618c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800618a:	d107      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800619a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061a4:	d10f      	bne.n	80061c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e017      	b.n	800620a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	4013      	ands	r3, r2
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	429a      	cmp	r2, r3
 8006206:	d19b      	bne.n	8006140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000054 	.word	0x20000054

08006218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2201      	movs	r2, #1
 800622c:	2102      	movs	r1, #2
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7ff ff6a 	bl	8006108 <SPI_WaitFlagStateUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623e:	f043 0220 	orr.w	r2, r3, #32
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e013      	b.n	8006272 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	2180      	movs	r1, #128	@ 0x80
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff ff57 	bl	8006108 <SPI_WaitFlagStateUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e000      	b.n	8006272 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e041      	b.n	8006310 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d106      	bne.n	80062a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fe f85d 	bl	8004360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	3304      	adds	r3, #4
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f000 fab1 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e041      	b.n	80063ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f839 	bl	80063b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3304      	adds	r3, #4
 8006354:	4619      	mov	r1, r3
 8006356:	4610      	mov	r0, r2
 8006358:	f000 fa62 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d109      	bne.n	80063ec <HAL_TIM_PWM_Start+0x24>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	bf14      	ite	ne
 80063e4:	2301      	movne	r3, #1
 80063e6:	2300      	moveq	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	e022      	b.n	8006432 <HAL_TIM_PWM_Start+0x6a>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d109      	bne.n	8006406 <HAL_TIM_PWM_Start+0x3e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	bf14      	ite	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	2300      	moveq	r3, #0
 8006402:	b2db      	uxtb	r3, r3
 8006404:	e015      	b.n	8006432 <HAL_TIM_PWM_Start+0x6a>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b08      	cmp	r3, #8
 800640a:	d109      	bne.n	8006420 <HAL_TIM_PWM_Start+0x58>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	bf14      	ite	ne
 8006418:	2301      	movne	r3, #1
 800641a:	2300      	moveq	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	e008      	b.n	8006432 <HAL_TIM_PWM_Start+0x6a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e05e      	b.n	80064f8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0x82>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006448:	e013      	b.n	8006472 <HAL_TIM_PWM_Start+0xaa>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b04      	cmp	r3, #4
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0x92>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006458:	e00b      	b.n	8006472 <HAL_TIM_PWM_Start+0xaa>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d104      	bne.n	800646a <HAL_TIM_PWM_Start+0xa2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006468:	e003      	b.n	8006472 <HAL_TIM_PWM_Start+0xaa>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fc5c 	bl	8006d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a1e      	ldr	r2, [pc, #120]	@ (8006500 <HAL_TIM_PWM_Start+0x138>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d107      	bne.n	800649a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006498:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <HAL_TIM_PWM_Start+0x138>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d00e      	beq.n	80064c2 <HAL_TIM_PWM_Start+0xfa>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ac:	d009      	beq.n	80064c2 <HAL_TIM_PWM_Start+0xfa>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a14      	ldr	r2, [pc, #80]	@ (8006504 <HAL_TIM_PWM_Start+0x13c>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIM_PWM_Start+0xfa>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a12      	ldr	r2, [pc, #72]	@ (8006508 <HAL_TIM_PWM_Start+0x140>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d111      	bne.n	80064e6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	d010      	beq.n	80064f6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e4:	e007      	b.n	80064f6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0201 	orr.w	r2, r2, #1
 80064f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40000400 	.word	0x40000400
 8006508:	40000800 	.word	0x40000800

0800650c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006526:	2302      	movs	r3, #2
 8006528:	e0ae      	b.n	8006688 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b0c      	cmp	r3, #12
 8006536:	f200 809f 	bhi.w	8006678 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006575 	.word	0x08006575
 8006544:	08006679 	.word	0x08006679
 8006548:	08006679 	.word	0x08006679
 800654c:	08006679 	.word	0x08006679
 8006550:	080065b5 	.word	0x080065b5
 8006554:	08006679 	.word	0x08006679
 8006558:	08006679 	.word	0x08006679
 800655c:	08006679 	.word	0x08006679
 8006560:	080065f7 	.word	0x080065f7
 8006564:	08006679 	.word	0x08006679
 8006568:	08006679 	.word	0x08006679
 800656c:	08006679 	.word	0x08006679
 8006570:	08006637 	.word	0x08006637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f9be 	bl	80068fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0208 	orr.w	r2, r2, #8
 800658e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0204 	bic.w	r2, r2, #4
 800659e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6999      	ldr	r1, [r3, #24]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	619a      	str	r2, [r3, #24]
      break;
 80065b2:	e064      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fa04 	bl	80069c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6999      	ldr	r1, [r3, #24]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	021a      	lsls	r2, r3, #8
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	619a      	str	r2, [r3, #24]
      break;
 80065f4:	e043      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68b9      	ldr	r1, [r7, #8]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fa4d 	bl	8006a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69da      	ldr	r2, [r3, #28]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0208 	orr.w	r2, r2, #8
 8006610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0204 	bic.w	r2, r2, #4
 8006620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69d9      	ldr	r1, [r3, #28]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	61da      	str	r2, [r3, #28]
      break;
 8006634:	e023      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fa97 	bl	8006b70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69d9      	ldr	r1, [r3, #28]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	021a      	lsls	r2, r3, #8
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	430a      	orrs	r2, r1
 8006674:	61da      	str	r2, [r3, #28]
      break;
 8006676:	e002      	b.n	800667e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]
      break;
 800667c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_TIM_ConfigClockSource+0x1c>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e0b4      	b.n	8006816 <HAL_TIM_ConfigClockSource+0x186>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2202      	movs	r2, #2
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e4:	d03e      	beq.n	8006764 <HAL_TIM_ConfigClockSource+0xd4>
 80066e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ea:	f200 8087 	bhi.w	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 80066ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066f2:	f000 8086 	beq.w	8006802 <HAL_TIM_ConfigClockSource+0x172>
 80066f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066fa:	d87f      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b70      	cmp	r3, #112	@ 0x70
 80066fe:	d01a      	beq.n	8006736 <HAL_TIM_ConfigClockSource+0xa6>
 8006700:	2b70      	cmp	r3, #112	@ 0x70
 8006702:	d87b      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 8006704:	2b60      	cmp	r3, #96	@ 0x60
 8006706:	d050      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x11a>
 8006708:	2b60      	cmp	r3, #96	@ 0x60
 800670a:	d877      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 800670c:	2b50      	cmp	r3, #80	@ 0x50
 800670e:	d03c      	beq.n	800678a <HAL_TIM_ConfigClockSource+0xfa>
 8006710:	2b50      	cmp	r3, #80	@ 0x50
 8006712:	d873      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 8006714:	2b40      	cmp	r3, #64	@ 0x40
 8006716:	d058      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0x13a>
 8006718:	2b40      	cmp	r3, #64	@ 0x40
 800671a:	d86f      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 800671c:	2b30      	cmp	r3, #48	@ 0x30
 800671e:	d064      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x15a>
 8006720:	2b30      	cmp	r3, #48	@ 0x30
 8006722:	d86b      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 8006724:	2b20      	cmp	r3, #32
 8006726:	d060      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x15a>
 8006728:	2b20      	cmp	r3, #32
 800672a:	d867      	bhi.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d05c      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x15a>
 8006730:	2b10      	cmp	r3, #16
 8006732:	d05a      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0x15a>
 8006734:	e062      	b.n	80067fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006746:	f000 fad8 	bl	8006cfa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	609a      	str	r2, [r3, #8]
      break;
 8006762:	e04f      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006774:	f000 fac1 	bl	8006cfa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689a      	ldr	r2, [r3, #8]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006786:	609a      	str	r2, [r3, #8]
      break;
 8006788:	e03c      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006796:	461a      	mov	r2, r3
 8006798:	f000 fa38 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2150      	movs	r1, #80	@ 0x50
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fa8f 	bl	8006cc6 <TIM_ITRx_SetConfig>
      break;
 80067a8:	e02c      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067b6:	461a      	mov	r2, r3
 80067b8:	f000 fa56 	bl	8006c68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2160      	movs	r1, #96	@ 0x60
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fa7f 	bl	8006cc6 <TIM_ITRx_SetConfig>
      break;
 80067c8:	e01c      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	461a      	mov	r2, r3
 80067d8:	f000 fa18 	bl	8006c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2140      	movs	r1, #64	@ 0x40
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fa6f 	bl	8006cc6 <TIM_ITRx_SetConfig>
      break;
 80067e8:	e00c      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	4610      	mov	r0, r2
 80067f6:	f000 fa66 	bl	8006cc6 <TIM_ITRx_SetConfig>
      break;
 80067fa:	e003      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006800:	e000      	b.n	8006804 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006814:	7bfb      	ldrb	r3, [r7, #15]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a2f      	ldr	r2, [pc, #188]	@ (80068f0 <TIM_Base_SetConfig+0xd0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d00b      	beq.n	8006850 <TIM_Base_SetConfig+0x30>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683e:	d007      	beq.n	8006850 <TIM_Base_SetConfig+0x30>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a2c      	ldr	r2, [pc, #176]	@ (80068f4 <TIM_Base_SetConfig+0xd4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_Base_SetConfig+0x30>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a2b      	ldr	r2, [pc, #172]	@ (80068f8 <TIM_Base_SetConfig+0xd8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d108      	bne.n	8006862 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4313      	orrs	r3, r2
 8006860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a22      	ldr	r2, [pc, #136]	@ (80068f0 <TIM_Base_SetConfig+0xd0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00b      	beq.n	8006882 <TIM_Base_SetConfig+0x62>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006870:	d007      	beq.n	8006882 <TIM_Base_SetConfig+0x62>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1f      	ldr	r2, [pc, #124]	@ (80068f4 <TIM_Base_SetConfig+0xd4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <TIM_Base_SetConfig+0x62>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a1e      	ldr	r2, [pc, #120]	@ (80068f8 <TIM_Base_SetConfig+0xd8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d108      	bne.n	8006894 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a0d      	ldr	r2, [pc, #52]	@ (80068f0 <TIM_Base_SetConfig+0xd0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d103      	bne.n	80068c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	611a      	str	r2, [r3, #16]
  }
}
 80068e6:	bf00      	nop
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bc80      	pop	{r7}
 80068ee:	4770      	bx	lr
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800

080068fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f023 0201 	bic.w	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	f023 0302 	bic.w	r3, r3, #2
 8006944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a1c      	ldr	r2, [pc, #112]	@ (80069c4 <TIM_OC1_SetConfig+0xc8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d10c      	bne.n	8006972 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f023 0308 	bic.w	r3, r3, #8
 800695e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a13      	ldr	r2, [pc, #76]	@ (80069c4 <TIM_OC1_SetConfig+0xc8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d111      	bne.n	800699e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	621a      	str	r2, [r3, #32]
}
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bc80      	pop	{r7}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40012c00 	.word	0x40012c00

080069c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	f023 0210 	bic.w	r2, r3, #16
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	021b      	lsls	r3, r3, #8
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0320 	bic.w	r3, r3, #32
 8006a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a1d      	ldr	r2, [pc, #116]	@ (8006a98 <TIM_OC2_SetConfig+0xd0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10d      	bne.n	8006a44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a14      	ldr	r2, [pc, #80]	@ (8006a98 <TIM_OC2_SetConfig+0xd0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d113      	bne.n	8006a74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	40012c00 	.word	0x40012c00

08006a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a1d      	ldr	r2, [pc, #116]	@ (8006b6c <TIM_OC3_SetConfig+0xd0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d10d      	bne.n	8006b16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a14      	ldr	r2, [pc, #80]	@ (8006b6c <TIM_OC3_SetConfig+0xd0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d113      	bne.n	8006b46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40012c00 	.word	0x40012c00

08006b70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	031b      	lsls	r3, r3, #12
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a0f      	ldr	r2, [pc, #60]	@ (8006c08 <TIM_OC4_SetConfig+0x98>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d109      	bne.n	8006be4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	019b      	lsls	r3, r3, #6
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr
 8006c08:	40012c00 	.word	0x40012c00

08006c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f023 0201 	bic.w	r2, r3, #1
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	011b      	lsls	r3, r3, #4
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 030a 	bic.w	r3, r3, #10
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	621a      	str	r2, [r3, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	371c      	adds	r7, #28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bc80      	pop	{r7}
 8006c66:	4770      	bx	lr

08006c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	f023 0210 	bic.w	r2, r3, #16
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	031b      	lsls	r3, r3, #12
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cde:	683a      	ldr	r2, [r7, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f043 0307 	orr.w	r3, r3, #7
 8006ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	609a      	str	r2, [r3, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr

08006cfa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
 8006d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	021a      	lsls	r2, r3, #8
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	609a      	str	r2, [r3, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr

08006d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1a      	ldr	r2, [r3, #32]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	401a      	ands	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	6879      	ldr	r1, [r7, #4]
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	431a      	orrs	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e046      	b.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a16      	ldr	r2, [pc, #88]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de4:	d009      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a12      	ldr	r2, [pc, #72]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a10      	ldr	r2, [pc, #64]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10c      	bne.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800

08006e3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e03d      	b.n	8006ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <memset>:
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4402      	add	r2, r0
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d100      	bne.n	8006ee8 <memset+0xa>
 8006ee6:	4770      	bx	lr
 8006ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8006eec:	e7f9      	b.n	8006ee2 <memset+0x4>
	...

08006ef0 <__libc_init_array>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	4d0c      	ldr	r5, [pc, #48]	@ (8006f28 <__libc_init_array+0x38>)
 8006ef6:	4c0d      	ldr	r4, [pc, #52]	@ (8006f2c <__libc_init_array+0x3c>)
 8006ef8:	1b64      	subs	r4, r4, r5
 8006efa:	10a4      	asrs	r4, r4, #2
 8006efc:	42a6      	cmp	r6, r4
 8006efe:	d109      	bne.n	8006f14 <__libc_init_array+0x24>
 8006f00:	f000 f81a 	bl	8006f38 <_init>
 8006f04:	2600      	movs	r6, #0
 8006f06:	4d0a      	ldr	r5, [pc, #40]	@ (8006f30 <__libc_init_array+0x40>)
 8006f08:	4c0a      	ldr	r4, [pc, #40]	@ (8006f34 <__libc_init_array+0x44>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	42a6      	cmp	r6, r4
 8006f10:	d105      	bne.n	8006f1e <__libc_init_array+0x2e>
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f18:	4798      	blx	r3
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7ee      	b.n	8006efc <__libc_init_array+0xc>
 8006f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f22:	4798      	blx	r3
 8006f24:	3601      	adds	r6, #1
 8006f26:	e7f2      	b.n	8006f0e <__libc_init_array+0x1e>
 8006f28:	080070bc 	.word	0x080070bc
 8006f2c:	080070bc 	.word	0x080070bc
 8006f30:	080070bc 	.word	0x080070bc
 8006f34:	080070c0 	.word	0x080070c0

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
